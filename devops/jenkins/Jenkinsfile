pipeline {
    agent any
    stages {
        stage('Upgrading mockserver') {
            when {
                branch "API_documentation"
            }
            environment {
                AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
                AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
            }
            steps {
                sh '''
                    mkdir node_tmp
                    cd node_tmp
                    curl https://mockserver-api-jenkins.s3.amazonaws.com/flush-reload.js -o flush-reload.js
                    curl https://mockserver-api-jenkins.s3.amazonaws.com/upload-api.js -o upload-api.js
                    
                    # Install node.js dependencies.
                    [ -z "$(npm list mockserver-client | grep empty)" ] || npm install mockserver-client
                    [ -z "$(npm list @aws-sdk/client-s3 | grep empty)" ] || npm install @aws-sdk/client-s3
                    
                    cp ../API_documentation.yaml api.yaml
                    
                    export AWS_REGION=us-east-1
                                                            
                    sed -i "s/REPLACE_ME/API-v$BUILD_NUMBER.yaml/g" upload-api.js
                    sed -i "s/REPLACE_ME/API-v$BUILD_NUMBER.yaml/g" flush-reload.js

                    node upload-api.js

                    node flush-reload.js flush
                    node flush-reload.js load
                '''
            }
        }
        stage('Building backend') {
            when {
                branch "development"
            }
            environment {
                GIT_PASSWORD = credentials('github-pat')
                DB_CREDS = credentials('db-creds')
                DB_NAME = credentials('db-name')
                EMAIL_CREDS = credentials('email-creds')
                DOCKER_CREDS = credentials('docker-creds')
                FACEBOOK_APP = credentials('facebook-app')
                GOOGLE_APP = credentials('google-app')
                JWT_SECRET = credentials('jwt-secret')
                EMAIL_HOST = credentials('email-host')
                EMAIL_PORT = credentials('email-port')
            }
            steps {
                sh '''
                    # Set up git credentials.
                    if [ ! -f "/var/jenkins_home/git-askpass-helper.sh" ]; then
                        echo "#!/bin/bash" >> /var/jenkins_home/git-askpass-helper.sh
                        echo 'exec echo $GIT_PASSWORD' >> /var/jenkins_home/git-askpass-helper.sh
                        chmod +x /var/jenkins_home/git-askpass-helper.sh
                    fi
                    export GIT_ASKPASS=/var/jenkins_home/git-askpass-helper.sh

                    # Getting the backend docker files
                    git clone https://cynico@github.com/NonLegit/devops.git
                    cp devops/dockerfiles/backend/Dockerfile devops/docker-compose/backend/docker-compose.yaml .
                    rm -rf devops
                    mv Dockerfile API/
                    cd API

                    # Creating the necessary files.
                    cat <<EOF > .env
                    NODE_ENV=production
                    PORT=8000
                    DATABASE=mongodb://$DB_CREDS_USR:$DB_CREDS_PSW@mongodb/$DB_NAME?authSource=admin

                    FRONTDOMAIN="https://web.nonlegit.click"
                    JWT_SECRET=$JWT_SECRET
                    JWT_EXPIRES_IN=3d
                    JWT_COOKIE_EXPIRES_IN=3

                    EMAIL_FROM=$EMAIL_CREDS_USR
                    NONLEGITEMAIL=$EMAIL_CREDS_USR
                    NONLEGITPASSWORD=$EMAIL_CREDS_PSW
                    EMAIL_PORT=$EMAIL_PORT
                    EMAIL_HOST=$EMAIL_HOST
                    BACKDOMAIN="https://api.nonlegit.click"

                    FACEBOOK_APP_ID=$FACEBOOK_APP_USR
                    FACEBOOK_APP_SECRET=$FACEBOOK_APP_PSW

                    GOOGLE_APP_ID=$GOOGLE_APP_USR
                    GOOGLE_APP_SECRET=$GOOGLE_APP_PSW
                    EOF

                    # Creating the script-up.sh for the backend container (migrate db files first, then start the server)
                    cat <<EOF > script-up.sh
                    #!/bin/sh

                    npm run up
                    node server.js
                    EOF

                    # Build the docker image
                    docker build -t cynic0/reddit-backend:latest . 

                    # Push the docker image.
                    docker login --username $DOCKER_CREDS_USR --password $DOCKER_CREDS_PSW
                    docker push cynic0/reddit-backend:latest

                    # Deleting credentials file from filesystem.
                    rm /var/jenkins_home/.docker/config.json

                    # Modify the docker compose file.
                    cd ..
                    sed -i 's/DB_USER/$DB_CREDS_USR/g;s/DB_PASSWORD/$DB_CREDS_PSW/g' docker-compose.yaml
                    if [ ! -d /var/jenkins_home/docker-compose ]; then
                        mkdir -p /var/jenkins_home/docker-compose/{backend,frontend}
                    fi
                    mv docker-compose.yaml /var/jenkins_home/docker-compose/backend                    
                '''
            }
        }
        stage('Deploying backend') {
            when {
                branch "development"
            }
            steps {
                sh '''
                    cd /var/jenkins_home/docker-compose/backend
                    docker compose down
                    docker compose up -d
                '''
            }
        }
    }
}