pipeline {
        agent any	
        stages {
                stage('Upgrading mockserver') {
                        when {
                                branch "API_documentation"
                        }
                        environment {
                                AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
                                AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
                        }
                        steps {
                                sh '''
                                        mkdir node_tmp
                                        cd node_tmp
                                        curl https://mockserver-api-jenkins.s3.amazonaws.com/flush-reload.js -o flush-reload.js
                                        curl https://mockserver-api-jenkins.s3.amazonaws.com/upload-api.js -o upload-api.js
                                        
                                        # Install node.js dependencies.
                                        [ -z "$(npm list mockserver-client | grep empty)" ] || npm install mockserver-client
                                        [ -z "$(npm list @aws-sdk/client-s3 | grep empty)" ] || npm install @aws-sdk/client-s3
                                        
                                        cp ../API_documentation.yaml api.yaml
                                        
                                        export AWS_ACCESS_EY=$AWS_ACCESS_KEY_ID
                                        export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
                                        export AWS_REGION=us-east-1
                                                                                
                                        sed -i "s/REPLACE_ME/API-v$BUILD_NUMBER.yaml/g" upload-api.js
                                        sed -i "s/REPLACE_ME/API-v$BUILD_NUMBER.yaml/g" flush-reload.js

                                        node upload-api.js

                                        node flush-reload.js flush
                                        node flush-reload.js load
                                '''
                        }
                }
                stage('Building backend') {
                        when {
                                branch "development"
                        }
                        environment {
                                GIT_PASSWORD = credentials('github-pat')
                        }
                        steps {
                                sh '''
                                        cd API
                                        # Set up git credentials.
                                        if [ ! -f "/var/jenkins_home/git-askpass-helper.sh" ]; then
                                                echo "#!/bin/bash" >> /var/jenkins_home/git-askpass-helper.sh
                                                echo 'exec echo $GIT_PASSWORD' >> /var/jenkins_home/git-askpass-helper.sh
                                                chmod +x /var/jenkins_home/git-askpass-helper.sh
                                        fi

                                        export GIT_ASKPASS=/var/jenkins_home/git-askpass-helper.sh
                                        export GIT_PASSWORD=$GIT_PASSWORD

                                        # Getting the backend Dockerfile
                                        git clone https://cynico@github.com/NonLegit/devops.git
                                        cp devops/dockerfiles/backend/Dockerfile .
                                        rm -rf devops

                                        # Modify the necessary files.

                                        # Build the docker image
                                        # docker build -t cynic0/reddit-backend:latest .

                                        # Push the docker image.
                                        # docker push cynic0/reddit-backend:latest

                                        # Restart docker compose  
                                '''
                        }
                }
                stage('Deploying backend') {
                        when {
                                branch "development"
                        }
                        steps {
                        				echo xd
												}
                }
        }
}
