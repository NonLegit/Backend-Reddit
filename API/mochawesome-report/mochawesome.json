{
  "stats": {
    "suites": 263,
    "tests": 879,
    "passes": 879,
    "pending": 0,
    "failures": 0,
    "start": "2022-12-26T12:34:40.639Z",
    "end": "2022-12-26T12:34:41.852Z",
    "duration": 1213,
    "testsRegistered": 879,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "250e74e8-e577-416b-aadb-f305623f9001",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4af3ee3c-ca33-46ce-a4b9-5253a5af7757",
          "title": "Authentication Controller Test",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\authenticationController.js",
          "file": "\\test\\controllers\\authenticationController.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4aa947d4-18e7-475a-8702-3003238efb4a",
              "title": "Sign-up Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\authenticationController.js",
              "file": "\\test\\controllers\\authenticationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Authentication Controller Test Sign-up Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    email: \"ahmedAgmail.com\",\n    userName: \"ahmed\",\n    password: \"Aa123456*\",\n  },\n};\nconst UserService = {\n  getPrefs: async (email, password, userName) => {\n    const response = {\n      success: true,\n      token: \"jwt\",\n    };\n    return response;\n  },\n  signUp: async (email, password, userName) => {\n    const response = {\n      success: true,\n      token: \"jwt\",\n    };\n    return response;\n  },\n  checkPasswordStrength: (password) => {\n    return \"medium\";\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.signUp(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "5fb83dfc-dd31-4b6a-adf9-3e7fcf22aa42",
                  "parentUUID": "4aa947d4-18e7-475a-8702-3003238efb4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test bad request not provide all body data",
                  "fullTitle": "Authentication Controller Test Sign-up Test second test bad request not provide all body data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    email: \"ahmedAgmail.com\",\n    userName: \"ahmed\",\n  },\n};\nconst UserService = {\n  signUp: async (email, password, userName) => {\n    const response = {\n      success: true,\n      token: \"jwt\",\n    };\n    return response;\n  },\n  checkPasswordStrength: (password) => {\n    return \"medium\";\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.signUp(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Provide username, email and password\",\n  errorType: 0,\n});",
                  "err": {},
                  "uuid": "a9233571-92b1-4bd0-98cf-741b5512fd3b",
                  "parentUUID": "4aa947d4-18e7-475a-8702-3003238efb4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test bad request user already exists",
                  "fullTitle": "Authentication Controller Test Sign-up Test thrid test bad request user already exists",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    email: \"ahmedAgmail.com\",\n    userName: \"ahmed\",\n    password: \"123\",\n  },\n};\nconst UserService = {\n  signUp: async (email, password, userName) => {\n    const response = {\n      success: false,\n      error: userErrors.USER_ALREADY_EXISTS,\n      msg: \"User Already Exists\",\n    };\n    return response;\n  },\n  checkPasswordStrength: (password) => {\n    return \"medium\";\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.signUp(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.deep.calledWith({\n  status: \"fail\",\n  errorMessage: \"User Already Exists\",\n  errorType: 2,\n});",
                  "err": {},
                  "uuid": "303032bf-0724-4e1c-b9a9-cf4f1f85b406",
                  "parentUUID": "4aa947d4-18e7-475a-8702-3003238efb4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fifth test bad request  weak password",
                  "fullTitle": "Authentication Controller Test Sign-up Test fifth test bad request  weak password",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    email: \"ahmedAgmail.com\",\n    userName: \"ahmed\",\n    password: \"123456A\",\n  },\n};\nconst UserService = {\n  signUp: async (email, password, userName) => {\n    const response = {\n      success: false,\n      error: userErrors.USER_ALREADY_EXISTS,\n      msg: \"User Already Exists\",\n    };\n    return response;\n  },\n  checkPasswordStrength: (password) => {\n    return \"Too weak\";\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.signUp(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.deep.calledWith({\n  status: \"fail\",\n  errorMessage: \"Too weak password\",\n  errorType: 1,\n});",
                  "err": {},
                  "uuid": "831e77d5-97c7-406d-b04e-47ab98e57929",
                  "parentUUID": "4aa947d4-18e7-475a-8702-3003238efb4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test bad request Too weak password",
                  "fullTitle": "Authentication Controller Test Sign-up Test fourth test bad request Too weak password",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    email: \"ahmedAgmail.com\",\n    userName: \"ahmed\",\n    password: \"123\",\n  },\n};\nconst UserService = {\n  signUp: async (email, password, userName) => {\n    const response = {\n      success: false,\n      error: userErrors.USER_ALREADY_EXISTS,\n      msg: \"User Already Exists\",\n    };\n    return response;\n  },\n  checkPasswordStrength: (password) => {\n    return \"Weak\";\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.signUp(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.deep.calledWith({\n  status: \"fail\",\n  errorMessage: \"Weak password\",\n  errorType: 1,\n});",
                  "err": {},
                  "uuid": "a9602c7b-fbcb-4918-bdc6-e16243bd9df9",
                  "parentUUID": "4aa947d4-18e7-475a-8702-3003238efb4a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5fb83dfc-dd31-4b6a-adf9-3e7fcf22aa42",
                "a9233571-92b1-4bd0-98cf-741b5512fd3b",
                "303032bf-0724-4e1c-b9a9-cf4f1f85b406",
                "831e77d5-97c7-406d-b04e-47ab98e57929",
                "a9602c7b-fbcb-4918-bdc6-e16243bd9df9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "71765436-7864-4ccd-a000-1cf7096ee76f",
              "title": "Login Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\authenticationController.js",
              "file": "\\test\\controllers\\authenticationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Authentication Controller Test Login Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    userName: \"ahmed\",\n    password: \"Aa123456*\",\n  },\n};\nconst UserService = {\n  logIn: async (password, userName) => {\n    const response = {\n      success: true,\n      token: \"jwt\",\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.logIn(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);",
                  "err": {},
                  "uuid": "5afa6595-bfe8-4e17-9de8-a175400e5efb",
                  "parentUUID": "71765436-7864-4ccd-a000-1cf7096ee76f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test bad request not provide all body data",
                  "fullTitle": "Authentication Controller Test Login Test second test bad request not provide all body data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    userName: \"ahmed\",\n  },\n};\nconst UserService = {\n  logIn: async (password, userName) => {\n    const response = {\n      success: true,\n      token: \"jwt\",\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.logIn(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Provide username and password\",\n});",
                  "err": {},
                  "uuid": "9dfe24da-d3db-4629-8f68-24e2ba6c864e",
                  "parentUUID": "71765436-7864-4ccd-a000-1cf7096ee76f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test bad request user not found ",
                  "fullTitle": "Authentication Controller Test Login Test thrid test bad request user not found ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    userName: \"ahmed\",\n    password: \"123\",\n  },\n};\nconst UserService = {\n  logIn: async (password, userName) => {\n    const response = {\n      success: false,\n      error: userErrors.USER_NOT_FOUND,\n      msg: \"User Already Exists\",\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.logIn(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.deep.calledWith({\n  status: \"fail\",\n  errorMessage: \"User Not Found\",\n});",
                  "err": {},
                  "uuid": "eae7455c-5709-4e9d-a388-dfacea46d2ca",
                  "parentUUID": "71765436-7864-4ccd-a000-1cf7096ee76f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test incorrect password",
                  "fullTitle": "Authentication Controller Test Login Test fourth test incorrect password",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    userName: \"ahmed\",\n    password: \"123\",\n  },\n};\nconst UserService = {\n  logIn: async (password, userName) => {\n    const response = {\n      success: false,\n      error: userErrors.INCORRECT_PASSWORD,\n      msg: \"Incorrect Password\",\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.logIn(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.deep.calledWith({\n  status: \"fail\",\n  errorMessage: \"Incorrect Password\",\n});",
                  "err": {},
                  "uuid": "b37f105f-d76c-4003-8d36-ce587bb89388",
                  "parentUUID": "71765436-7864-4ccd-a000-1cf7096ee76f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5afa6595-bfe8-4e17-9de8-a175400e5efb",
                "9dfe24da-d3db-4629-8f68-24e2ba6c864e",
                "eae7455c-5709-4e9d-a388-dfacea46d2ca",
                "b37f105f-d76c-4003-8d36-ce587bb89388"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "0972b254-94d7-47b7-8ff0-7f3981389553",
              "title": "forgot password Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\authenticationController.js",
              "file": "\\test\\controllers\\authenticationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Authentication Controller Test forgot password Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    userName: \"ahmed\",\n    email: \"ahmedAgmail.com\",\n  },\n};\nconst UserService = {\n  forgotPassword: async (password, userName) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.forgotPassword(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(204);",
                  "err": {},
                  "uuid": "5fce4e06-95fa-4ab1-9a91-a4554184be11",
                  "parentUUID": "0972b254-94d7-47b7-8ff0-7f3981389553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test bad request not provide all body data",
                  "fullTitle": "Authentication Controller Test forgot password Test second test bad request not provide all body data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    userName: \"ahmed\",\n  },\n};\nconst UserService = {\n  forgotPassword: async (password, userName) => {\n    const response = {\n      success: true,\n      token: \"jwt\",\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.forgotPassword(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Provide username and email\",\n});",
                  "err": {},
                  "uuid": "cc97bafb-98ac-469c-8461-4ba4210d05dc",
                  "parentUUID": "0972b254-94d7-47b7-8ff0-7f3981389553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test fail user not found ",
                  "fullTitle": "Authentication Controller Test forgot password Test thrid test fail user not found ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    userName: \"ahmed\",\n    email: \"ahmedAgmail.com\",\n  },\n};\nconst UserService = {\n  forgotPassword: async (password, userName) => {\n    const response = {\n      success: false,\n      error: userErrors.USER_NOT_FOUND,\n      msg: \"User Not Found\",\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.forgotPassword(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.deep.calledWith({\n  status: \"fail\",\n  errorMessage: \"User Not Found\",\n});",
                  "err": {},
                  "uuid": "c99d3c37-04f5-4563-b2b2-92a1b3afd46a",
                  "parentUUID": "0972b254-94d7-47b7-8ff0-7f3981389553",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5fce4e06-95fa-4ab1-9a91-a4554184be11",
                "cc97bafb-98ac-469c-8461-4ba4210d05dc",
                "c99d3c37-04f5-4563-b2b2-92a1b3afd46a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "92b5a8ba-a1dc-4326-bb3d-58d56756c7c4",
              "title": "forgot UserName Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\authenticationController.js",
              "file": "\\test\\controllers\\authenticationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Authentication Controller Test forgot UserName Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    email: \"ahmedAgmail.com\",\n  },\n};\nconst UserService = {\n  forgotUserName: async (userName) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.forgotUserName(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(204);",
                  "err": {},
                  "uuid": "e5723724-3e06-43eb-8394-e0c921b3556c",
                  "parentUUID": "92b5a8ba-a1dc-4326-bb3d-58d56756c7c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test bad request not provide all body data",
                  "fullTitle": "Authentication Controller Test forgot UserName Test second test bad request not provide all body data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {},\n};\nconst UserService = {\n  forgotUserName: async (password, userName) => {\n    const response = {\n      success: true,\n      token: \"jwt\",\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.forgotUserName(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Provide email\",\n});",
                  "err": {},
                  "uuid": "ed6c52fd-926f-4bd9-8af6-9ff9cdbf108b",
                  "parentUUID": "92b5a8ba-a1dc-4326-bb3d-58d56756c7c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test fail user not found ",
                  "fullTitle": "Authentication Controller Test forgot UserName Test thrid test fail user not found ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    userName: \"ahmed\",\n    email: \"ahmedAgmail.com\",\n  },\n};\nconst UserService = {\n  forgotUserName: async (password, userName) => {\n    const response = {\n      success: false,\n      error: userErrors.USER_NOT_FOUND,\n      msg: \"User Not Found\",\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.forgotUserName(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.deep.calledWith({\n  status: \"fail\",\n  errorMessage: \"User Not Found\",\n});",
                  "err": {},
                  "uuid": "589650b8-1435-48dc-9ac5-5f585c19bc41",
                  "parentUUID": "92b5a8ba-a1dc-4326-bb3d-58d56756c7c4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e5723724-3e06-43eb-8394-e0c921b3556c",
                "ed6c52fd-926f-4bd9-8af6-9ff9cdbf108b",
                "589650b8-1435-48dc-9ac5-5f585c19bc41"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "4d12a2ae-0bcc-4c80-a1ea-ad2f8c79bc3b",
              "title": "reset password Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\authenticationController.js",
              "file": "\\test\\controllers\\authenticationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Authentication Controller Test reset password Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    token: \"token\",\n  },\n  body: {\n    password: \"Aa123456*\",\n    confirmPassword: \"Aa123456*\",\n  },\n};\nconst UserService = {\n  checkPasswordStrength: (password) => {\n    return \"Medium\";\n  },\n  resetPassword: async (resetToken, userName) => {\n    const response = {\n      success: true,\n      token: \"jwt\",\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.resetPassword(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);",
                  "err": {},
                  "uuid": "8638821f-6947-4c5e-b046-85dc14ff2a6b",
                  "parentUUID": "4d12a2ae-0bcc-4c80-a1ea-ad2f8c79bc3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test bad request not provide all body data",
                  "fullTitle": "Authentication Controller Test reset password Test second test bad request not provide all body data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    token: \"token\",\n  },\n  body: {\n    password: \"Aa1234\",\n  },\n};\nconst UserService = {\n  checkPasswordStrength: (password) => {\n    return \"Weak\";\n  },\n  resetPassword: async (resetToken, userName) => {\n    const response = {\n      success: true,\n      token: \"jwt\",\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.resetPassword(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Provide password and confirm password\",\n  errorType: 0,\n});",
                  "err": {},
                  "uuid": "3a7f234b-44c1-4064-8f23-b8a949d0d5f2",
                  "parentUUID": "4d12a2ae-0bcc-4c80-a1ea-ad2f8c79bc3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test expired token ",
                  "fullTitle": "Authentication Controller Test reset password Test thrid test expired token ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    token: \"token\",\n  },\n  body: {\n    password: \"Aa123456*\",\n    confirmPassword: \"Aa123456*\",\n  },\n};\nconst UserService = {\n  checkPasswordStrength: (password) => {\n    return \"Medium\";\n  },\n  resetPassword: async (password, userName) => {\n    const response = {\n      success: false,\n      error: userErrors.INVALID_RESET_TOKEN,\n      msg: \"Token Invalid or Has Expired\",\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.resetPassword(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status(401).json).to.deep.calledWith({\n  status: \"fail\",\n  errorMessage: \"Token Invalid or Has Expired\",\n});",
                  "err": {},
                  "uuid": "f2955604-be29-4043-b872-dcf46c4f55ef",
                  "parentUUID": "4d12a2ae-0bcc-4c80-a1ea-ad2f8c79bc3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test password not equal confirmPassword ",
                  "fullTitle": "Authentication Controller Test reset password Test fourth test password not equal confirmPassword ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    token: \"token\",\n  },\n  body: {\n    password: \"Aa1234\",\n    confirmPassword: \"Aa12345\",\n  },\n};\nconst UserService = {\n  checkPasswordStrength: (password) => {\n    return \"Weak\";\n  },\n  resetPassword: async (password, userName) => {\n    const response = {\n      success: false,\n      error: userErrors.INVALID_RESET_TOKEN,\n      msg: \"Provide correct Passwords\",\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.resetPassword(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status(401).json).to.deep.calledWith({\n  status: \"fail\",\n  errorMessage: \"Provide Equal Passwords\",\n  errorType: 1,\n});",
                  "err": {},
                  "uuid": "b0fd87cb-1b75-4252-80ee-350cfa4140ab",
                  "parentUUID": "4d12a2ae-0bcc-4c80-a1ea-ad2f8c79bc3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fifth test weak ",
                  "fullTitle": "Authentication Controller Test reset password Test fifth test weak ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    token: \"token\",\n  },\n  body: {\n    password: \"Aa1234\",\n    confirmPassword: \"Aa1234\",\n  },\n};\nconst UserService = {\n  checkPasswordStrength: (password) => {\n    return \"Weak\";\n  },\n  resetPassword: async (password, userName) => {\n    const response = {\n      success: false,\n      error: userErrors.INVALID_RESET_TOKEN,\n      msg: \"Provide correct Passwords\",\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.resetPassword(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.deep.calledWith({\n  status: \"fail\",\n  errorMessage: \"Weak password\",\n  errorType: 2,\n});",
                  "err": {},
                  "uuid": "598306be-b826-42dc-89ad-622a84a646b7",
                  "parentUUID": "4d12a2ae-0bcc-4c80-a1ea-ad2f8c79bc3b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8638821f-6947-4c5e-b046-85dc14ff2a6b",
                "3a7f234b-44c1-4064-8f23-b8a949d0d5f2",
                "f2955604-be29-4043-b872-dcf46c4f55ef",
                "b0fd87cb-1b75-4252-80ee-350cfa4140ab",
                "598306be-b826-42dc-89ad-622a84a646b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "92b7fbd4-2a06-4e4e-9f1b-e92d593b7c94",
              "title": "authorize  Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\authenticationController.js",
              "file": "\\test\\controllers\\authenticationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Authentication Controller Test authorize  Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  cookies: {\n    jwt: \"token\",\n  },\n};\nconst UserService = {\n  getUser: async (userId) => {\n    const response = {\n      success: true,\n      data: {\n        changedPasswordAfter: (time) => {\n          return false;\n        },\n      },\n    };\n    return response;\n  },\n  decodeToken: async (token) => {\n    return \"1\";\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.authorize(req, res, next);\nexpect(next).to.have.been.calledOnce;",
                  "err": {},
                  "uuid": "5677f094-2d9d-41d5-a936-fbc41c0927f3",
                  "parentUUID": "92b7fbd4-2a06-4e4e-9f1b-e92d593b7c94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test fail",
                  "fullTitle": "Authentication Controller Test authorize  Test second test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  cookies: {},\n  headers: {\n    authorization: {\n      startsWith: (token) => {\n        return false;\n      },\n    },\n  },\n};\nconst UserService = {\n  getUser: async (userId) => {\n    const response = {\n      success: true,\n      data: {\n        changedPasswordAfter: (time) => {\n          return false;\n        },\n      },\n    };\n    return response;\n  },\n  decodeToken: async (token) => {\n    return \"1\";\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.authorize(req, res, next);\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status(401).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Unauthorized\",\n});",
                  "err": {},
                  "uuid": "9c849f97-c975-4dc1-afa8-a8c6d2c24dcc",
                  "parentUUID": "92b7fbd4-2a06-4e4e-9f1b-e92d593b7c94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test fail password change after token created ",
                  "fullTitle": "Authentication Controller Test authorize  Test thrid test fail password change after token created ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  cookies: {\n    jwt: \"token\",\n  },\n};\nconst UserService = {\n  getUser: async (userId) => {\n    const response = {\n      success: true,\n      data: {\n        changedPasswordAfter: (time) => {\n          return true;\n        },\n      },\n    };\n    return response;\n  },\n  decodeToken: async (token) => {\n    return \"1\";\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.authorize(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.deep.calledWith({\n  status: \"fail\",\n  errorMessage: \"Password is changed , Please login again\",\n});",
                  "err": {},
                  "uuid": "4f325f8e-f9d0-4de3-9916-1c69a67e2721",
                  "parentUUID": "92b7fbd4-2a06-4e4e-9f1b-e92d593b7c94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test keeploggedin ",
                  "fullTitle": "Authentication Controller Test authorize  Test fourth test keeploggedin ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  cookies: {\n    jwt: \"token\",\n  },\n};\nconst UserService = {\n  getUser: async (userId) => {\n    const response = {\n      success: true,\n      data: {\n        keepLoggedIn: true,\n        changedPasswordAfter: (time) => {\n          return false;\n        },\n      },\n    };\n    return response;\n  },\n  decodeToken: async (token) => {\n    return \"1\";\n  },\n};\nlet next2 = sinon.spy();\nconst authObj = new auth({ UserService });\nawait authObj.authorize(req, res, next2);\nexpect(next2).to.have.been.calledOnce;",
                  "err": {},
                  "uuid": "1d629edd-eac1-4ef7-986a-cc5afbf86fe9",
                  "parentUUID": "92b7fbd4-2a06-4e4e-9f1b-e92d593b7c94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fifth test success",
                  "fullTitle": "Authentication Controller Test authorize  Test fifth test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  cookies: {},\n  headers: {\n    authorization: {\n      startsWith: (token) => {\n        return true;\n      },\n      split: () => {\n        return [\"Bearer\", \"Token\"];\n      },\n    },\n  },\n};\nconst UserService = {\n  getUser: async (userId) => {\n    const response = {\n      success: true,\n      data: {\n        changedPasswordAfter: (time) => {\n          return false;\n        },\n      },\n    };\n    return response;\n  },\n  decodeToken: async (token) => {\n    return \"1\";\n  },\n};\nlet next3 = sinon.spy();\nconst authObj = new auth({ UserService });\nawait authObj.authorize(req, res, next3);\nexpect(next3).to.have.been.calledOnce;",
                  "err": {},
                  "uuid": "29764f26-5a6e-4d3d-ac2e-c127ed34ad06",
                  "parentUUID": "92b7fbd4-2a06-4e4e-9f1b-e92d593b7c94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sixth test",
                  "fullTitle": "Authentication Controller Test authorize  Test sixth test",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  cookies: {},\n  headers: {\n    authorization: {\n      startsWith: (token) => {\n        return true;\n      },\n      split: () => {\n        return [\"Bearer\", \"Token\"];\n      },\n    },\n  },\n};\nconst UserService = {\n  getUser: async (userId) => {\n    const response = {\n      success: false,\n      data: {\n        changedPasswordAfter: (time) => {\n          return false;\n        },\n      },\n    };\n    return response;\n  },\n  decodeToken: async (token) => {\n    return \"1\";\n  },\n};\nlet next3 = sinon.spy();\nconst authObj = new auth({ UserService });\nawait authObj.authorize(req, res, next3);\nexpect(res.status(404).json).to.deep.calledWith({\n  status: \"fail\",\n  errorMessage: \"User not found\",\n});",
                  "err": {},
                  "uuid": "f332bd5c-d5e5-4164-9c66-631b11e6080f",
                  "parentUUID": "92b7fbd4-2a06-4e4e-9f1b-e92d593b7c94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "seventh test",
                  "fullTitle": "Authentication Controller Test authorize  Test seventh test",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  cookies: {},\n  headers: {\n    authorization: {\n      startsWith: (token) => {\n        return true;\n      },\n      split: () => {\n        return [\"Bearer\", \"Token\"];\n      },\n    },\n  },\n};\nconst UserService = {\n  getUser: async (userId) => {\n    const response = {\n      success: false,\n      data: {\n        changedPasswordAfter: (time) => {\n          return false;\n        },\n      },\n    };\n    return response;\n  },\n  decodeToken: async (token) => {\n    console.log(error);\n    return \"1\";\n  },\n};\nlet next3 = sinon.spy();\nconst authObj = new auth({ UserService });\nawait authObj.authorize(req, res, next3);\nexpect(res.status(401).json).to.deep.calledWith({\n  status: \"fail\",\n  errorMessage: \"Unauthorized\",\n});",
                  "err": {},
                  "uuid": "e501e294-7118-4a29-b924-ddbbe9ce83d1",
                  "parentUUID": "92b7fbd4-2a06-4e4e-9f1b-e92d593b7c94",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5677f094-2d9d-41d5-a936-fbc41c0927f3",
                "9c849f97-c975-4dc1-afa8-a8c6d2c24dcc",
                "4f325f8e-f9d0-4de3-9916-1c69a67e2721",
                "1d629edd-eac1-4ef7-986a-cc5afbf86fe9",
                "29764f26-5a6e-4d3d-ac2e-c127ed34ad06",
                "f332bd5c-d5e5-4164-9c66-631b11e6080f",
                "e501e294-7118-4a29-b924-ddbbe9ce83d1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "17d1d1f7-4834-46a0-98ab-9b1d12202527",
              "title": "changeEmail  Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\authenticationController.js",
              "file": "\\test\\controllers\\authenticationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Authentication Controller Test changeEmail  Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n    email: \"ahmed@gmail.com\",\n  },\n  body: {\n    newEmail: \"ahmed2@gmail.com\",\n    password: \"12345\",\n  },\n};\nconst UserService = {\n  checkPassword: async (password, username) => {\n    return true;\n  },\n  getUserByEmail: async (token) => {\n    const response = {\n      success: false,\n    };\n    return response;\n  },\n  sendVerificationToken: async (token) => {\n    const response = {\n      success: true,\n      test: \"a\",\n    };\n    return response;\n  },\n  updateUserEmail: async (token) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.changeEmail(req, res, next);\nexpect(res.status(204).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "d5c94b57-d004-46ae-b392-e583aebea5a7",
                  "parentUUID": "17d1d1f7-4834-46a0-98ab-9b1d12202527",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test fail",
                  "fullTitle": "Authentication Controller Test changeEmail  Test second test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n    email: \"ahmed@gmail.com\",\n  },\n  body: {\n    newEmail: \"ahmed2@gmail.com\",\n    password: \"12345\",\n  },\n};\nconst UserService = {\n  checkPassword: async (password, username) => {\n    return true;\n  },\n  getUserByEmail: async (token) => {\n    const response = {\n      success: false,\n    };\n    return response;\n  },\n  sendVerificationToken: async (token) => {\n    return {\n      success: false,\n      error: userErrors.EMAIL_ERROR,\n      msg: \"Cannot Send Emails at that moment ,try again later\",\n    };\n  },\n  updateUserEmail: async (token) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.changeEmail(req, res, next);\nexpect(res.status(204).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "c2676053-2bf4-42aa-b086-040c0a4e9210",
                  "parentUUID": "17d1d1f7-4834-46a0-98ab-9b1d12202527",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test fail  ",
                  "fullTitle": "Authentication Controller Test changeEmail  Test thrid test fail  ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n    email: \"ahmed@gmail.com\",\n  },\n  body: {\n    newEmail: \"ahmed2@gmail.com\",\n    password: \"12345\",\n  },\n};\nconst UserService = {\n  checkPassword: async (password, username) => {\n    return true;\n  },\n  getUserByEmail: async (token) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n  sendVerificationToken: async (token) => {\n    const response = {\n      success: false,\n    };\n    return response;\n  },\n  updateUserEmail: async (token) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.changeEmail(req, res, next);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Email is already taken by another user\",\n});",
                  "err": {},
                  "uuid": "7b0ddc1d-823b-47db-ad30-a59a1db6f283",
                  "parentUUID": "17d1d1f7-4834-46a0-98ab-9b1d12202527",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test fail ",
                  "fullTitle": "Authentication Controller Test changeEmail  Test fourth test fail ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n    email: \"ahmed@gmail.com\",\n  },\n  body: {\n    newEmail: \"ahmed2@gmail.com\",\n    password: \"12345\",\n  },\n};\nconst UserService = {\n  checkPassword: async (password, username) => {\n    return false;\n  },\n  getUserByEmail: async (token) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n  sendVerificationToken: async (token) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n  updateUserEmail: async (token) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.changeEmail(req, res, next);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Incorrect password\",\n});",
                  "err": {},
                  "uuid": "c0f731da-9897-473d-8c5b-bd0af09e9cba",
                  "parentUUID": "17d1d1f7-4834-46a0-98ab-9b1d12202527",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fifth test fail ",
                  "fullTitle": "Authentication Controller Test changeEmail  Test fifth test fail ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n    email: \"ahmed@gmail.com\",\n  },\n  body: {\n    newEmail: \"ahmed@gmail.com\",\n    password: \"12345\",\n  },\n};\nconst UserService = {\n  checkPassword: async (password, username) => {\n    return true;\n  },\n  getUserByEmail: async (token) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n  sendVerificationToken: async (token) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n  updateUserEmail: async (token) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.changeEmail(req, res, next);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Insert different email\",\n});",
                  "err": {},
                  "uuid": "92c23a95-394f-4e4e-beb9-0528c0d5c1b8",
                  "parentUUID": "17d1d1f7-4834-46a0-98ab-9b1d12202527",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sixth test fail ",
                  "fullTitle": "Authentication Controller Test changeEmail  Test sixth test fail ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n    email: \"ahmed@gmail.com\",\n  },\n  body: {\n    newEmail: \"ahmed@gmail.com\",\n  },\n};\nconst UserService = {\n  checkPassword: async (password, username) => {\n    return true;\n  },\n  getUserByEmail: async (token) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n  sendVerificationToken: async (token) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n  updateUserEmail: async (token) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.changeEmail(req, res, next);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Provide New Email and password\",\n});",
                  "err": {},
                  "uuid": "699c5e73-8f5e-4fcd-8ef5-a961671270a4",
                  "parentUUID": "17d1d1f7-4834-46a0-98ab-9b1d12202527",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "seventh test fail ",
                  "fullTitle": "Authentication Controller Test changeEmail  Test seventh test fail ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n    email: \"ahmed@gmail.com\",\n  },\n  body: {\n    newEmail: \"ahmed\",\n    password: \"12345\",\n  },\n};\nconst UserService = {\n  checkPassword: async (password, username) => {\n    return true;\n  },\n  getUserByEmail: async (token) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n  sendVerificationToken: async (token) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n  updateUserEmail: async (token) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.changeEmail(req, res, next);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Invaild Email\",\n});",
                  "err": {},
                  "uuid": "3af3d714-43b8-4f38-b110-da9725ba607d",
                  "parentUUID": "17d1d1f7-4834-46a0-98ab-9b1d12202527",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5c94b57-d004-46ae-b392-e583aebea5a7",
                "c2676053-2bf4-42aa-b086-040c0a4e9210",
                "7b0ddc1d-823b-47db-ad30-a59a1db6f283",
                "c0f731da-9897-473d-8c5b-bd0af09e9cba",
                "92c23a95-394f-4e4e-beb9-0528c0d5c1b8",
                "699c5e73-8f5e-4fcd-8ef5-a961671270a4",
                "3af3d714-43b8-4f38-b110-da9725ba607d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "37700637-5ec5-4051-adf3-22337ea6d762",
              "title": "cnangePassword  Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\authenticationController.js",
              "file": "\\test\\controllers\\authenticationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Authentication Controller Test cnangePassword  Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n    email: \"ahmed@gmail.com\",\n  },\n  body: {\n    oldPassword: \"12345\",\n    confirmNewPassword: \"123456\",\n    newPassword: \"123456\",\n    keepLoggedIn: true,\n  },\n};\nconst UserService = {\n  checkPasswordStrength: (password, username) => {\n    return \"strong\";\n  },\n  checkPassword: async (token) => {\n    return true;\n  },\n  changePassword: async (token) => {\n    return \"\";\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.changePassword(req, res, next);\nexpect(res.status).to.have.been.calledWith(200);",
                  "err": {},
                  "uuid": "ed5657eb-3d7f-43f9-8169-850adf324860",
                  "parentUUID": "37700637-5ec5-4051-adf3-22337ea6d762",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test fail",
                  "fullTitle": "Authentication Controller Test cnangePassword  Test second test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n    email: \"ahmed@gmail.com\",\n  },\n  body: {\n    oldPassword: \"12345\",\n    confirmNewPassword: \"123456\",\n    newPassword: \"123456\",\n  },\n};\nconst UserService = {\n  checkPasswordStrength: (password, username) => {\n    return \"strong\";\n  },\n  checkPassword: async (token) => {\n    return false;\n  },\n  changePassword: async (token) => {\n    return \"\";\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.changePassword(req, res, next);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Incorrect Password\",\n  errorType: 3,\n});",
                  "err": {},
                  "uuid": "39342858-17d6-42a2-8d01-ae3ebe200349",
                  "parentUUID": "37700637-5ec5-4051-adf3-22337ea6d762",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test fail  ",
                  "fullTitle": "Authentication Controller Test cnangePassword  Test thrid test fail  ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n    email: \"ahmed@gmail.com\",\n  },\n  body: {\n    oldPassword: \"12345\",\n    confirmNewPassword: \"123456\",\n    newPassword: \"123456\",\n  },\n};\nconst UserService = {\n  checkPasswordStrength: (password, username) => {\n    return \"Weak\";\n  },\n  checkPassword: async (token) => {\n    return false;\n  },\n  changePassword: async (token) => {\n    return \"\";\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.changePassword(req, res, next);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Weak password\",\n  errorType: 2,\n});",
                  "err": {},
                  "uuid": "dd3ef6ab-be71-48c2-8366-de684f4bdc2b",
                  "parentUUID": "37700637-5ec5-4051-adf3-22337ea6d762",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test fail ",
                  "fullTitle": "Authentication Controller Test cnangePassword  Test fourth test fail ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n    email: \"ahmed@gmail.com\",\n  },\n  body: {\n    oldPassword: \"123456\",\n    confirmNewPassword: \"123456\",\n    newPassword: \"123456\",\n  },\n};\nconst UserService = {\n  checkPasswordStrength: (password, username) => {\n    return \"Weak\";\n  },\n  checkPassword: async (token) => {\n    return false;\n  },\n  changePassword: async (token) => {\n    return \"\";\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.changePassword(req, res, next);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Enter New Password not old password\",\n  errorType: 4,\n});",
                  "err": {},
                  "uuid": "4024876b-ed32-425f-a57a-177c61ba8e66",
                  "parentUUID": "37700637-5ec5-4051-adf3-22337ea6d762",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fifth test fail ",
                  "fullTitle": "Authentication Controller Test cnangePassword  Test fifth test fail ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n    email: \"ahmed@gmail.com\",\n  },\n  body: {\n    oldPassword: \"123456\",\n    confirmNewPassword: \"1234556\",\n    newPassword: \"123456\",\n  },\n};\nconst UserService = {\n  checkPasswordStrength: async (password, username) => {\n    return \"weak\";\n  },\n  checkPassword: async (token) => {\n    return false;\n  },\n  changePassword: async (token) => {\n    return \"\";\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.changePassword(req, res, next);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Provide Equal Passwords\",\n  errorType: 1,\n});",
                  "err": {},
                  "uuid": "1f2726d7-e48e-44ed-b80b-76315352daf2",
                  "parentUUID": "37700637-5ec5-4051-adf3-22337ea6d762",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sixth test fail ",
                  "fullTitle": "Authentication Controller Test cnangePassword  Test sixth test fail ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n    email: \"ahmed@gmail.com\",\n  },\n  body: {\n    oldPassword: \"123456\",\n    confirmNewPassword: \"1234556\",\n  },\n};\nconst UserService = {\n  checkPasswordStrength: async (password, username) => {\n    return \"weak\";\n  },\n  checkPassword: async (token) => {\n    return false;\n  },\n  changePassword: async (token) => {\n    return \"\";\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.changePassword(req, res, next);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage:\n    \"Provide old password and new password and confirmed new password \",\n  errorType: 0,\n});",
                  "err": {},
                  "uuid": "e7c791ca-8c88-41b5-bce4-008c3b6a1bdf",
                  "parentUUID": "37700637-5ec5-4051-adf3-22337ea6d762",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "seventh test success",
                  "fullTitle": "Authentication Controller Test cnangePassword  Test seventh test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n    email: \"ahmed@gmail.com\",\n  },\n  body: {\n    oldPassword: \"12345\",\n    confirmNewPassword: \"123456\",\n    newPassword: \"123456\",\n    keepLoggedIn: false,\n  },\n};\nconst UserService = {\n  checkPasswordStrength: (password, username) => {\n    return \"strong\";\n  },\n  checkPassword: async (token) => {\n    return true;\n  },\n  changePassword: async (token) => {\n    return \"\";\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.changePassword(req, res, next);\nexpect(res.status).to.have.been.calledWith(200);",
                  "err": {},
                  "uuid": "a5537127-f6c3-475e-abee-92a855815303",
                  "parentUUID": "37700637-5ec5-4051-adf3-22337ea6d762",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ed5657eb-3d7f-43f9-8169-850adf324860",
                "39342858-17d6-42a2-8d01-ae3ebe200349",
                "dd3ef6ab-be71-48c2-8366-de684f4bdc2b",
                "4024876b-ed32-425f-a57a-177c61ba8e66",
                "1f2726d7-e48e-44ed-b80b-76315352daf2",
                "e7c791ca-8c88-41b5-bce4-008c3b6a1bdf",
                "a5537127-f6c3-475e-abee-92a855815303"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "75a075de-04c3-4c88-b160-a391dbbfb412",
              "title": "Logout Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\authenticationController.js",
              "file": "\\test\\controllers\\authenticationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Authentication Controller Test Logout Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    token: \"\",\n  },\n  body: {\n    email: \"ahmedAgmail.com\",\n  },\n};\nconst UserService = {};\nconst authObj = new auth({ UserService });\nawait authObj.logOut(req, res, \"\");\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "2b434ad4-4606-4873-9cf3-8738a9571d2c",
                  "parentUUID": "75a075de-04c3-4c88-b160-a391dbbfb412",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2b434ad4-4606-4873-9cf3-8738a9571d2c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "298d84af-2634-4e9d-8424-2f8614e3896c",
              "title": "verifyEmail Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\authenticationController.js",
              "file": "\\test\\controllers\\authenticationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Authentication Controller Test verifyEmail Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    token: \"\",\n  },\n  body: {\n    email: \"ahmedAgmail.com\",\n  },\n};\nconst UserService = {\n  verifyEmailToken: async (userName) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.verifyEmail(req, res, \"\");\nexpect(res.status(204).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "fca00648-2e12-4bc0-853e-f0ca9d6757ee",
                  "parentUUID": "298d84af-2634-4e9d-8424-2f8614e3896c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test bad request not provide all body data",
                  "fullTitle": "Authentication Controller Test verifyEmail Test second test bad request not provide all body data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {},\n  params: {\n    token: \"\",\n  },\n};\nconst UserService = {\n  verifyEmailToken: async (password, userName) => {\n    const response = {\n      success: false,\n      token: \"jwt\",\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.verifyEmail(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Token Invalid or Has Expired\",\n});",
                  "err": {},
                  "uuid": "ecb7d6a6-7744-497d-9707-4cc1dd64048a",
                  "parentUUID": "298d84af-2634-4e9d-8424-2f8614e3896c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fca00648-2e12-4bc0-853e-f0ca9d6757ee",
                "ecb7d6a6-7744-497d-9707-4cc1dd64048a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "785d79e8-93db-49d1-88e7-a8c1b3aa26ce",
              "title": "deleteAccount Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\authenticationController.js",
              "file": "\\test\\controllers\\authenticationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Authentication Controller Test deleteAccount Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"ahmed\",\n  },\n  params: {\n    token: \"\",\n  },\n  body: {\n    userName: \"ahmed\",\n    password: \"12345\",\n  },\n};\nconst UserService = {\n  logIn: async (userName, password) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n  deleteAccount: async () => {\n    return true;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.deleteAccount(req, res, \"\");\nexpect(res.status(204).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "8f665556-3824-49d3-9f64-24b712e4608b",
                  "parentUUID": "785d79e8-93db-49d1-88e7-a8c1b3aa26ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test bad request not provide all body data",
                  "fullTitle": "Authentication Controller Test deleteAccount Test second test bad request not provide all body data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"ahmed\",\n  },\n  body: { userName: \"ahmed\" },\n  params: {\n    token: \"\",\n  },\n};\nconst UserService = {\n  logIn: async (password, userName) => {\n    const response = {\n      success: false,\n      token: \"jwt\",\n    };\n    return response;\n  },\n  deleteAccount: async () => {\n    return true;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.deleteAccount(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Provide username and password\",\n});",
                  "err": {},
                  "uuid": "76e16076-2ec0-48ef-951a-51eb48863872",
                  "parentUUID": "785d79e8-93db-49d1-88e7-a8c1b3aa26ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test invalid name  ",
                  "fullTitle": "Authentication Controller Test deleteAccount Test thrid test invalid name  ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"ahmeddddd\",\n  },\n  body: { userName: \"ahmed\", password: \"123\" },\n  params: {\n    token: \"\",\n  },\n};\nconst UserService = {\n  logIn: async (password, userName) => {\n    const response = {\n      success: false,\n      token: \"jwt\",\n    };\n    return response;\n  },\n  deleteAccount: async () => {\n    return true;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.deleteAccount(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Invalid userName\",\n});",
                  "err": {},
                  "uuid": "6bcd1b3c-2de3-4972-8f6a-d810e42087f5",
                  "parentUUID": "785d79e8-93db-49d1-88e7-a8c1b3aa26ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test ",
                  "fullTitle": "Authentication Controller Test deleteAccount Test fourth test ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"ahmed\",\n    password: \"123\",\n  },\n  body: { userName: \"ahmed\", password: \"123\" },\n  params: {\n    token: \"\",\n  },\n};\nconst UserService = {\n  logIn: async (password, userName) => {\n    const response = {\n      success: false,\n      error: userErrors.INCORRECT_PASSWORD,\n      msg: \"Incorrect Password\",\n    };\n    return response;\n  },\n  deleteAccount: async () => {\n    return true;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.deleteAccount(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Incorrect Password\",\n});",
                  "err": {},
                  "uuid": "160a872f-09f3-461f-a276-db8bb79b6647",
                  "parentUUID": "785d79e8-93db-49d1-88e7-a8c1b3aa26ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f665556-3824-49d3-9f64-24b712e4608b",
                "76e16076-2ec0-48ef-951a-51eb48863872",
                "6bcd1b3c-2de3-4972-8f6a-d810e42087f5",
                "160a872f-09f3-461f-a276-db8bb79b6647"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "6fb707ef-e732-47fc-b67f-c9f5732e7a02",
              "title": "checkResetTokentime Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\authenticationController.js",
              "file": "\\test\\controllers\\authenticationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Authentication Controller Test checkResetTokentime Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    token: \"\",\n  },\n  body: {\n    email: \"ahmedAgmail.com\",\n  },\n};\nconst UserService = {\n  checkResetTokenTime: async (userName) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.checkResetTokentime(req, res, \"\");\nexpect(res.status(204).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "afb09a61-efb5-4019-8598-15fc565ec87a",
                  "parentUUID": "6fb707ef-e732-47fc-b67f-c9f5732e7a02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test bad request not provide all body data",
                  "fullTitle": "Authentication Controller Test checkResetTokentime Test second test bad request not provide all body data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {},\n  params: {\n    token: \"\",\n  },\n};\nconst UserService = {\n  checkResetTokenTime: async (password, userName) => {\n    const response = {\n      success: false,\n    };\n    return response;\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.checkResetTokentime(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Token is invalid or has expired\",\n});",
                  "err": {},
                  "uuid": "348c3253-e6d1-43d0-bf12-4593b32125de",
                  "parentUUID": "6fb707ef-e732-47fc-b67f-c9f5732e7a02",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "afb09a61-efb5-4019-8598-15fc565ec87a",
                "348c3253-e6d1-43d0-bf12-4593b32125de"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "b4a48460-027e-4ae5-836d-b00cf379f46a",
              "title": "facebookValidation  Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\authenticationController.js",
              "file": "\\test\\controllers\\authenticationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Authentication Controller Test facebookValidation  Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    user: { _id: \"1\" },\n    email: \"ahmed@gmail.com\",\n    status: \"fail\",\n  },\n  body: {\n    email: \"ahmedAgmail.com\",\n  },\n};\nconst UserService = {\n  generateRandomPassword: (userName) => {\n    return \"Apassword1234*\";\n  },\n  signUp: async (userName) => {\n    const response = {\n      success: true,\n      token: \"token\",\n    };\n    return response;\n  },\n  createToken: () => {\n    return \"token\";\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.facebookValidation(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "0ebfa83c-cb8e-4b0d-b7f2-efd7c2924f41",
                  "parentUUID": "b4a48460-027e-4ae5-836d-b00cf379f46a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test bad request not provide all body data",
                  "fullTitle": "Authentication Controller Test facebookValidation  Test second test bad request not provide all body data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {},\n  user: {\n    status: \"fail\",\n    user: { _id: \"1\" },\n    email: \"ahmed@gmail.com\",\n  },\n};\nconst UserService = {\n  signUp: async (password, userName) => {\n    const response = {\n      success: false,\n      error: userErrors.USER_ALREADY_EXISTS,\n      msg: \"User Already Exists\",\n    };\n    return response;\n  },\n  generateRandomPassword: (userName) => {\n    return \"Apassword1234*\";\n  },\n  createToken: () => {\n    return \"token\";\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.facebookValidation(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"User Already Exists\",\n});",
                  "err": {},
                  "uuid": "f1e07d76-0c5b-43f8-9fb9-a7933eb932c2",
                  "parentUUID": "b4a48460-027e-4ae5-836d-b00cf379f46a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test ",
                  "fullTitle": "Authentication Controller Test facebookValidation  Test thrid test ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {},\n  user: {\n    status: \"success\",\n    user: { _id: \"1\" },\n    email: \"ahmed@gmail.com\",\n  },\n};\nconst UserService = {\n  signUp: async (password, userName) => {\n    const response = {\n      success: false,\n      error: userErrors.USER_ALREADY_EXISTS,\n      msg: \"\",\n    };\n    return response;\n  },\n  generateRandomPassword: (userName) => {\n    return \"password\";\n  },\n  createToken: () => {\n    return \"token\";\n  },\n};\nconst authObj = new auth({ UserService });\nawait authObj.facebookValidation(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);",
                  "err": {},
                  "uuid": "64d05759-4208-4c42-8ff1-0d1e0f2d4a23",
                  "parentUUID": "b4a48460-027e-4ae5-836d-b00cf379f46a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ebfa83c-cb8e-4b0d-b7f2-efd7c2924f41",
                "f1e07d76-0c5b-43f8-9fb9-a7933eb932c2",
                "64d05759-4208-4c42-8ff1-0d1e0f2d4a23"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "974b9ff0-9d98-46e5-8cb8-494ec8946d70",
              "title": "facebookAuth Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\authenticationController.js",
              "file": "\\test\\controllers\\authenticationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Authentication Controller Test facebookAuth Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const profile = {\n  emails: [\n    {\n      value: \"ahmed\",\n    },\n  ],\n  body: {\n    email: \"ahmedAgmail.com\",\n  },\n};\nconst UserService = {\n  getUserByEmail: async (userName) => {\n    const response = {\n      success: true,\n      data: \"data\",\n    };\n    return response;\n  },\n};\nlet done = sinon.spy();\nconst authObj = new auth({ UserService });\nawait authObj.facebookAuth(\"\", \"\", profile, done);\nexpect(done).to.have.been.calledWith(null, {\n  status: \"success\",\n  user: \"data\",\n});",
                  "err": {},
                  "uuid": "b09e857b-24bb-47a3-8acc-05ee8ac35124",
                  "parentUUID": "974b9ff0-9d98-46e5-8cb8-494ec8946d70",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test bad request not provide all body data",
                  "fullTitle": "Authentication Controller Test facebookAuth Test second test bad request not provide all body data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const profile = {\n  body: {},\n  emails: [\n    {\n      value: \"ahmed\",\n    },\n  ],\n};\nconst UserService = {\n  getUserByEmail: async (password, userName) => {\n    const response = {\n      success: false,\n      token: \"jwt\",\n    };\n    return response;\n  },\n};\nlet done2 = sinon.spy();\nconst authObj = new auth({ UserService });\nawait authObj.facebookAuth(\"\", \"\", profile, done2);\nexpect(done2).to.have.been.calledWith(null, {\n  status: \"fail\",\n  email: \"ahmed\",\n});",
                  "err": {},
                  "uuid": "ab3e8d4f-ff45-4607-9d54-ec35d92561e0",
                  "parentUUID": "974b9ff0-9d98-46e5-8cb8-494ec8946d70",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b09e857b-24bb-47a3-8acc-05ee8ac35124",
                "ab3e8d4f-ff45-4607-9d54-ec35d92561e0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "ebc43d72-4f2c-4058-bf42-bcd8a2951f05",
              "title": "errorResponse Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\authenticationController.js",
              "file": "\\test\\controllers\\authenticationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Authentication Controller Test errorResponse Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserService = {};\nconst authObj = new auth({ UserService });\nlet response = await authObj.errorResponse(userErrors.MONGO_ERR, \"Error\");\nexpect(response.msg).to.be.equal(\"Invalid parent, couldn't create user\");\nexpect(response.stat).to.be.equal(400);\nresponse = await authObj.errorResponse(userErrors.INVALID_TOKEN, \"Error\");\nexpect(response.msg).to.be.equal(\"Error\");\nexpect(response.stat).to.be.equal(400);",
                  "err": {},
                  "uuid": "a4cca3ee-f102-4bf1-a2e7-3ae887d2d55b",
                  "parentUUID": "ebc43d72-4f2c-4058-bf42-bcd8a2951f05",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4cca3ee-f102-4bf1-a2e7-3ae887d2d55b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "d076a45d-6911-4737-b962-04c2fe4a5afc",
              "title": "checkAuthorize  Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\authenticationController.js",
              "file": "\\test\\controllers\\authenticationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Authentication Controller Test checkAuthorize  Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  cookies: {\n    jwt: \"token\",\n  },\n};\nconst UserService = {\n  getUser: async (userId) => {\n    const response = {\n      success: true,\n      data: {\n        changedPasswordAfter: (time) => {\n          return false;\n        },\n      },\n    };\n    return response;\n  },\n  decodeToken: async (token) => {\n    return \"1\";\n  },\n};\nlet next_check1 = sinon.spy();\nconst authObj = new auth({ UserService });\nawait authObj.checkAuthorize(req, res, next_check1);\nexpect(next_check1).to.have.been.calledOnce;",
                  "err": {},
                  "uuid": "fea91484-88a6-4a3c-b1cf-812485f7fad0",
                  "parentUUID": "d076a45d-6911-4737-b962-04c2fe4a5afc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test fail",
                  "fullTitle": "Authentication Controller Test checkAuthorize  Test second test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  cookies: {},\n  headers: {\n    authorization: {\n      startsWith: (token) => {\n        return false;\n      },\n    },\n  },\n};\nconst UserService = {\n  getUser: async (userId) => {\n    const response = {\n      success: true,\n      data: {\n        changedPasswordAfter: (time) => {\n          return false;\n        },\n      },\n    };\n    return response;\n  },\n  decodeToken: async (token) => {\n    return \"1\";\n  },\n};\nlet next_check2 = sinon.spy();\nconst authObj = new auth({ UserService });\nawait authObj.checkAuthorize(req, res, next_check2);\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status(401).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Unauthorized\",\n});",
                  "err": {},
                  "uuid": "06f7e449-780b-4a0e-bd88-1ba4f204d027",
                  "parentUUID": "d076a45d-6911-4737-b962-04c2fe4a5afc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test fail password change after token created ",
                  "fullTitle": "Authentication Controller Test checkAuthorize  Test thrid test fail password change after token created ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  cookies: {\n    jwt: \"token\",\n  },\n};\nconst UserService = {\n  getUser: async (userId) => {\n    const response = {\n      success: true,\n      data: {\n        changedPasswordAfter: (time) => {\n          return true;\n        },\n      },\n    };\n    return response;\n  },\n  decodeToken: async (token) => {\n    return \"1\";\n  },\n};\nlet next_check3 = sinon.spy();\nconst authObj = new auth({ UserService });\nawait authObj.checkAuthorize(req, res, next_check3);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.deep.calledWith({\n  status: \"fail\",\n  errorMessage: \"Password is changed , Please login again\",\n});",
                  "err": {},
                  "uuid": "698bdad8-8658-4d62-becb-e34790115f24",
                  "parentUUID": "d076a45d-6911-4737-b962-04c2fe4a5afc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test keeploggedin ",
                  "fullTitle": "Authentication Controller Test checkAuthorize  Test fourth test keeploggedin ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  cookies: {\n    jwt: \"token\",\n  },\n};\nconst UserService = {\n  getUser: async (userId) => {\n    const response = {\n      success: true,\n      data: {\n        keepLoggedIn: true,\n        changedPasswordAfter: (time) => {\n          return false;\n        },\n      },\n    };\n    return response;\n  },\n  decodeToken: async (token) => {\n    return \"1\";\n  },\n};\nlet next_check4 = sinon.spy();\nconst authObj = new auth({ UserService });\nawait authObj.checkAuthorize(req, res, next_check4);\nexpect(next_check4).to.have.been.calledOnce;",
                  "err": {},
                  "uuid": "f997a3c9-3d49-455e-8c70-08818b0eec45",
                  "parentUUID": "d076a45d-6911-4737-b962-04c2fe4a5afc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fifth test success",
                  "fullTitle": "Authentication Controller Test checkAuthorize  Test fifth test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  cookies: {},\n  headers: {\n    authorization: {\n      startsWith: (token) => {\n        return true;\n      },\n      split: () => {\n        return [\"Bearer\", \"Token\"];\n      },\n    },\n  },\n};\nconst UserService = {\n  getUser: async (userId) => {\n    const response = {\n      success: true,\n      data: {\n        changedPasswordAfter: (time) => {\n          return false;\n        },\n      },\n    };\n    return response;\n  },\n  decodeToken: async (token) => {\n    return \"1\";\n  },\n};\nlet next_check5 = sinon.spy();\nconst authObj = new auth({ UserService });\nawait authObj.checkAuthorize(req, res, next_check5);\nexpect(next_check5).to.have.been.calledOnce;",
                  "err": {},
                  "uuid": "bc9e59b0-845c-4fb5-bdac-02c9823cc661",
                  "parentUUID": "d076a45d-6911-4737-b962-04c2fe4a5afc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sixth test",
                  "fullTitle": "Authentication Controller Test checkAuthorize  Test sixth test",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  cookies: {},\n  headers: {\n    authorization: {\n      startsWith: (token) => {\n        return true;\n      },\n      split: () => {\n        return [\"Bearer\", \"Token\"];\n      },\n    },\n  },\n};\nconst UserService = {\n  getUser: async (userId) => {\n    const response = {\n      success: false,\n      data: {\n        changedPasswordAfter: (time) => {\n          return false;\n        },\n      },\n    };\n    return response;\n  },\n  decodeToken: async (token) => {\n    return \"1\";\n  },\n};\nlet next_check6 = sinon.spy();\nconst authObj = new auth({ UserService });\nawait authObj.checkAuthorize(req, res, next_check6);\nexpect(res.status(404).json).to.deep.calledWith({\n  status: \"fail\",\n  errorMessage: \"User not found\",\n});",
                  "err": {},
                  "uuid": "d3dddc13-25af-4ee0-8acb-9894a208ea6a",
                  "parentUUID": "d076a45d-6911-4737-b962-04c2fe4a5afc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fea91484-88a6-4a3c-b1cf-812485f7fad0",
                "06f7e449-780b-4a0e-bd88-1ba4f204d027",
                "698bdad8-8658-4d62-becb-e34790115f24",
                "f997a3c9-3d49-455e-8c70-08818b0eec45",
                "bc9e59b0-845c-4fb5-bdac-02c9823cc661",
                "d3dddc13-25af-4ee0-8acb-9894a208ea6a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "31efc10a-828f-46f0-8470-b1facecdb310",
              "title": "google  Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\authenticationController.js",
              "file": "\\test\\controllers\\authenticationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Authentication Controller Test google  Test first test success",
                  "timedOut": false,
                  "duration": 197,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    tokenId: \"token\",\n  },\n};\nconst UserService = {\n  getUser: async (userId) => {\n    const response = {\n      success: true,\n      data: {\n        changedPasswordAfter: (time) => {\n          return false;\n        },\n      },\n    };\n    return response;\n  },\n  decodeToken: async (token) => {\n    return \"1\";\n  },\n};\nlet next_check1 = sinon.spy();\nconst authObj = new auth({ UserService });\nawait authObj.googleAuth(req, res, next_check1);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"provide valid token\",\n});",
                  "err": {},
                  "uuid": "b7edd005-f62a-4061-a0d5-2863386c019d",
                  "parentUUID": "31efc10a-828f-46f0-8470-b1facecdb310",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test success",
                  "fullTitle": "Authentication Controller Test google  Test second test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n  },\n};\nconst UserService = {\n  getUser: async (userId) => {\n    const response = {\n      success: true,\n      data: {\n        changedPasswordAfter: (time) => {\n          return false;\n        },\n      },\n    };\n    return response;\n  },\n  decodeToken: async (token) => {\n    return \"1\";\n  },\n};\nlet next_check1 = sinon.spy();\nconst authObj = new auth({ UserService });\nawait authObj.googleAuth(req, res, next_check1);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"provide token\",\n});",
                  "err": {},
                  "uuid": "db33a555-443a-416f-9296-4368dc706d81",
                  "parentUUID": "31efc10a-828f-46f0-8470-b1facecdb310",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b7edd005-f62a-4061-a0d5-2863386c019d",
                "db33a555-443a-416f-9296-4368dc706d81"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 198,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "abacba5b-a1f7-480e-8ca9-3f868f861814",
          "title": "Comment Controller CRUD operations",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\commentController.js",
          "file": "\\test\\controllers\\commentController.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a988c18b-c514-4bef-9911-fa1d2e050250",
              "title": "Create comment test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\commentController.js",
              "file": "\\test\\controllers\\commentController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "successful creation",
                  "fullTitle": "Comment Controller CRUD operations Create comment test successful creation",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await commentController.createComment(req, res, () => {\n  return true;\n});\nexpect(res.status).to.have.been.calledWith(201);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"success\",\n  data: {\n    author: \"123e4aab2a94c22ae492983a\",\n    parent: \"637769a739070007b3bf4de1\",\n    parentType: \"Comment\",\n    text: \"comment text\",\n  },\n});",
                  "err": {},
                  "uuid": "34fb030f-03ea-4360-8ce6-26a99c5b062e",
                  "parentUUID": "a988c18b-c514-4bef-9911-fa1d2e050250",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid parent",
                  "fullTitle": "Comment Controller CRUD operations Create comment test Invalid parent",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "CommentService.createComment = async (data) => {\n  return { success: false, error: commentErrors.INVALID_PARENT };\n};\nawait commentController.createComment(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Invalid parent, couldn't create comment\",\n});",
                  "err": {},
                  "uuid": "fe8d1e4d-c9bd-45c5-9489-5334c1479186",
                  "parentUUID": "a988c18b-c514-4bef-9911-fa1d2e050250",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "parent locked",
                  "fullTitle": "Comment Controller CRUD operations Create comment test parent locked",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "CommentService.createComment = async (data) => {\n  return { success: false, error: commentErrors.PARANT_LOCKED };\n};\nawait commentController.createComment(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(409);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Parent is locked, comments are not allowed\"\n});",
                  "err": {},
                  "uuid": "80f48db4-b409-41a0-891e-2168af30b0d3",
                  "parentUUID": "a988c18b-c514-4bef-9911-fa1d2e050250",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "mongo error",
                  "fullTitle": "Comment Controller CRUD operations Create comment test mongo error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "CommentService.createComment = async (data) => {\n  return {\n    success: false,\n    error: commentErrors.MONGO_ERR,\n    msg: \"message\",\n  };\n};\nawait commentController.createComment(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"message\",\n});",
                  "err": {},
                  "uuid": "168b05da-d76f-4c65-96c1-aa5f1dcfeb5e",
                  "parentUUID": "a988c18b-c514-4bef-9911-fa1d2e050250",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid request",
                  "fullTitle": "Comment Controller CRUD operations Create comment test Invalid request",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "delete req.body.parent;\nawait commentController.createComment(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Missing required parameter\",\n});",
                  "err": {},
                  "uuid": "5178371d-1ce3-4937-9ca4-aed6e128da88",
                  "parentUUID": "a988c18b-c514-4bef-9911-fa1d2e050250",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "34fb030f-03ea-4360-8ce6-26a99c5b062e",
                "fe8d1e4d-c9bd-45c5-9489-5334c1479186",
                "80f48db4-b409-41a0-891e-2168af30b0d3",
                "168b05da-d76f-4c65-96c1-aa5f1dcfeb5e",
                "5178371d-1ce3-4937-9ca4-aed6e128da88"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "74aaca89-c538-4d93-a533-76e25c44ddf1",
              "title": "Update comment test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\commentController.js",
              "file": "\\test\\controllers\\commentController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "successful update",
                  "fullTitle": "Comment Controller CRUD operations Update comment test successful update",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await commentController.updateComment(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"success\",\n  data: {\n    text: \"this is a comment\",\n  },\n});",
                  "err": {},
                  "uuid": "21461e93-cd73-496f-a778-139789865ba5",
                  "parentUUID": "74aaca89-c538-4d93-a533-76e25c44ddf1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "User must be author",
                  "fullTitle": "Comment Controller CRUD operations Update comment test User must be author",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "CommentService.updateComment = async (data) => {\n  return { success: false, error: commentErrors.NOT_AUTHOR };\n};\nawait commentController.updateComment(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"User must be author\",\n});",
                  "err": {},
                  "uuid": "d6df7f06-7f7e-4cd7-b809-b586b88eafaf",
                  "parentUUID": "74aaca89-c538-4d93-a533-76e25c44ddf1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Comment not found",
                  "fullTitle": "Comment Controller CRUD operations Update comment test Comment not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "CommentService.updateComment = async (data) => {\n  return { success: false, error: commentErrors.COMMENT_NOT_FOUND };\n};\nawait commentController.updateComment(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Comment not found\",\n});",
                  "err": {},
                  "uuid": "2cb43f23-98e1-4502-acb1-d4984193e1ba",
                  "parentUUID": "74aaca89-c538-4d93-a533-76e25c44ddf1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "mongo error",
                  "fullTitle": "Comment Controller CRUD operations Update comment test mongo error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "CommentService.updateComment = async (data) => {\n  return {\n    success: false,\n    error: commentErrors.MONGO_ERR,\n    msg: \"message\",\n  };\n};\nawait commentController.updateComment(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"message\",\n});",
                  "err": {},
                  "uuid": "2c9d9b99-e560-430f-97f0-210bac2ceb8b",
                  "parentUUID": "74aaca89-c538-4d93-a533-76e25c44ddf1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid request",
                  "fullTitle": "Comment Controller CRUD operations Update comment test Invalid request",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "delete req.params;\nawait commentController.updateComment(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Invalid request\",\n});",
                  "err": {},
                  "uuid": "c8838c0b-3762-4c7b-8142-e98d37dd217c",
                  "parentUUID": "74aaca89-c538-4d93-a533-76e25c44ddf1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "21461e93-cd73-496f-a778-139789865ba5",
                "d6df7f06-7f7e-4cd7-b809-b586b88eafaf",
                "2cb43f23-98e1-4502-acb1-d4984193e1ba",
                "2c9d9b99-e560-430f-97f0-210bac2ceb8b",
                "c8838c0b-3762-4c7b-8142-e98d37dd217c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "62a2f20e-6b13-4ff3-8508-8ae85b11742f",
              "title": "Delete comment test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\commentController.js",
              "file": "\\test\\controllers\\commentController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "successful delete",
                  "fullTitle": "Comment Controller CRUD operations Delete comment test successful delete",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await commentController.deleteComment(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(204);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"success\",\n  data: null,\n});",
                  "err": {},
                  "uuid": "4f63e87f-bb1a-422d-baa0-b7bad9fa933e",
                  "parentUUID": "62a2f20e-6b13-4ff3-8508-8ae85b11742f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "User must be author",
                  "fullTitle": "Comment Controller CRUD operations Delete comment test User must be author",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "CommentService.deleteComment = async () => {\n  return { success: false, error: commentErrors.NOT_AUTHOR };\n};\nawait commentController.deleteComment(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"User must be author\",\n});",
                  "err": {},
                  "uuid": "a3310a95-ba18-4f7f-ac73-27d8b9536e56",
                  "parentUUID": "62a2f20e-6b13-4ff3-8508-8ae85b11742f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Comment not found",
                  "fullTitle": "Comment Controller CRUD operations Delete comment test Comment not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "CommentService.deleteComment = async () => {\n  return { success: false, error: commentErrors.COMMENT_NOT_FOUND };\n};\nawait commentController.deleteComment(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Comment not found\",\n});",
                  "err": {},
                  "uuid": "1c417263-16e6-4e25-ad42-364d86f059a2",
                  "parentUUID": "62a2f20e-6b13-4ff3-8508-8ae85b11742f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid request",
                  "fullTitle": "Comment Controller CRUD operations Delete comment test Invalid request",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "delete req.params.commentId;\nawait commentController.deleteComment(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Missing required parameter commentId\",\n});",
                  "err": {},
                  "uuid": "5d2c7d8d-9c40-4dd4-9703-ced097e0ab21",
                  "parentUUID": "62a2f20e-6b13-4ff3-8508-8ae85b11742f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4f63e87f-bb1a-422d-baa0-b7bad9fa933e",
                "a3310a95-ba18-4f7f-ac73-27d8b9536e56",
                "1c417263-16e6-4e25-ad42-364d86f059a2",
                "5d2c7d8d-9c40-4dd4-9703-ced097e0ab21"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "7b761cd9-3df2-4bf1-af3e-ce30e955462e",
              "title": "Comment tree test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\commentController.js",
              "file": "\\test\\controllers\\commentController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "comment tree",
                  "fullTitle": "Comment Controller CRUD operations Comment tree test comment tree",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await commentController.commentTree(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"success\",\n  comments: [],\n});",
                  "err": {},
                  "uuid": "871d2a05-3117-4c5f-98fe-41d3f0ad43ab",
                  "parentUUID": "7b761cd9-3df2-4bf1-af3e-ce30e955462e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "default parameters",
                  "fullTitle": "Comment Controller CRUD operations Comment tree test default parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "delete req.query.limit;\ndelete req.query.depth;\ndelete req.query.sort;\nawait commentController.commentTree(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"success\",\n  comments: [],\n});",
                  "err": {},
                  "uuid": "ce6b4b5f-6de9-4a62-950f-8a3930bda6f2",
                  "parentUUID": "7b761cd9-3df2-4bf1-af3e-ce30e955462e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "post not found",
                  "fullTitle": "Comment Controller CRUD operations Comment tree test post not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "CommentService.commentTree = () => {\n  return { success: false, error: commentErrors.POST_NOT_FOUND };\n};\nawait commentController.commentTree(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Post not found\",\n});",
                  "err": {},
                  "uuid": "9cfa0e4a-76fe-4974-9ea4-ee99bdc4d976",
                  "parentUUID": "7b761cd9-3df2-4bf1-af3e-ce30e955462e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "comment not found",
                  "fullTitle": "Comment Controller CRUD operations Comment tree test comment not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "CommentService.commentTree = () => {\n  return { success: false, error: commentErrors.COMMENT_NOT_FOUND };\n};\nawait commentController.commentTree(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Comment not found\",\n});",
                  "err": {},
                  "uuid": "e34b2f12-ca10-4a5b-a727-447b5c8afccd",
                  "parentUUID": "7b761cd9-3df2-4bf1-af3e-ce30e955462e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "comment not child",
                  "fullTitle": "Comment Controller CRUD operations Comment tree test comment not child",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "CommentService.commentTree = () => {\n  return { success: false, error: commentErrors.COMMENT_NOT_CHILD };\n};\nawait commentController.commentTree(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Comment is not a child of post\",\n});",
                  "err": {},
                  "uuid": "1bed344d-18af-42df-b8f8-fdb7f6182d7d",
                  "parentUUID": "7b761cd9-3df2-4bf1-af3e-ce30e955462e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid request",
                  "fullTitle": "Comment Controller CRUD operations Comment tree test Invalid request",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "delete req.params;\nawait commentController.commentTree(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Invalid request\",\n})",
                  "err": {},
                  "uuid": "df9fda4e-b1cc-4353-a3b0-98fa9b49a6bc",
                  "parentUUID": "7b761cd9-3df2-4bf1-af3e-ce30e955462e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "871d2a05-3117-4c5f-98fe-41d3f0ad43ab",
                "ce6b4b5f-6de9-4a62-950f-8a3930bda6f2",
                "9cfa0e4a-76fe-4974-9ea4-ee99bdc4d976",
                "e34b2f12-ca10-4a5b-a727-447b5c8afccd",
                "1bed344d-18af-42df-b8f8-fdb7f6182d7d",
                "df9fda4e-b1cc-4353-a3b0-98fa9b49a6bc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "339acc9d-f560-48ec-ae4f-84c4aa16e747",
              "title": "commentVote Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\commentController.js",
              "file": "\\test\\controllers\\commentController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Comment Controller CRUD operations commentVote Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst CommentService = {\n  findCommentById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  addVote: (me, posts) => {\n    return true;\n  },\n};\nconst commentController = new CommentController({\n  CommentService,\n  UserService,\n});\nawait commentController.commentVote(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "dff46563-b627-48e9-bee6-8596f86e160f",
                  "parentUUID": "339acc9d-f560-48ec-ae4f-84c4aa16e747",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test success",
                  "fullTitle": "Comment Controller CRUD operations commentVote Test second test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst CommentService = {\n  findCommentById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  addVote: (me, posts) => {\n    return false;\n  },\n};\nconst commentController = new CommentController({\n  CommentService,\n  UserService,\n});\nawait commentController.commentVote(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(304).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "9995cb91-e9b7-46b4-98f2-e386de602006",
                  "parentUUID": "339acc9d-f560-48ec-ae4f-84c4aa16e747",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test success",
                  "fullTitle": "Comment Controller CRUD operations commentVote Test thrid test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return true;\n  },\n};\nconst CommentService = {\n  findCommentById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  addVote: (me, posts) => {\n    return true;\n  },\n};\nconst commentController = new CommentController({\n  CommentService,\n  UserService,\n});\nawait commentController.commentVote(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(405);\nexpect(res.status(405).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Method Not Allowed\",\n});",
                  "err": {},
                  "uuid": "1daa3e1b-3663-4f83-bcaa-495a5dd64269",
                  "parentUUID": "339acc9d-f560-48ec-ae4f-84c4aa16e747",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test success",
                  "fullTitle": "Comment Controller CRUD operations commentVote Test fourth test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst CommentService = {\n  findCommentById: async (postId) => {\n    let response = {\n      success: false,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  addVote: (me, posts) => {\n    return true;\n  },\n};\nconst commentController = new CommentController({\n  CommentService,\n  UserService,\n});\nawait commentController.commentVote(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Comment Not Found\",\n});",
                  "err": {},
                  "uuid": "f77cb745-ec59-40ac-86a9-e04e129b2a15",
                  "parentUUID": "339acc9d-f560-48ec-ae4f-84c4aa16e747",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fifth test success",
                  "fullTitle": "Comment Controller CRUD operations commentVote Test fifth test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 2,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst CommentService = {\n  findCommentById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  addVote: (me, posts) => {\n    return true;\n  },\n};\nconst commentController = new CommentController({\n  CommentService,\n  UserService,\n});\nawait commentController.commentVote(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Enter Valid Vote dir\",\n});",
                  "err": {},
                  "uuid": "c00fe29a-527e-43eb-9af6-ea04f941d04b",
                  "parentUUID": "339acc9d-f560-48ec-ae4f-84c4aa16e747",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dff46563-b627-48e9-bee6-8596f86e160f",
                "9995cb91-e9b7-46b4-98f2-e386de602006",
                "1daa3e1b-3663-4f83-bcaa-495a5dd64269",
                "f77cb745-ec59-40ac-86a9-e04e129b2a15",
                "c00fe29a-527e-43eb-9af6-ea04f941d04b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "84adfcbb-ebe6-449a-8c71-e8aa91f9ead0",
              "title": "More children test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\commentController.js",
              "file": "\\test\\controllers\\commentController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "more children",
                  "fullTitle": "Comment Controller CRUD operations More children test more children",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await commentController.moreChildren(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"success\",\n  comments: [\n    { _id: \"123c4aab2a94c22ae492983a\" },\n    { _id: \"123c4aab2a94c22ae492983a\" },\n  ],\n});",
                  "err": {},
                  "uuid": "29e5f900-edc6-47b7-bd91-379a2773060d",
                  "parentUUID": "84adfcbb-ebe6-449a-8c71-e8aa91f9ead0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "no children found",
                  "fullTitle": "Comment Controller CRUD operations More children test no children found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "CommentService.moreChildren = async () => [];\nawait commentController.moreChildren(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Comments not found\",\n});",
                  "err": {},
                  "uuid": "08addda3-1042-4ed9-b1b9-4da592ab3ad3",
                  "parentUUID": "84adfcbb-ebe6-449a-8c71-e8aa91f9ead0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "default parameters",
                  "fullTitle": "Comment Controller CRUD operations More children test default parameters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "delete req.query.limit;\ndelete req.query.depth;\ndelete req.query.sort;\nawait commentController.moreChildren(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"success\",\n  comments: [],\n});",
                  "err": {},
                  "uuid": "33e73e28-04b9-4e56-b1a1-5907b3689bcc",
                  "parentUUID": "84adfcbb-ebe6-449a-8c71-e8aa91f9ead0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "children are missing",
                  "fullTitle": "Comment Controller CRUD operations More children test children are missing",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "delete req.query.children;\nawait commentController.moreChildren(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Children query parameter is required\",\n});",
                  "err": {},
                  "uuid": "00e87be2-3eb2-4ea3-8167-e362bcc18d17",
                  "parentUUID": "84adfcbb-ebe6-449a-8c71-e8aa91f9ead0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "29e5f900-edc6-47b7-bd91-379a2773060d",
                "08addda3-1042-4ed9-b1b9-4da592ab3ad3",
                "33e73e28-04b9-4e56-b1a1-5907b3689bcc",
                "00e87be2-3eb2-4ea3-8167-e362bcc18d17"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "d0d47fa7-fda3-4019-8aae-e5ceab84dbac",
              "title": "Must be moderator test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\commentController.js",
              "file": "\\test\\controllers\\commentController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "moderator",
                  "fullTitle": "Comment Controller CRUD operations Must be moderator test moderator",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await commentController.mustBeMod(req, res, next);\nexpect(res.status).to.have.been.calledWith(200);\n//expect(res.status().json).to.have.been.calledWith({});",
                  "err": {},
                  "uuid": "e4e9192e-a58a-4482-a14f-8b53c81134a4",
                  "parentUUID": "d0d47fa7-fda3-4019-8aae-e5ceab84dbac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "not moderator",
                  "fullTitle": "Comment Controller CRUD operations Must be moderator test not moderator",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "CommentService.isMod = () => {\n  return { success: false, error: commentErrors.NOT_MOD };\n};\nawait commentController.mustBeMod(req, res, next);\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"User must be moderator\",\n});",
                  "err": {},
                  "uuid": "965756ca-b28e-43d6-a838-26835e190b30",
                  "parentUUID": "d0d47fa7-fda3-4019-8aae-e5ceab84dbac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "not subreddit",
                  "fullTitle": "Comment Controller CRUD operations Must be moderator test not subreddit",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "CommentService.isMod = () => {\n  return { success: false, error: commentErrors.OWNER_NOT_SUBREDDIT };\n};\nawait commentController.mustBeMod(req, res, next);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"The comment must belong to a subreddit\",\n});",
                  "err": {},
                  "uuid": "4194fca0-be8e-4173-9571-bb8fd2c563ec",
                  "parentUUID": "d0d47fa7-fda3-4019-8aae-e5ceab84dbac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "comment not found",
                  "fullTitle": "Comment Controller CRUD operations Must be moderator test comment not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "CommentService.isMod = () => {\n  return { success: false, error: commentErrors.COMMENT_NOT_FOUND };\n};\nawait commentController.mustBeMod(req, res, next);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Comment not found\",\n});",
                  "err": {},
                  "uuid": "a31fcc36-5317-4336-9c8c-66a0eae537e5",
                  "parentUUID": "d0d47fa7-fda3-4019-8aae-e5ceab84dbac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid request",
                  "fullTitle": "Comment Controller CRUD operations Must be moderator test Invalid request",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "delete req.params;\nawait commentController.mustBeMod(req, res, next);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Invalid request\",\n});",
                  "err": {},
                  "uuid": "ba1ade60-8f3e-41da-900b-91f9d44c671f",
                  "parentUUID": "d0d47fa7-fda3-4019-8aae-e5ceab84dbac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4e9192e-a58a-4482-a14f-8b53c81134a4",
                "965756ca-b28e-43d6-a838-26835e190b30",
                "4194fca0-be8e-4173-9571-bb8fd2c563ec",
                "a31fcc36-5317-4336-9c8c-66a0eae537e5",
                "ba1ade60-8f3e-41da-900b-91f9d44c671f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "299b5db2-239f-4cbe-9ffa-cf222c41adb4",
              "title": "Moderate comment test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\commentController.js",
              "file": "\\test\\controllers\\commentController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "successful action",
                  "fullTitle": "Comment Controller CRUD operations Moderate comment test successful action",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await commentController.moderateComment(req, res, next);\nexpect(res.status).to.have.been.calledWith(204);\nexpect(res.status().json).to.have.been.calledWith({});",
                  "err": {},
                  "uuid": "918eba83-2909-4d3e-b6c0-473388593693",
                  "parentUUID": "299b5db2-239f-4cbe-9ffa-cf222c41adb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "action arleady done",
                  "fullTitle": "Comment Controller CRUD operations Moderate comment test action arleady done",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "CommentService.modAction = () => false\nawait commentController.moderateComment(req, res, next);\nexpect(res.status).to.have.been.calledWith(409);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Action is already performed\",\n});",
                  "err": {},
                  "uuid": "74fead95-483f-4add-8222-04e1249d0e33",
                  "parentUUID": "299b5db2-239f-4cbe-9ffa-cf222c41adb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid request",
                  "fullTitle": "Comment Controller CRUD operations Moderate comment test Invalid request",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.action = \"not a valid action\"\nawait commentController.moderateComment(req, res, next);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Invalid comment moderation action\",\n});",
                  "err": {},
                  "uuid": "34844a47-5464-4319-a2e5-0ef57797a9d9",
                  "parentUUID": "299b5db2-239f-4cbe-9ffa-cf222c41adb4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "918eba83-2909-4d3e-b6c0-473388593693",
                "74fead95-483f-4add-8222-04e1249d0e33",
                "34844a47-5464-4319-a2e5-0ef57797a9d9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "82c97478-0562-46e9-9005-dd84aa3c268d",
              "title": "saveComment Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\commentController.js",
              "file": "\\test\\controllers\\commentController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Comment Controller CRUD operations saveComment Test first test success",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst CommentService = {\n  findCommentById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  saveComment: (me, posts) => {\n    return true;\n  },\n};\nconst commentController = new CommentController({\n  CommentService,\n  UserService,\n});\nawait commentController.saveComment(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "9deab33e-eead-40a5-ad02-a0fefe0d1d2f",
                  "parentUUID": "82c97478-0562-46e9-9005-dd84aa3c268d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test success",
                  "fullTitle": "Comment Controller CRUD operations saveComment Test second test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst CommentService = {\n  findCommentById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  saveComment: (me, posts) => {\n    return false;\n  },\n};\nconst commentController = new CommentController({\n  CommentService,\n  UserService,\n});\nawait commentController.saveComment(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(304).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "17064846-fe18-4217-8399-a4852dc98347",
                  "parentUUID": "82c97478-0562-46e9-9005-dd84aa3c268d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test success",
                  "fullTitle": "Comment Controller CRUD operations saveComment Test thrid test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return true;\n  },\n};\nconst CommentService = {\n  findCommentById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  saveComment: (me, posts) => {\n    return true;\n  },\n};\nconst commentController = new CommentController({\n  CommentService,\n  UserService,\n});\nawait commentController.saveComment(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(405);\nexpect(res.status(405).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Method Not Allowed\",\n});",
                  "err": {},
                  "uuid": "7b58b98f-3e18-4c60-8805-1a592fc95ac0",
                  "parentUUID": "82c97478-0562-46e9-9005-dd84aa3c268d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test success",
                  "fullTitle": "Comment Controller CRUD operations saveComment Test fourth test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst CommentService = {\n  findCommentById: async (postId) => {\n    let response = {\n      success: false,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  saveComment: (me, posts) => {\n    return true;\n  },\n};\nconst commentController = new CommentController({\n  CommentService,\n  UserService,\n});\nawait commentController.saveComment(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Comment Not Found\",\n});",
                  "err": {},
                  "uuid": "a5255b7e-3669-476d-bee6-1ae208cae442",
                  "parentUUID": "82c97478-0562-46e9-9005-dd84aa3c268d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fifth test success",
                  "fullTitle": "Comment Controller CRUD operations saveComment Test fifth test success",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 2,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst CommentService = {\n  findCommentById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  saveComment: (me, posts) => {\n    return true;\n  },\n};\nconst commentController = new CommentController({\n  CommentService,\n  UserService,\n});\nawait commentController.saveComment(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Enter Valid Vote dir\",\n});",
                  "err": {},
                  "uuid": "47928cf9-1200-467f-8af2-74ad366027e7",
                  "parentUUID": "82c97478-0562-46e9-9005-dd84aa3c268d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9deab33e-eead-40a5-ad02-a0fefe0d1d2f",
                "17064846-fe18-4217-8399-a4852dc98347",
                "7b58b98f-3e18-4c60-8805-1a592fc95ac0",
                "a5255b7e-3669-476d-bee6-1ae208cae442",
                "47928cf9-1200-467f-8af2-74ad366027e7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "e9d76384-b271-4924-b80a-bf6817d10a01",
              "title": "unSaveComment Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\commentController.js",
              "file": "\\test\\controllers\\commentController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Comment Controller CRUD operations unSaveComment Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst CommentService = {\n  findCommentById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  unSaveComment: (me, posts) => {\n    return true;\n  },\n};\nconst commentController = new CommentController({\n  CommentService,\n  UserService,\n});\nawait commentController.unSaveComment(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "b5e3fc87-9eb7-405b-a20d-f687cb15b82c",
                  "parentUUID": "e9d76384-b271-4924-b80a-bf6817d10a01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test success",
                  "fullTitle": "Comment Controller CRUD operations unSaveComment Test second test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst CommentService = {\n  findCommentById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  unSaveComment: (me, posts) => {\n    return false;\n  },\n};\nconst commentController = new CommentController({\n  CommentService,\n  UserService,\n});\nawait commentController.unSaveComment(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(304).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "34e03078-3460-4db5-9447-deaaa2203646",
                  "parentUUID": "e9d76384-b271-4924-b80a-bf6817d10a01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test success",
                  "fullTitle": "Comment Controller CRUD operations unSaveComment Test thrid test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return true;\n  },\n};\nconst CommentService = {\n  findCommentById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  unSaveComment: (me, posts) => {\n    return true;\n  },\n};\nconst commentController = new CommentController({\n  CommentService,\n  UserService,\n});\nawait commentController.unSaveComment(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(405);\nexpect(res.status(405).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Method Not Allowed\",\n});",
                  "err": {},
                  "uuid": "5064da6e-5323-4df9-992d-e4d48f1bfaf3",
                  "parentUUID": "e9d76384-b271-4924-b80a-bf6817d10a01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test success",
                  "fullTitle": "Comment Controller CRUD operations unSaveComment Test fourth test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst CommentService = {\n  findCommentById: async (postId) => {\n    let response = {\n      success: false,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  unSaveComment: (me, posts) => {\n    return true;\n  },\n};\nconst commentController = new CommentController({\n  CommentService,\n  UserService,\n});\nawait commentController.unSaveComment(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Comment Not Found\",\n});",
                  "err": {},
                  "uuid": "7b5f9ac5-34f2-43e5-af55-362c3bc75189",
                  "parentUUID": "e9d76384-b271-4924-b80a-bf6817d10a01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fifth test success",
                  "fullTitle": "Comment Controller CRUD operations unSaveComment Test fifth test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 2,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst CommentService = {\n  findCommentById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  unSaveComment: (me, posts) => {\n    return true;\n  },\n};\nconst commentController = new CommentController({\n  CommentService,\n  UserService,\n});\nawait commentController.unSaveComment(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Enter Valid Vote dir\",\n});",
                  "err": {},
                  "uuid": "5af24bb8-b51d-4eee-b1a1-c1c2c860ec1b",
                  "parentUUID": "e9d76384-b271-4924-b80a-bf6817d10a01",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5e3fc87-9eb7-405b-a20d-f687cb15b82c",
                "34e03078-3460-4db5-9447-deaaa2203646",
                "5064da6e-5323-4df9-992d-e4d48f1bfaf3",
                "7b5f9ac5-34f2-43e5-af55-362c3bc75189",
                "5af24bb8-b51d-4eee-b1a1-c1c2c860ec1b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "d833b4dd-7b6e-44f4-bbcf-bd7488836790",
              "title": "getUserComments Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\commentController.js",
              "file": "\\test\\controllers\\commentController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Comment Controller CRUD operations getUserComments Test first test success",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    userName: \"Ahmed\",\n  },\n  query: {\n    sort: \"New\",\n    limit: -1,\n    page: -1,\n  },\n};\nconst UserService = {\n  getUserByName: async (userName, dummy) => {\n    return {\n      success: true,\n      data: {\n        _id: \"2\",\n      },\n    };\n  },\n  checkBlockStatus: async (me, user) => {\n    return false;\n  },\n};\nconst CommentService = {\n  getUserComments: async (userid, sorttype) => {\n    let posts = [\n      {\n        _id: \"1\",\n      },\n    ];\n    return posts;\n  },\n};\nconst commentController = new CommentController({ CommentService, UserService });\nawait commentController.getUserComments(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  posts: [\n    {\n      _id: \"1\",\n    },\n  ],\n});",
                  "err": {},
                  "uuid": "57e2cd12-9481-44c3-af6d-f136bed0f22b",
                  "parentUUID": "d833b4dd-7b6e-44f4-bbcf-bd7488836790",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "third test fail",
                  "fullTitle": "Comment Controller CRUD operations getUserComments Test third test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    userName: \"ahmed\",\n  },\n  query: {\n    sortType: \"New\",\n  },\n};\nconst UserService = {\n  getUserByName: async (userName, dummy) => {\n    return {\n      success: false,\n    };\n  },\n  checkBlockStatus: async (me, user) => {\n    return false;\n  },\n};\nconst CommentService = {};\nconst commentController = new CommentController({ CommentService, UserService });\nawait commentController.getUserComments(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"User Not Found\",\n});",
                  "err": {},
                  "uuid": "bb86bd9a-9d21-4539-b118-88758b807b66",
                  "parentUUID": "d833b4dd-7b6e-44f4-bbcf-bd7488836790",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test fail",
                  "fullTitle": "Comment Controller CRUD operations getUserComments Test fourth test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    userName: \"ahmed\",\n  },\n  query: {\n    sortType: \"New\",\n  },\n};\nconst UserService = {\n  getUserByName: async (userName, dummy) => {\n    return {\n      success: true,\n      data: {\n        _id: \"2\",\n      },\n    };\n  },\n  checkBlockStatus: async (me, user) => {\n    return true;\n  },\n};\nconst CommentService = {};\nconst commentController = new CommentController({ CommentService, UserService });\nawait commentController.getUserComments(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  posts: [],\n});",
                  "err": {},
                  "uuid": "9e2cff2a-8280-4e61-94ff-69a0013fcdfd",
                  "parentUUID": "d833b4dd-7b6e-44f4-bbcf-bd7488836790",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "57e2cd12-9481-44c3-af6d-f136bed0f22b",
                "bb86bd9a-9d21-4539-b118-88758b807b66",
                "9e2cff2a-8280-4e61-94ff-69a0013fcdfd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "82e887cf-c019-46e7-bdbf-e964b42da7c4",
          "title": "file Controller Test",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\fileController.js",
          "file": "\\test\\controllers\\fileController.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "caa60284-0c78-4b83-a34c-bf1f1e2b0607",
              "title": "uploadUserImage Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\fileController.js",
              "file": "\\test\\controllers\\fileController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "file Controller Test uploadUserImage Test first test success",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var file;\nfile = fs.readFileSync(`${__dirname}/default.png`);\nconst req = {\n  body: {\n    type: \"profileBackground\",\n  },\n  user: {\n    userName: \"ahmed\",\n  },\n  file: {\n    buffer: file,\n  },\n};\nconst UserService = {\n  addUserImageURL: async () => {\n    return {\n      _id: \"\",\n      userName: \"\",\n      email: \"\",\n      profilePicture: \"\",\n      profileBackground: \"\",\n      canbeFollowed: \"\",\n      lastUpdatedPassword: \"\",\n      followersCount: \"\",\n      friendsCount: \"\",\n      accountActivated: \"\",\n      gender: \"\",\n      displayName: \"\",\n      postKarma: \"\",\n      commentKarma: \"\",\n      createdAt: \"\",\n      joinDate: \"\",\n      description: \"\",\n      adultContent: \"\",\n      nsfw: \"\",\n    };\n  },\n};\nconst fileController = new FileController({ UserService });\nawait fileController.uploadUserImage(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(201);\nexpect(res.status(201).json).to.have.been.calledWith({\n  status: \"success\",\n  user: {\n    _id: \"\",\n    userName: \"\",\n    email: \"\",\n    profilePicture: \"\",\n    profileBackground: \"\",\n    canbeFollowed: \"\",\n    lastUpdatedPassword: \"\",\n    followersCount: \"\",\n    friendsCount: \"\",\n    accountActivated: \"\",\n    gender: \"\",\n    displayName: \"\",\n    postKarma: \"\",\n    commentKarma: \"\",\n    createdAt: \"\",\n    description: \"\",\n    adultContent: \"\",\n    nsfw: \"\",\n  },\n});",
                  "err": {},
                  "uuid": "138b7412-1f25-42b1-8e59-4c3814e9a0df",
                  "parentUUID": "caa60284-0c78-4b83-a34c-bf1f1e2b0607",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test fail",
                  "fullTitle": "file Controller Test uploadUserImage Test second test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var file;\nfile = fs.readFileSync(`${__dirname}/default.png`);\nconst req = {\n  body: {\n    type: \"\",\n  },\n  user: {\n    userName: \"ahmed\",\n  },\n  file: {\n    buffer: file,\n  },\n};\nconst UserService = {\n  addUserImageURL: async () => {\n    return {\n      _id: \"\",\n      userName: \"\",\n      email: \"\",\n      profilePicture: \"\",\n      profileBackground: \"\",\n      canbeFollowed: \"\",\n      lastUpdatedPassword: \"\",\n      followersCount: \"\",\n      friendsCount: \"\",\n      accountActivated: \"\",\n      gender: \"\",\n      displayName: \"\",\n      postKarma: \"\",\n      commentKarma: \"\",\n      createdAt: \"\",\n      joinDate: \"\",\n      description: \"\",\n      adultContent: \"\",\n      nsfw: \"\",\n    };\n  },\n};\nconst fileController = new FileController({ UserService });\nawait fileController.uploadUserImage(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Please provide correct type of image you want to save\",\n});",
                  "err": {},
                  "uuid": "c8760880-1179-4b81-a5f0-395b52c5d281",
                  "parentUUID": "caa60284-0c78-4b83-a34c-bf1f1e2b0607",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "138b7412-1f25-42b1-8e59-4c3814e9a0df",
                "c8760880-1179-4b81-a5f0-395b52c5d281"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 30,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "d054efd3-20bc-4b72-9cb8-b4eddbef732b",
              "title": "multerFilter Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\fileController.js",
              "file": "\\test\\controllers\\fileController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "file Controller Test multerFilter Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {};\nconst file = {\n  mimetype: {\n    startsWith: (type) => {\n      return true;\n    },\n  },\n};\nlet cb = sinon.spy();\nconst fileController = new FileController({});\nawait fileController.multerFilter(req, file, cb);\nexpect(cb).to.have.been.calledWith(null, true);",
                  "err": {},
                  "uuid": "2e7b18d2-6ee4-4674-9a23-18ef6b1d1275",
                  "parentUUID": "d054efd3-20bc-4b72-9cb8-b4eddbef732b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test success",
                  "fullTitle": "file Controller Test multerFilter Test second test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {};\nconst file = {\n  mimetype: {\n    startsWith: (type) => {\n      return false;\n    },\n  },\n};\nlet cb = sinon.spy();\nconst fileController = new FileController({});\nawait fileController.multerFilter(req, file, cb);\nexpect(cb).to.have.been.calledWith(\"error\", false);",
                  "err": {},
                  "uuid": "78789d24-a67b-4448-8bae-74f0bca523ab",
                  "parentUUID": "d054efd3-20bc-4b72-9cb8-b4eddbef732b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2e7b18d2-6ee4-4674-9a23-18ef6b1d1275",
                "78789d24-a67b-4448-8bae-74f0bca523ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "21fa86d1-a9b6-46be-a79b-0d19029d6e2b",
              "title": "multerFilter Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\fileController.js",
              "file": "\\test\\controllers\\fileController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "file Controller Test multerFilter Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {};\nconst file = {\n  mimetype: {\n    startsWith: (type) => {\n      return true;\n    },\n  },\n};\nlet cb = sinon.spy();\nconst fileController = new FileController({});\nawait fileController.getUpload();",
                  "err": {},
                  "uuid": "99162281-30ee-4540-be45-7756d5378545",
                  "parentUUID": "21fa86d1-a9b6-46be-a79b-0d19029d6e2b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "99162281-30ee-4540-be45-7756d5378545"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "a98ad334-569d-4b71-8d5f-9e7fd71d9b25",
          "title": "flair test",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\flairControllerTest.js",
          "file": "\\test\\controllers\\flairControllerTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "716e7e01-8e45-4527-8380-a2f445415066",
              "title": "get flairs test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\flairControllerTest.js",
              "file": "\\test\\controllers\\flairControllerTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "flair test get flairs test 1) test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    params: {\n        // flairId: \"638bed1001f496d7284c2832\",\n        subredditName: \"Nonlegit\"\n    }\n};\nconst subredditService = {\n    getFlairs: async (subredditName) => {\n        const response = {\n            success: true,\n            data: [{\n                _id: \"638bed1001f496d7284c2832\",\n                text: \"first flair\"\n            }]\n        }\n        return response;\n    }\n};\nconst on = {};\nconst subredditObj = new subreddit({ subredditService, on });\nawait subredditObj.getFlairs(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n    status: \"OK\",\n    data: [{\n        _id: \"638bed1001f496d7284c2832\",\n        text: \"first flair\"\n    }]\n})",
                  "err": {},
                  "uuid": "4a8b191a-ccba-4135-8355-b783c847b3b1",
                  "parentUUID": "716e7e01-8e45-4527-8380-a2f445415066",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test subreddit not found",
                  "fullTitle": "flair test get flairs test 2) test subreddit not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    params: {\n        // flairId: \"638bed1001f496d7284c2832\",\n        subredditName: \"Nonlegit\"\n    }\n};\nconst subredditService = {\n    getFlairs: async (subredditName) => {\n        const response = {\n            success: false,\n            error: subredditErrors.SUBREDDIT_NOT_FOUND\n        }\n        return response;\n    }\n};\nconst on = {};\nconst subredditObj = new subreddit({ subredditService, on });\nawait subredditObj.getFlairs(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n    status: \"Not Found\",\n    message: \"Subreddit not found\"\n})",
                  "err": {},
                  "uuid": "fd2cd63a-d2a1-47f2-9f32-88d195bf2672",
                  "parentUUID": "716e7e01-8e45-4527-8380-a2f445415066",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test missing input",
                  "fullTitle": "flair test get flairs test 3) test missing input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    params: {\n       \n    }\n};\n\nconst on = {};\nconst subredditObj = new subreddit({ on, on });\nawait subredditObj.getFlairs(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n    status: \"fail\",\n    message: \"Missing required parameter\"\n})",
                  "err": {},
                  "uuid": "556a1ded-fd6e-4cc0-b1f1-1ea8f82f1d86",
                  "parentUUID": "716e7e01-8e45-4527-8380-a2f445415066",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a8b191a-ccba-4135-8355-b783c847b3b1",
                "fd2cd63a-d2a1-47f2-9f32-88d195bf2672",
                "556a1ded-fd6e-4cc0-b1f1-1ea8f82f1d86"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "48302c20-0a39-4e2a-a000-25e92859c7e8",
              "title": "get flair test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\flairControllerTest.js",
              "file": "\\test\\controllers\\flairControllerTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "flair test get flair test 1) test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    params: {\n         flairId: \"638bed1001f496d7284c2832\",\n        subredditName: \"Nonlegit\"\n    }\n};\nconst subredditService = {\n    getFlair: async (subredditName,flairId) => {\n        const response = {\n            success: true,\n            data: {\n                _id: \"638bed1001f496d7284c2832\",\n                text: \"first flair\"\n            }\n        }\n        return response;\n    }\n};\nconst on = {};\nconst subredditObj = new subreddit({ subredditService, on });\nawait subredditObj.getFlair(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n    status: \"OK\",\n    data: {\n       _id: \"638bed1001f496d7284c2832\",\n                text: \"first flair\"\n    }\n})",
                  "err": {},
                  "uuid": "9bb947ee-fbeb-4ffc-8533-bf351f48e101",
                  "parentUUID": "48302c20-0a39-4e2a-a000-25e92859c7e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test subreddit not found",
                  "fullTitle": "flair test get flair test 2) test subreddit not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    params: {\n        flairId: \"638bed1001f496d7284c2832\",\n        subredditName: \"Nonlegit\"\n    }\n};\nconst subredditService = {\n    getFlair: async (subredditName,flairId) => {\n        const response = {\n            success: false,\n            error: subredditErrors.SUBREDDIT_NOT_FOUND\n        }\n        return response;\n    }\n};\nconst on = {};\nconst subredditObj = new subreddit({ subredditService, on });\nawait subredditObj.getFlair(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n    status: \"Not Found\",\n    message: \"Subreddit not found\"\n})",
                  "err": {},
                  "uuid": "b1bd036f-0b04-459c-b776-c7712716a7d3",
                  "parentUUID": "48302c20-0a39-4e2a-a000-25e92859c7e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test flair not found",
                  "fullTitle": "flair test get flair test 3) test flair not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    params: {\n        flairId: \"638bed1001f496d7284c2832\",\n        subredditName: \"Nonlegit\"\n    }\n};\nconst subredditService = {\n    getFlair: async (subredditName,flairId) => {\n        const response = {\n            success: false,\n            error: subredditErrors.FLAIR_NOT_FOUND\n        }\n        return response;\n    }\n};\nconst on = {};\nconst subredditObj = new subreddit({ subredditService, on });\nawait subredditObj.getFlair(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n    status: \"Not Found\",\n    message: \"Flair not found\"\n})",
                  "err": {},
                  "uuid": "e04be4cb-71b3-45d9-a6b6-60a84945faf6",
                  "parentUUID": "48302c20-0a39-4e2a-a000-25e92859c7e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4) test missing input",
                  "fullTitle": "flair test get flair test 4) test missing input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    params: {\n       \n    }\n};\n\nconst on = {};\nconst subredditObj = new subreddit({ on, on });\nawait subredditObj.getFlair(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n    status: \"fail\",\n    message: \"Missing required parameter\"\n})",
                  "err": {},
                  "uuid": "14990248-56b9-4eab-afb2-4daf1c6da3d9",
                  "parentUUID": "48302c20-0a39-4e2a-a000-25e92859c7e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9bb947ee-fbeb-4ffc-8533-bf351f48e101",
                "b1bd036f-0b04-459c-b776-c7712716a7d3",
                "e04be4cb-71b3-45d9-a6b6-60a84945faf6",
                "14990248-56b9-4eab-afb2-4daf1c6da3d9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "186a8313-20a6-4db4-9c82-4f498459ee39",
              "title": "delete flair test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\flairControllerTest.js",
              "file": "\\test\\controllers\\flairControllerTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "flair test delete flair test 1) test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    params: {\n         flairId: \"638bed1001f496d7284c2832\",\n        subredditName: \"Nonlegit\"\n    },\n     user :{\n        _id:\" \"\n    }\n};\nconst subredditService = {\n    deleteFlair: async (subredditName,flairId) => {\n        const response = {\n            success: true,\n           \n        }\n        return response;\n    }\n};\nconst on = {};\nconst subredditObj = new subreddit({ subredditService, on });\nawait subredditObj.deleteFlair(req, res);\nexpect(res.status).to.have.been.calledWith(204);",
                  "err": {},
                  "uuid": "c6634694-df40-4333-ac53-af9abed064ac",
                  "parentUUID": "186a8313-20a6-4db4-9c82-4f498459ee39",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test not moderator",
                  "fullTitle": "flair test delete flair test 2) test not moderator",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    params: {\n         flairId: \"638bed1001f496d7284c2832\",\n        subredditName: \"Nonlegit\"\n    },\n     user :{\n        _id:\" \"\n    }\n};\nconst subredditService = {\n    deleteFlair: async (subredditName,flairId) => {\n        const response = {\n            success: false,\n           error :subredditErrors.NOT_MODERATOR\n        }\n        return response;\n    }\n};\nconst on = {};\nconst subredditObj = new subreddit({ subredditService, on });\nawait subredditObj.deleteFlair(req, res);\nexpect(res.status).to.have.been.calledWith(403);\nexpect(res.status(403).json).to.have.been.calledWith({\n    status :\"Forbidden\",\n    message :\"Not a subreddit moderator\"\n})",
                  "err": {},
                  "uuid": "e910e3ef-8ba0-4c6b-9e50-4905d94dfff6",
                  "parentUUID": "186a8313-20a6-4db4-9c82-4f498459ee39",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test subreddit not found",
                  "fullTitle": "flair test delete flair test 3) test subreddit not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    params: {\n         flairId: \"638bed1001f496d7284c2832\",\n        subredditName: \"Nonlegit\"\n    },\n      user :{\n        _id:\" \"\n    }\n};\nconst subredditService = {\n    deleteFlair: async (subredditName) => {\n        const response = {\n            success: false,\n            error: subredditErrors.SUBREDDIT_NOT_FOUND\n        }\n        return response;\n    }\n};\nconst on = {};\nconst subredditObj = new subreddit({ subredditService, on });\nawait subredditObj.deleteFlair(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n    status: \"Not Found\",\n    message: \"Subreddit not found\"\n})",
                  "err": {},
                  "uuid": "3f2f991b-2ddc-413e-979e-87dbe716cb07",
                  "parentUUID": "186a8313-20a6-4db4-9c82-4f498459ee39",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4) test flair not found",
                  "fullTitle": "flair test delete flair test 4) test flair not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    params: {\n        flairId: \"638bed1001f496d7284c2832\",\n        subredditName: \"Nonlegit\"\n    },\n      user :{\n        _id:\" \"\n    }\n};\nconst subredditService = {\n    deleteFlair: async (subredditName,flairId) => {\n        const response = {\n            success: false,\n            error: subredditErrors.FLAIR_NOT_FOUND\n        }\n        return response;\n    }\n};\nconst on = {};\nconst subredditObj = new subreddit({ subredditService, on });\nawait subredditObj.deleteFlair(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n    status: \"Not Found\",\n    message: \"Flair not found\"\n})",
                  "err": {},
                  "uuid": "291ac62a-18ff-4a9a-8c97-7e86168bf4c0",
                  "parentUUID": "186a8313-20a6-4db4-9c82-4f498459ee39",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5) test missing input",
                  "fullTitle": "flair test delete flair test 5) test missing input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    params: {\n       \n    },\n      user :{\n        _id:\" \"\n    }\n};\n\nconst on = {};\nconst subredditObj = new subreddit({ on, on });\nawait subredditObj.deleteFlair(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n    status: \"fail\",\n    message: \"Missing required parameter\"\n})",
                  "err": {},
                  "uuid": "8e53a788-0c31-41ec-9237-df4bacfc498e",
                  "parentUUID": "186a8313-20a6-4db4-9c82-4f498459ee39",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c6634694-df40-4333-ac53-af9abed064ac",
                "e910e3ef-8ba0-4c6b-9e50-4905d94dfff6",
                "3f2f991b-2ddc-413e-979e-87dbe716cb07",
                "291ac62a-18ff-4a9a-8c97-7e86168bf4c0",
                "8e53a788-0c31-41ec-9237-df4bacfc498e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "6410e3d7-161e-44ec-8692-0eb6436259c6",
              "title": "update flair test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\flairControllerTest.js",
              "file": "\\test\\controllers\\flairControllerTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "flair test update flair test 1) test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    params: {\n         flairId: \"638bed1001f496d7284c2832\",\n        subredditName: \"Nonlegit\"\n    },\n     user :{\n        _id:\" \"\n    },\n    body: {\n         text:\"new text\"\n     }\n};\nconst subredditService = {\n    updateFlair: async (subredditName,flairId) => {\n        const response = {\n            success: true,\n            data: {\n                _id: \"638bed1001f496d7284c2832\",\n                text:\"new text\"\n           }\n        }\n        return response;\n    }\n};\nconst on = {};\nconst subredditObj = new subreddit({ subredditService, on });\nawait subredditObj.updateFlair(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n    status: \"OK\",\n    data: {\n       _id: \"638bed1001f496d7284c2832\",\n                text:\"new text\"\n    }\n})",
                  "err": {},
                  "uuid": "69a854ea-7ad9-4389-85e0-7f2c160c2a6b",
                  "parentUUID": "6410e3d7-161e-44ec-8692-0eb6436259c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test not moderator",
                  "fullTitle": "flair test update flair test 2) test not moderator",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    params: {\n         flairId: \"638bed1001f496d7284c2832\",\n        subredditName: \"Nonlegit\"\n    },\n     user :{\n        _id:\" \"\n    }\n};\nconst subredditService = {\n    updateFlair: async (subredditName,flairId) => {\n        const response = {\n            success: false,\n           error :subredditErrors.NOT_MODERATOR\n        }\n        return response;\n    }\n};\nconst on = {};\nconst subredditObj = new subreddit({ subredditService, on });\nawait subredditObj.updateFlair(req, res);\nexpect(res.status).to.have.been.calledWith(403);\nexpect(res.status(403).json).to.have.been.calledWith({\n    status :\"Forbidden\",\n    message :\"Not a subreddit moderator\"\n})",
                  "err": {},
                  "uuid": "5c24c201-aca1-455f-b352-767ca9d3e7e6",
                  "parentUUID": "6410e3d7-161e-44ec-8692-0eb6436259c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test subreddit not found",
                  "fullTitle": "flair test update flair test 3) test subreddit not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    params: {\n         flairId: \"638bed1001f496d7284c2832\",\n        subredditName: \"Nonlegit\"\n    },\n      user :{\n        _id:\" \"\n    }\n};\nconst subredditService = {\n    updateFlair: async (subredditName) => {\n        const response = {\n            success: false,\n            error: subredditErrors.SUBREDDIT_NOT_FOUND\n        }\n        return response;\n    }\n};\nconst on = {};\nconst subredditObj = new subreddit({ subredditService, on });\nawait subredditObj.updateFlair(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n    status: \"Not Found\",\n    message: \"Subreddit not found\"\n})",
                  "err": {},
                  "uuid": "45bc67da-f44f-4536-9cbb-aae16df2dfdf",
                  "parentUUID": "6410e3d7-161e-44ec-8692-0eb6436259c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4) test flair not found",
                  "fullTitle": "flair test update flair test 4) test flair not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    params: {\n        flairId: \"638bed1001f496d7284c2832\",\n        subredditName: \"Nonlegit\"\n    },\n      user :{\n        _id:\" \"\n    }\n};\nconst subredditService = {\n    updateFlair: async (subredditName,flairId) => {\n        const response = {\n            success: false,\n            error: subredditErrors.FLAIR_NOT_FOUND\n        }\n        return response;\n    }\n};\nconst on = {};\nconst subredditObj = new subreddit({ subredditService, on });\nawait subredditObj.updateFlair(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n    status: \"Not Found\",\n    message: \"Flair not found\"\n})",
                  "err": {},
                  "uuid": "07e40aa6-a922-4e96-893a-ae98ffa2c4b6",
                  "parentUUID": "6410e3d7-161e-44ec-8692-0eb6436259c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5) test missing input",
                  "fullTitle": "flair test update flair test 5) test missing input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    params: {\n       \n    },\n      user :{\n        _id:\" \"\n    }\n};\n\nconst on = {};\nconst subredditObj = new subreddit({ on, on });\nawait subredditObj.updateFlair(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n    status: \"fail\",\n    message: \"Missing required parameter\"\n})",
                  "err": {},
                  "uuid": "0cf5529c-d641-4a9a-95af-9b181b299e41",
                  "parentUUID": "6410e3d7-161e-44ec-8692-0eb6436259c6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "69a854ea-7ad9-4389-85e0-7f2c160c2a6b",
                "5c24c201-aca1-455f-b352-767ca9d3e7e6",
                "45bc67da-f44f-4536-9cbb-aae16df2dfdf",
                "07e40aa6-a922-4e96-893a-ae98ffa2c4b6",
                "0cf5529c-d641-4a9a-95af-9b181b299e41"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "5dd91078-29af-4644-a355-014d2e9e7451",
              "title": "create flair test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\flairControllerTest.js",
              "file": "\\test\\controllers\\flairControllerTest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "flair test create flair test 1) test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    params: {\n         \n        subredditName: \"Nonlegit\"\n    },\n     user :{\n        _id:\" \"\n    },\n    body: {\n         text:\"new text\"\n     }\n};\nconst subredditService = {\n    createFlair: async (subredditName,flairId) => {\n        const response = {\n            success: true,\n            data: {\n                _id: \"638bed1001f496d7284c2832\",\n                text:\"new text\"\n           }\n        }\n        return response;\n    }\n};\nconst on = {};\nconst subredditObj = new subreddit({ subredditService, on });\nawait subredditObj.createFlair(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n    status: \"OK\",\n    data: {\n       _id: \"638bed1001f496d7284c2832\",\n                text:\"new text\"\n    }\n})",
                  "err": {},
                  "uuid": "0bdd27df-7981-46c9-ac6f-344d3fe188bf",
                  "parentUUID": "5dd91078-29af-4644-a355-014d2e9e7451",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test not moderator",
                  "fullTitle": "flair test create flair test 2) test not moderator",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    params: {\n        \n        subredditName: \"Nonlegit\"\n    },\n     user :{\n        _id:\" \"\n    },\n    body: {\n         text:\"hello\"\n     }\n};\nconst subredditService = {\n    createFlair: async (subredditName,flairId) => {\n        const response = {\n            success: false,\n           error :subredditErrors.NOT_MODERATOR\n        }\n        return response;\n    }\n};\nconst on = {};\nconst subredditObj = new subreddit({ subredditService, on });\nawait subredditObj.createFlair(req, res);\nexpect(res.status).to.have.been.calledWith(403);\nexpect(res.status(403).json).to.have.been.calledWith({\n    status :\"Forbidden\",\n    message :\"Not a subreddit moderator\"\n})",
                  "err": {},
                  "uuid": "e4aee454-9fed-4bf5-9b9d-cf9f1c9ba5f1",
                  "parentUUID": "5dd91078-29af-4644-a355-014d2e9e7451",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test subreddit not found",
                  "fullTitle": "flair test create flair test 3) test subreddit not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    params: {\n        \n        subredditName: \"Nonlegit\"\n    },\n      user :{\n        _id:\" \"\n    },\n       body: {\n         text:\"hello\"\n     }\n};\nconst subredditService = {\n    createFlair: async (subredditName) => {\n        const response = {\n            success: false,\n            error: subredditErrors.SUBREDDIT_NOT_FOUND\n        }\n        return response;\n    }\n};\nconst on = {};\nconst subredditObj = new subreddit({ subredditService, on });\nawait subredditObj.createFlair(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n    status: \"Not Found\",\n    message: \"Subreddit not found\"\n})",
                  "err": {},
                  "uuid": "4bece606-fda8-42aa-bf97-ee469f5f53b4",
                  "parentUUID": "5dd91078-29af-4644-a355-014d2e9e7451",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4) test flair not found",
                  "fullTitle": "flair test create flair test 4) test flair not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    params: {\n       \n        subredditName: \"Nonlegit\"\n    },\n      user :{\n        _id:\" \"\n    },\n       body: {\n         text:\"hello\"\n     }\n};\nconst subredditService = {\n    createFlair: async (subredditName,flairId) => {\n        const response = {\n            success: false,\n            error: subredditErrors.FLAIR_NOT_FOUND\n        }\n        return response;\n    }\n};\nconst on = {};\nconst subredditObj = new subreddit({ subredditService, on });\nawait subredditObj.createFlair(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n    status: \"Not Found\",\n    message: \"Flair not found\"\n})",
                  "err": {},
                  "uuid": "295d4089-ee2c-4c99-9155-c107e0c5e880",
                  "parentUUID": "5dd91078-29af-4644-a355-014d2e9e7451",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5) test missing input",
                  "fullTitle": "flair test create flair test 5) test missing input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    params: {\n       \n    },\n      user :{\n        _id:\" \"\n    },\n       body: {\n         text:\"hello\"\n     }\n};\n\nconst on = {};\nconst subredditObj = new subreddit({ on, on });\nawait subredditObj.createFlair(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n    status: \"fail\",\n    message: \"Missing required parameter\"\n})",
                  "err": {},
                  "uuid": "c76fbe35-c4f9-4af5-9f68-bbd7002bae07",
                  "parentUUID": "5dd91078-29af-4644-a355-014d2e9e7451",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0bdd27df-7981-46c9-ac6f-344d3fe188bf",
                "e4aee454-9fed-4bf5-9b9d-cf9f1c9ba5f1",
                "4bece606-fda8-42aa-bf97-ee469f5f53b4",
                "295d4089-ee2c-4c99-9155-c107e0c5e880",
                "c76fbe35-c4f9-4af5-9f68-bbd7002bae07"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "645aa29a-97bc-47d6-927b-715b02c12d8b",
          "title": "message test",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\messageController.js",
          "file": "\\test\\controllers\\messageController.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "74e0e00b-9059-4b39-a29e-fb4d4550394a",
              "title": "get messages test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\messageController.js",
              "file": "\\test\\controllers\\messageController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "message test get messages test 1) test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: { _id: \"125\" }              \n};\nconst MessageService = {\n    getMessages: async (id) => {\n        const response = {\n            success: true,\n            data: [{\n                _id: \"638bed1001f496d7284c2832\"\n            }]\n        }\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService });\nawait messageObj.getMessages(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(500).json).to.have.been.calledWith({\n    status: \"OK\",\n    data: [{\n        _id: \"638bed1001f496d7284c2832\",\n    }]\n})",
                  "err": {},
                  "uuid": "73d95e7b-2f6c-46e7-90c3-8f7a7809dd17",
                  "parentUUID": "74e0e00b-9059-4b39-a29e-fb4d4550394a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test failure",
                  "fullTitle": "message test get messages test 2) test failure",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    \n        user: { _id: \"125\" }\n    \n};\nconst MessageService = {\n    getMessages: async (id) => {\n        const response = {\n            success: false,\n        }\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService });\nawait messageObj.getMessages(req, res);\nexpect(res.status).to.have.been.calledWith(500);\nexpect(res.status(500).json).to.have.been.calledWith({\n     status: \"Internal server error\",\n          message: \"Internal server error\",\n       \n})",
                  "err": {},
                  "uuid": "e53cfc93-9647-48f8-90e8-4186e5ebb7e7",
                  "parentUUID": "74e0e00b-9059-4b39-a29e-fb4d4550394a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test fail exception",
                  "fullTitle": "message test get messages test 3) test fail exception",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: { _id: \"125\" }              \n};\nconst MessageService = {\n    getMessages: async (id) => {\n        const response = {\n            success: true,\n            data: [{\n                _id: \"638bed1001f496d7284c2832\"\n            }]\n        }\n        throw new Error('divide by zero!');\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService });\nawait messageObj.getMessages(req, res);\nexpect(res.status).to.have.been.calledWith(500);\n  expect(res.status(500).json).to.have.been.calledWith({\n   status: \"fail\"\n})",
                  "err": {},
                  "uuid": "18c3dd9a-340d-4108-a1ba-da710027e63c",
                  "parentUUID": "74e0e00b-9059-4b39-a29e-fb4d4550394a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "73d95e7b-2f6c-46e7-90c3-8f7a7809dd17",
                "e53cfc93-9647-48f8-90e8-4186e5ebb7e7",
                "18c3dd9a-340d-4108-a1ba-da710027e63c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "d0d9f518-8eff-4844-a3b5-cde683b11335",
              "title": "get all messages test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\messageController.js",
              "file": "\\test\\controllers\\messageController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "message test get all messages test 1) test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: { _id: \"125\" }              \n};\nconst MessageService = {\n    getAllMessages: async (id) => {\n        const response = {\n            success: true,\n            data: [{\n                _id: \"638bed1001f496d7284c2832\"\n            }]\n        }\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService });\nawait messageObj.getAllMessages(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(500).json).to.have.been.calledWith({\n    status: \"OK\",\n    data: [{\n        _id: \"638bed1001f496d7284c2832\",\n    }]\n})",
                  "err": {},
                  "uuid": "9a759e24-15b4-422b-97cf-23d18d098bdf",
                  "parentUUID": "d0d9f518-8eff-4844-a3b5-cde683b11335",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test failure",
                  "fullTitle": "message test get all messages test 2) test failure",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    \n        user: { _id: \"125\" }\n    \n};\nconst MessageService = {\n    getAllMessages: async (id) => {\n        const response = {\n            success: false,\n        }\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService });\nawait messageObj.getAllMessages(req, res);\nexpect(res.status).to.have.been.calledWith(500);\nexpect(res.status(500).json).to.have.been.calledWith({\n     status: \"Internal server error\",\n          message: \"Internal server error\",\n       \n})",
                  "err": {},
                  "uuid": "44edf80e-3ec8-4016-b5a9-d65609292aca",
                  "parentUUID": "d0d9f518-8eff-4844-a3b5-cde683b11335",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test fail exception",
                  "fullTitle": "message test get all messages test 3) test fail exception",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: { _id: \"125\" }              \n};\nconst MessageService = {\n    getAllMessages: async (id) => {\n        const response = {\n            success: true,\n            data: [{\n                _id: \"638bed1001f496d7284c2832\"\n            }]\n        }\n        throw new Error('divide by zero!');\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService });\nawait messageObj.getAllMessages(req, res);\nexpect(res.status).to.have.been.calledWith(500);\n  expect(res.status(500).json).to.have.been.calledWith({\n   status: \"fail\"\n})",
                  "err": {},
                  "uuid": "9f01e4f3-2a9c-4255-8385-bd382a0671cc",
                  "parentUUID": "d0d9f518-8eff-4844-a3b5-cde683b11335",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a759e24-15b4-422b-97cf-23d18d098bdf",
                "44edf80e-3ec8-4016-b5a9-d65609292aca",
                "9f01e4f3-2a9c-4255-8385-bd382a0671cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "bbf24ff2-1f4e-4d4c-8bf3-42fa8bcc611c",
              "title": "get sent test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\messageController.js",
              "file": "\\test\\controllers\\messageController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "message test get sent test 1) test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: { _id: \"125\" }              \n};\nconst MessageService = {\n    getSentMessage: async (id) => {\n        const response = {\n            success: true,\n            data: [{\n                _id: \"638bed1001f496d7284c2832\"\n            }]\n        }\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService });\nawait messageObj.getSentMessage(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(500).json).to.have.been.calledWith({\n    status: \"OK\",\n    data: [{\n        _id: \"638bed1001f496d7284c2832\",\n    }]\n})",
                  "err": {},
                  "uuid": "f95bedee-84aa-4a9e-94e3-c7f3414d3c9f",
                  "parentUUID": "bbf24ff2-1f4e-4d4c-8bf3-42fa8bcc611c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test failure",
                  "fullTitle": "message test get sent test 2) test failure",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    \n        user: { _id: \"125\" }\n    \n};\nconst MessageService = {\n    getSentMessage: async (id) => {\n        const response = {\n            success: false,\n        }\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService });\nawait messageObj.getSentMessage(req, res);\nexpect(res.status).to.have.been.calledWith(500);\nexpect(res.status(500).json).to.have.been.calledWith({\n     status: \"Internal server error\",\n          message: \"Internal server error\",\n       \n})",
                  "err": {},
                  "uuid": "572918ce-29fd-46a3-8d51-e810039aa43e",
                  "parentUUID": "bbf24ff2-1f4e-4d4c-8bf3-42fa8bcc611c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test fail exception",
                  "fullTitle": "message test get sent test 3) test fail exception",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: { _id: \"125\" }              \n};\nconst MessageService = {\n    getSentMessage: async (id) => {\n        const response = {\n            success: true,\n            data: [{\n                _id: \"638bed1001f496d7284c2832\"\n            }]\n        }\n        throw new Error('divide by zero!');\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService });\nawait messageObj.getSentMessage(req, res);\nexpect(res.status).to.have.been.calledWith(200);\n expect(res.status(500).json).to.have.been.calledWith({\n   status: \"fail\"\n})",
                  "err": {},
                  "uuid": "c69e4587-8018-4275-a56a-570bea0e7dbc",
                  "parentUUID": "bbf24ff2-1f4e-4d4c-8bf3-42fa8bcc611c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f95bedee-84aa-4a9e-94e3-c7f3414d3c9f",
                "572918ce-29fd-46a3-8d51-e810039aa43e",
                "c69e4587-8018-4275-a56a-570bea0e7dbc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "72b7bf35-ab62-43e9-bf3d-4f6579754203",
              "title": "get unread test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\messageController.js",
              "file": "\\test\\controllers\\messageController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "message test get unread test 1) test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: { _id: \"125\" }              \n};\nconst MessageService = {\n    getUnreadMessage: async (id) => {\n        const response = {\n            success: true,\n            data: [{\n                _id: \"638bed1001f496d7284c2832\"\n            }]\n        }\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService });\nawait messageObj.getUnreadMessage(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(500).json).to.have.been.calledWith({\n    status: \"OK\",\n    data: [{\n        _id: \"638bed1001f496d7284c2832\",\n    }]\n})",
                  "err": {},
                  "uuid": "e0f2d722-70a9-4b79-97b7-61c8de76cfa0",
                  "parentUUID": "72b7bf35-ab62-43e9-bf3d-4f6579754203",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test failure",
                  "fullTitle": "message test get unread test 2) test failure",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    \n        user: { _id: \"125\" }\n    \n};\nconst MessageService = {\n    getUnreadMessage: async (id) => {\n        const response = {\n            success: false,\n        }\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService });\nawait messageObj.getUnreadMessage(req, res);\nexpect(res.status).to.have.been.calledWith(500);\nexpect(res.status(500).json).to.have.been.calledWith({\n     status: \"Internal server error\",\n          message: \"Internal server error\",\n       \n})",
                  "err": {},
                  "uuid": "bf946bf2-015b-4d59-beb9-53b5be858162",
                  "parentUUID": "72b7bf35-ab62-43e9-bf3d-4f6579754203",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test fail exception",
                  "fullTitle": "message test get unread test 3) test fail exception",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: { _id: \"125\" }              \n};\nconst MessageService = {\n    getUnreadMessage: async (id) => {\n        const response = {\n            success: true,\n            data: [{\n                _id: \"638bed1001f496d7284c2832\"\n            }]\n        }\n        throw new Error('divide by zero!');\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService });\nawait messageObj.getUnreadMessage(req, res);\nexpect(res.status).to.have.been.calledWith(500);\n\n  expect(res.status(500).json).to.have.been.calledWith({\n   status: \"fail\"\n})",
                  "err": {},
                  "uuid": "4efa1f41-49a3-4ab8-8558-3b833f63dbba",
                  "parentUUID": "72b7bf35-ab62-43e9-bf3d-4f6579754203",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e0f2d722-70a9-4b79-97b7-61c8de76cfa0",
                "bf946bf2-015b-4d59-beb9-53b5be858162",
                "4efa1f41-49a3-4ab8-8558-3b833f63dbba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "bad66903-e254-40e2-90e8-734301d4365f",
              "title": "get post replies test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\messageController.js",
              "file": "\\test\\controllers\\messageController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "message test get post replies test 1) test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: { _id: \"125\" }              \n};\nconst MessageService = {\n    getPostReplies: async (id) => {\n        const response = {\n            success: true,\n            data: [{\n                _id: \"638bed1001f496d7284c2832\"\n            }]\n        }\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService });\nawait messageObj.getPostReplies(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(500).json).to.have.been.calledWith({\n    status: \"OK\",\n    data: [{\n        _id: \"638bed1001f496d7284c2832\",\n    }]\n})",
                  "err": {},
                  "uuid": "77b1cb47-abec-4ab5-a090-8591c934a433",
                  "parentUUID": "bad66903-e254-40e2-90e8-734301d4365f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test failure",
                  "fullTitle": "message test get post replies test 2) test failure",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    \n        user: { _id: \"125\" }\n    \n};\nconst MessageService = {\n    getPostReplies: async (id) => {\n        const response = {\n            success: false,\n        }\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService });\nawait messageObj.getPostReplies(req, res);\nexpect(res.status).to.have.been.calledWith(500);\nexpect(res.status(500).json).to.have.been.calledWith({\n     status: \"Internal server error\",\n          message: \"Internal server error\",\n       \n})",
                  "err": {},
                  "uuid": "4418104b-0f52-4544-b691-86aab8742358",
                  "parentUUID": "bad66903-e254-40e2-90e8-734301d4365f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test fail exception",
                  "fullTitle": "message test get post replies test 3) test fail exception",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: { _id: \"125\" }              \n};\nconst MessageService = {\n    getPostReplies: async (id) => {\n        const response = {\n            success: true,\n            data: [{\n                _id: \"638bed1001f496d7284c2832\"\n            }]\n        }\n        throw new Error('divide by zero!');\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService });\nawait messageObj.getPostReplies(req, res);\nexpect(res.status).to.have.been.calledWith(500);\nexpect(res.status(500).json).to.have.been.calledWith({\n   status: \"fail\"\n})",
                  "err": {},
                  "uuid": "a9abe922-a96a-499d-a638-2596bf723d3c",
                  "parentUUID": "bad66903-e254-40e2-90e8-734301d4365f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "77b1cb47-abec-4ab5-a090-8591c934a433",
                "4418104b-0f52-4544-b691-86aab8742358",
                "a9abe922-a96a-499d-a638-2596bf723d3c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "fd2ee420-5f69-448f-bd95-8fc57a165244",
              "title": "mark all as read test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\messageController.js",
              "file": "\\test\\controllers\\messageController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "message test mark all as read test 1) test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n        user: { _id: \"125\" }\n};\nconst MessageService = {\n    markAllAsRead: async (id) => {\n        const response = {\n            success: true\n        }\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService });\nawait messageObj.markAllAsRead(req, res);\nexpect(res.status).to.have.been.calledWith(201);\n          expect(res.status(201).json).to.have.been.calledWith({});",
                  "err": {},
                  "uuid": "4e0fe364-a15a-4a54-8db0-56213706983f",
                  "parentUUID": "fd2ee420-5f69-448f-bd95-8fc57a165244",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test failure",
                  "fullTitle": "message test mark all as read test 2) test failure",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    \n        user: { _id: \"125\" }\n    \n};\nconst MessageService = {\n    markAllAsRead: async (id) => {\n        const response = {\n            success: false,\n        }\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService });\nawait messageObj.markAllAsRead(req, res);\nexpect(res.status).to.have.been.calledWith(500);\nexpect(res.status(500).json).to.have.been.calledWith({\n     status: \"Internal server error\",\n          message: \"Internal server error\",\n       \n})",
                  "err": {},
                  "uuid": "f2b36ca0-735c-4dc5-b6ff-554e454d595f",
                  "parentUUID": "fd2ee420-5f69-448f-bd95-8fc57a165244",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test fail exception",
                  "fullTitle": "message test mark all as read test 3) test fail exception",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n        user: { _id: \"125\" }\n};\nconst MessageService = {\n    markAllAsRead: async (id) => {\n        const response = {\n            success: true\n        }\n        throw new Error('divide by zero!');\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService });\nawait messageObj.markAllAsRead(req, res);\nexpect(res.status).to.have.been.calledWith(500);\n expect(res.status(500).json).to.have.been.calledWith({\n  status: \"fail\"\n          });",
                  "err": {},
                  "uuid": "4c1e3dc5-ae98-4f6f-8626-fa711c7abe8f",
                  "parentUUID": "fd2ee420-5f69-448f-bd95-8fc57a165244",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4e0fe364-a15a-4a54-8db0-56213706983f",
                "f2b36ca0-735c-4dc5-b6ff-554e454d595f",
                "4c1e3dc5-ae98-4f6f-8626-fa711c7abe8f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "3ff912c5-f4f5-4c8f-b524-92e19a3ef4fd",
              "title": "delete one message",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\messageController.js",
              "file": "\\test\\controllers\\messageController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "message test delete one message 1) test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  params: {\n      messageId:\"123\"\n    },\n        // flairId: \"638bed1001f496d7284c2832\",\n        user: { _id: \"125\" }\n    \n};\nconst MessageService = {\n    deleteMessage: async (id) => {\n        const response = {\n            success: true\n        }\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService });\nawait messageObj.deleteMessage(req, res);\n          expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "f452a0f3-51ae-4b6d-bdc8-07c26898e431",
                  "parentUUID": "3ff912c5-f4f5-4c8f-b524-92e19a3ef4fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test failure not found",
                  "fullTitle": "message test delete one message 2) test failure not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n params: {\n     messageId:\"123\"\n   },\n       // flairId: \"638bed1001f496d7284c2832\",\n       user: { _id: \"125\" }\n   \n            };\n            const MessageService = {\n   deleteMessage: async (id) => {\n       const response = {\n         success: false,\n         error:messageErrors.MESSAGE_NOT_FOUND\n       }\n       return response;\n   }\n            };\n            const on = {};\n            const messageObj = new message({ on, MessageService });\n            await messageObj.deleteMessage(req, res);\n            expect(res.status).to.have.been.calledWith(404);\n            expect(res.status(404).json).to.have.been.calledWith({\n   message : \"Message not found\",\n   status : \"Not Found\"\n            })",
                  "err": {},
                  "uuid": "be51cdd7-7dea-4e2b-8678-18bde9578cab",
                  "parentUUID": "3ff912c5-f4f5-4c8f-b524-92e19a3ef4fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test failure internal",
                  "fullTitle": "message test delete one message 3) test failure internal",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n params: {\n     messageId:\"123\"\n   },\n       // flairId: \"638bed1001f496d7284c2832\",\n       user: { _id: \"125\" }\n   \n            };\n            const MessageService = {\n   deleteMessage: async (id) => {\n       const response = {\n         success: false,\n         error: messageErrors.MONGO_ERR\n       }\n       return response;\n   }\n            };\n            const on = {};\n            const messageObj = new message({ on, MessageService });\n            await messageObj.deleteMessage(req, res);\n            expect(res.status).to.have.been.calledWith(500);\n            expect(res.status(500).json).to.have.been.calledWith({\n    message : \"Internal server error\", \n    status : \"Internal Server Error\"\n            })",
                  "err": {},
                  "uuid": "2311d85b-0c55-43f9-99a1-2f56f9736e57",
                  "parentUUID": "3ff912c5-f4f5-4c8f-b524-92e19a3ef4fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4) test fail exception",
                  "fullTitle": "message test delete one message 4) test fail exception",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  params: {\n      messageId:\"123\"\n    },\n        // flairId: \"638bed1001f496d7284c2832\",\n        user: { _id: \"125\" }\n    \n};\nconst MessageService = {\n    deleteMessage: async (id) => {\n        const response = {\n            success: true\n        }\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService });\nawait messageObj.deleteMessage(req, res);\nexpect(res.status).to.have.been.calledWith(500);\nexpect(res.status(500).json).to.have.been.calledWith({\n      status: \"fail\"\n})",
                  "err": {},
                  "uuid": "7026de73-70ba-4f3c-8c9a-6e14698a04ad",
                  "parentUUID": "3ff912c5-f4f5-4c8f-b524-92e19a3ef4fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f452a0f3-51ae-4b6d-bdc8-07c26898e431",
                "be51cdd7-7dea-4e2b-8678-18bde9578cab",
                "2311d85b-0c55-43f9-99a1-2f56f9736e57",
                "7026de73-70ba-4f3c-8c9a-6e14698a04ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "65af90a3-cf08-48d3-9fb3-0fd534f4059a",
              "title": "mod message",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\messageController.js",
              "file": "\\test\\controllers\\messageController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "message test mod message 1) test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n    messageObject: {\n        text: \"hi\",\n        to:\"12\"\n    }\n };\nconst MessageService = {\n    modMessage: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                 text: \"hi\",\n                 to:\"12\"\n            }\n        }\n        return response;\n    }\n};\n const NotificationService = {\n    getFirebaseToken: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                firebaseToken: \"638bed1001f496d7284c2832\"\n            }\n        }\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService,NotificationService });\nawait messageObj.modMessage(req, res);\n         // expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "d8c56507-1155-4f98-8ed1-b7e16884a179",
                  "parentUUID": "65af90a3-cf08-48d3-9fb3-0fd534f4059a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test fail no message object",
                  "fullTitle": "message test mod message 2) test fail no message object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {};\nconst MessageService = {};\nconst NotificationService = {};\nconst on = {};\nconst messageObj = new message({ on, MessageService,NotificationService });\nawait messageObj.modMessage(req, res);\nexpect(res.status).to.have.been.calledWith(400);",
                  "err": {},
                  "uuid": "d10d39d4-6c73-4241-8c83-9049b4c9d905",
                  "parentUUID": "65af90a3-cf08-48d3-9fb3-0fd534f4059a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3)test fail in mod message",
                  "fullTitle": "message test mod message 3)test fail in mod message",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n    messageObject: {\n        text: \"hi\",\n        to:\"12\"\n    }\n };\nconst MessageService = {\n    modMessage: async (id) => {\n        const response = {\n            success: false\n        }\n        return response;\n    }\n};\n\nconst on = {};\nconst messageObj = new message({ on, MessageService});\nawait messageObj.modMessage(req, res);\n         // expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "332419c5-f8f0-441e-8fd1-263d0f6ab2bc",
                  "parentUUID": "65af90a3-cf08-48d3-9fb3-0fd534f4059a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4) test fail in firebase",
                  "fullTitle": "message test mod message 4) test fail in firebase",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    messageObject: {\n        text: \"hi\",\n        to:\"12\"\n    }\n };\nconst MessageService = {\n    modMessage: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                 text: \"hi\",\n                 to:\"12\"\n            }\n        }\n        return response;\n    }\n};\n const NotificationService = {\n    getFirebaseToken: async (id) => {\n        const response = {\n            success: false,\n        }\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService,NotificationService });\nawait messageObj.modMessage(req, res);\n         // expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "6b9e4739-bee8-4bb3-a2e1-98de7309bea8",
                  "parentUUID": "65af90a3-cf08-48d3-9fb3-0fd534f4059a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5) test fail exception",
                  "fullTitle": "message test mod message 5) test fail exception",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n    messageObject: {\n        text: \"hi\",\n        to:\"12\"\n    }\n };\nconst MessageService = {\n    modMessage: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                 text: \"hi\",\n                 to:\"12\"\n            }\n        }\n        throw new Error('divide by zero!');\n        return response;\n    }\n};\n const NotificationService = { };\nconst on = {};\nconst messageObj = new message({ on, MessageService,NotificationService });\nawait messageObj.modMessage(req, res);\n         // expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "7c423e3e-d23f-418a-b89e-0aa005b14b12",
                  "parentUUID": "65af90a3-cf08-48d3-9fb3-0fd534f4059a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8c56507-1155-4f98-8ed1-b7e16884a179",
                "d10d39d4-6c73-4241-8c83-9049b4c9d905",
                "332419c5-f8f0-441e-8fd1-263d0f6ab2bc",
                "6b9e4739-bee8-4bb3-a2e1-98de7309bea8",
                "7c423e3e-d23f-418a-b89e-0aa005b14b12"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "2258ef1c-fe13-4ba2-9e27-88d49fd465ba",
              "title": "create reply message",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\messageController.js",
              "file": "\\test\\controllers\\messageController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "message test create reply message 1) test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  \n    user: {},\n    comment: {},\n    post: {},\n    mentions:{}\n };\nconst MessageService = {\n    createReplyMessage: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                 text: \"hi\",\n                 to:\"12\"\n            }\n        }\n        return response;\n    }\n};\n \nconst on = {};\nconst messageObj = new message({ on, MessageService });\nawait messageObj.createReplyMessage(req, res);\n         // expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "a9f97a25-209d-44fc-a102-ccbb9aee8ab3",
                  "parentUUID": "2258ef1c-fe13-4ba2-9e27-88d49fd465ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test fail",
                  "fullTitle": "message test create reply message 2) test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {};\n\n \nconst on = {};\nconst messageObj = new message({ on, on });\nawait messageObj.createReplyMessage(req, res);\n         // expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "6b3c4927-3cb6-41a3-9410-090749cd09e5",
                  "parentUUID": "2258ef1c-fe13-4ba2-9e27-88d49fd465ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test fail",
                  "fullTitle": "message test create reply message 3) test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {user: {},\n    comment: {},\n    post: {}};\n\n \nconst on = {};\nconst messageObj = new message({ on, on });\nawait messageObj.createReplyMessage(req, res);\n         // expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "24c48166-cb62-46d6-bab8-2cd8479cee2e",
                  "parentUUID": "2258ef1c-fe13-4ba2-9e27-88d49fd465ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4) test exception",
                  "fullTitle": "message test create reply message 4) test exception",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  \n    user: {},\n    comment: {},\n    post: {},\n    mentions:{}\n };\nconst MessageService = {\n    createReplyMessage: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                 text: \"hi\",\n                 to:\"12\"\n            }\n        }\n        throw new Error('divide by zero!');\n        //return response;\n    }\n};\n \nconst on = {};\nconst messageObj = new message({ on, MessageService });\nawait messageObj.createReplyMessage(req, res);\n          //expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "3ca7b7b1-cb6b-4665-93dd-812e5cfd3b55",
                  "parentUUID": "2258ef1c-fe13-4ba2-9e27-88d49fd465ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a9f97a25-209d-44fc-a102-ccbb9aee8ab3",
                "6b3c4927-3cb6-41a3-9410-090749cd09e5",
                "24c48166-cb62-46d6-bab8-2cd8479cee2e",
                "3ca7b7b1-cb6b-4665-93dd-812e5cfd3b55"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "510d7bc2-bab6-4cce-8f29-2e26a16c22b3",
              "title": "reply",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\messageController.js",
              "file": "\\test\\controllers\\messageController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "message test reply 1) test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n    user: {\n        _id:\"\"\n    },\n    body: {\n        text:\"\"\n    },\n    params: {\n        parentMessageId:\"\"\n    }\n };\nconst MessageService = {\n    reply: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                 text: \"hi\",\n                 to:\"12\"\n            }\n        }\n        return response;\n    }\n};\n const NotificationService = {\n    getFirebaseToken: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                firebaseToken: \"638bed1001f496d7284c2832\"\n            }\n        }\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService,NotificationService });\nawait messageObj.reply(req, res);\n          expect(res.status).to.have.been.calledWith(200);",
                  "err": {},
                  "uuid": "facb30d4-1a76-4690-8b16-5bb70df3d640",
                  "parentUUID": "510d7bc2-bab6-4cce-8f29-2e26a16c22b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test bad request",
                  "fullTitle": "message test reply 2) test bad request",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {};\nconst MessageService = { };\n const NotificationService = { };\nconst on = {};\nconst messageObj = new message({ on, MessageService,NotificationService });\nawait messageObj.reply(req, res);\n          expect(res.status).to.have.been.calledWith(400);",
                  "err": {},
                  "uuid": "ec8dc26d-c462-4d3b-ad44-913e5f406310",
                  "parentUUID": "510d7bc2-bab6-4cce-8f29-2e26a16c22b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) message to reply on not found",
                  "fullTitle": "message test reply 3) message to reply on not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\n   const req = {\n    user: {\n        _id:\" \"\n    },\n    body: {\n        text:\" \"\n    },\n    params: {\n        parentMessageId:\" \"\n    }\n };\nconst MessageService = {\n    reply: async (id) => {\n        const response = {\n            success: false,\n            error:messageErrors.MESSAGE_NOT_FOUND\n        }\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService});\nawait messageObj.reply(req, res);\n   expect(res.status).to.have.been.calledWith(404);\n    expect(res.status(404).json).to.have.been.calledWith({\n    status: \"Not Found\",\nmessage: \"Message Not Found\",\n       \n})",
                  "err": {},
                  "uuid": "598fae5c-1c26-489a-8bf9-8aa45487053d",
                  "parentUUID": "510d7bc2-bab6-4cce-8f29-2e26a16c22b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4) message to reply on not found",
                  "fullTitle": "message test reply 4) message to reply on not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\n   const req = {\n    user: {\n        _id:\" \"\n    },\n    body: {\n        text:\" \"\n    },\n    params: {\n        parentMessageId:\" \"\n    }\n };\nconst MessageService = {\n    reply: async (id) => {\n        const response = {\n            success: false,\n            error:messageErrors.MESSAGE_NOT_FOUND_IN_INBOX\n        }\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService});\nawait messageObj.reply(req, res);\n   expect(res.status).to.have.been.calledWith(404);\n    expect(res.status(404).json).to.have.been.calledWith({\nstatus: \"Not Found\",\nmessage: \"Message Not Found In Your Inbox\",\n})",
                  "err": {},
                  "uuid": "e9b530ac-0571-479f-8c6f-5f291c54a856",
                  "parentUUID": "510d7bc2-bab6-4cce-8f29-2e26a16c22b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5) message to reply on not found",
                  "fullTitle": "message test reply 5) message to reply on not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\n   const req = {\n    user: {\n        _id:\" \"\n    },\n    body: {\n        text:\" \"\n    },\n    params: {\n        parentMessageId:\" \"\n    }\n };\nconst MessageService = {\n    reply: async (id) => {\n        const response = {\n            success: false,\n          \n        }\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService});\nawait messageObj.reply(req, res);\n   expect(res.status).to.have.been.calledWith(500);\n    expect(res.status(500).json).to.have.been.calledWith({\n    status: \"Internal server error\",\n    message: \"Internal server error\",\n})",
                  "err": {},
                  "uuid": "68a596d8-71ff-4d7f-bc23-29a8a8457b74",
                  "parentUUID": "510d7bc2-bab6-4cce-8f29-2e26a16c22b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "6) test bad request",
                  "fullTitle": "message test reply 6) test bad request",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req =\n{\n    \n    body: {\n        text:\" \"\n    },\n    params: {\n        parentMessageId:\" \"\n    }};\nconst MessageService = { };\n const NotificationService = { };\nconst on = {};\nconst messageObj = new message({ on, MessageService,NotificationService });\nawait messageObj.reply(req, res);\n          expect(res.status).to.have.been.calledWith(400);",
                  "err": {},
                  "uuid": "c1cd89f5-b4f4-49bb-b4f2-20986bb22b3b",
                  "parentUUID": "510d7bc2-bab6-4cce-8f29-2e26a16c22b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "7) test bad request",
                  "fullTitle": "message test reply 7) test bad request",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req =\n{\n    params: {\n        parentMessageId:\" \"\n    }};\nconst MessageService = { };\n const NotificationService = { };\nconst on = {};\nconst messageObj = new message({ on, MessageService,NotificationService });\nawait messageObj.reply(req, res);\n          expect(res.status).to.have.been.calledWith(400);",
                  "err": {},
                  "uuid": "eb362316-96b7-4ec0-98c2-e796e8b20e11",
                  "parentUUID": "510d7bc2-bab6-4cce-8f29-2e26a16c22b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "8) test bad request",
                  "fullTitle": "message test reply 8) test bad request",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req =\n{\n    user: {\n        _id:\" \"\n    },\n  };\nconst MessageService = { };\n const NotificationService = { };\nconst on = {};\nconst messageObj = new message({ on, MessageService,NotificationService });\nawait messageObj.reply(req, res);\n          expect(res.status).to.have.been.calledWith(400);",
                  "err": {},
                  "uuid": "4f54a258-f493-4750-8c39-72ea5ca4e1fe",
                  "parentUUID": "510d7bc2-bab6-4cce-8f29-2e26a16c22b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "9) test bad request",
                  "fullTitle": "message test reply 9) test bad request",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req =\n{\n   body: {\n        text:\" \"\n    },\n  };\nconst MessageService = { };\n const NotificationService = { };\nconst on = {};\nconst messageObj = new message({ on, MessageService,NotificationService });\nawait messageObj.reply(req, res);\n          expect(res.status).to.have.been.calledWith(400);",
                  "err": {},
                  "uuid": "4dfb737e-fee3-4d46-9acd-1cd408473966",
                  "parentUUID": "510d7bc2-bab6-4cce-8f29-2e26a16c22b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "10) test bad request",
                  "fullTitle": "message test reply 10) test bad request",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req =\n{\n    user: {\n        _id:\"\"\n    },\n   body: {\n        text:\" \"\n    },\n  };\nconst MessageService = { };\n const NotificationService = { };\nconst on = {};\nconst messageObj = new message({ on, MessageService,NotificationService });\nawait messageObj.reply(req, res);\n          expect(res.status).to.have.been.calledWith(400);",
                  "err": {},
                  "uuid": "ae287049-1dcb-473d-8602-8452c9906bc8",
                  "parentUUID": "510d7bc2-bab6-4cce-8f29-2e26a16c22b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "11) test bad request",
                  "fullTitle": "message test reply 11) test bad request",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req =\n{\n     user: {\n        _id:\" \"\n    },\n    params: {\n        parentMessageId:\" \"\n    }\n  };\nconst MessageService = { };\n const NotificationService = { };\nconst on = {};\nconst messageObj = new message({ on, MessageService,NotificationService });\nawait messageObj.reply(req, res);\n          expect(res.status).to.have.been.calledWith(400);",
                  "err": {},
                  "uuid": "a3ccd08e-798c-4c70-ad93-8eaa087a5257",
                  "parentUUID": "510d7bc2-bab6-4cce-8f29-2e26a16c22b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "12) test fail exception",
                  "fullTitle": "message test reply 12) test fail exception",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n    user: {\n        _id:\"\"\n    },\n    body: {\n        text:\"\"\n    },\n    params: {\n        parentMessageId:\"\"\n    }\n };\nconst MessageService = {\n    reply: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                 text: \"hi\",\n                 to:\"12\"\n            }\n        }\n        throw new Error('divide by zero!');\n        return response;\n    }\n};\n const NotificationService = {};\nconst on = {};\nconst messageObj = new message({ on, MessageService,NotificationService });\nawait messageObj.reply(req, res);\nexpect(res.status).to.have.been.calledWith(500);\n expect(res.status(500).json).to.have.been.calledWith({\n    status: \"fail\"    \n})",
                  "err": {},
                  "uuid": "e057a431-2b94-4f86-8fcb-7f05db0da991",
                  "parentUUID": "510d7bc2-bab6-4cce-8f29-2e26a16c22b3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "facb30d4-1a76-4690-8b16-5bb70df3d640",
                "ec8dc26d-c462-4d3b-ad44-913e5f406310",
                "598fae5c-1c26-489a-8bf9-8aa45487053d",
                "e9b530ac-0571-479f-8c6f-5f291c54a856",
                "68a596d8-71ff-4d7f-bc23-29a8a8457b74",
                "c1cd89f5-b4f4-49bb-b4f2-20986bb22b3b",
                "eb362316-96b7-4ec0-98c2-e796e8b20e11",
                "4f54a258-f493-4750-8c39-72ea5ca4e1fe",
                "4dfb737e-fee3-4d46-9acd-1cd408473966",
                "ae287049-1dcb-473d-8602-8452c9906bc8",
                "a3ccd08e-798c-4c70-ad93-8eaa087a5257",
                "e057a431-2b94-4f86-8fcb-7f05db0da991"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "c7934939-f3f1-4438-8e20-15e05c6e9e55",
              "title": "send message",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\messageController.js",
              "file": "\\test\\controllers\\messageController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "message test send message 1) test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n    user: {\n        _id:\" \"\n    },\n    body: {\n        text: \" \",\n        subject: \" \",\n        to:\" \"\n    }\n };\nconst MessageService = {\n    createMessage: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                 text: \"hi\",\n                 to:\"12\"\n            }\n        }\n        return response;\n    }\n};\n const NotificationService = {\n    getFirebaseToken: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                firebaseToken: \"638bed1001f496d7284c2832\"\n            }\n        }\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService,NotificationService });\nawait messageObj.sendMessage(req, res);\n          expect(res.status).to.have.been.calledWith(200);",
                  "err": {},
                  "uuid": "6f3eec35-9ffb-43de-a6fb-00d45d0b3a01",
                  "parentUUID": "c7934939-f3f1-4438-8e20-15e05c6e9e55",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test fail bad request",
                  "fullTitle": "message test send message 2) test fail bad request",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n    \n    body: {\n        text: \" \",\n        subject: \" \",\n        to:\" \"\n    }\n };\nconst MessageService = {};\n const NotificationService = {};\nconst on = {};\nconst messageObj = new message({ on, MessageService,NotificationService });\nawait messageObj.sendMessage(req, res);\n          expect(res.status).to.have.been.calledWith(400);",
                  "err": {},
                  "uuid": "b213a33b-7da6-4185-8a24-0166f3f3ad5b",
                  "parentUUID": "c7934939-f3f1-4438-8e20-15e05c6e9e55",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test lenght failed",
                  "fullTitle": "message test send message 3) test lenght failed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n    user: {\n        _id:\" \"\n    },\n    body: {\n        text: \" \",\n        subject: \"11111111111111111111111 \",\n        to:\" \"\n    }\n };\nconst MessageService = { };\n const NotificationService = { };\nconst on = {};\nconst messageObj = new message({ on, MessageService,NotificationService });\nawait messageObj.sendMessage(req, res);\n          expect(res.status).to.have.been.calledWith(400);\n           expect(res.status(400).json).to.have.been.calledWith({\nstatus: \"fail\",\n    message: \"Subject must have less or equal than 100 characters\",\n          \n})",
                  "err": {},
                  "uuid": "a3b27e27-66d0-4fb0-bf3e-e1e69ebbebdd",
                  "parentUUID": "c7934939-f3f1-4438-8e20-15e05c6e9e55",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4) test fail user not found",
                  "fullTitle": "message test send message 4) test fail user not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n    user: {\n        _id:\" \"\n    },\n    body: {\n        text: \" \",\n        subject: \" \",\n        to:\" \"\n    }\n };\nconst MessageService = {\n    createMessage: async (id) => {\n        const response = {\n            success: false,\n          error:userErrors.USER_NOT_FOUND\n        }\n        return response;\n    }\n};\n const NotificationService = {};\nconst on = {};\nconst messageObj = new message({ on, MessageService,NotificationService });\nawait messageObj.sendMessage(req, res);\n     expect(res.status).to.have.been.calledWith(404);\n      expect(res.status(404).json).to.have.been.calledWith({\n           status: \"Not Found\",\nmessage: \"User Not Found\",\n})",
                  "err": {},
                  "uuid": "687d9309-9de7-4fa5-88db-8838a433f475",
                  "parentUUID": "c7934939-f3f1-4438-8e20-15e05c6e9e55",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5) test fail internal",
                  "fullTitle": "message test send message 5) test fail internal",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n    user: {\n        _id:\" \"\n    },\n    body: {\n        text: \" \",\n        subject: \" \",\n        to:\" \"\n    }\n };\nconst MessageService = {\n    createMessage: async (id) => {\n        const response = {\n            success: false,\n         \n        }\n        return response;\n    }\n};\n const NotificationService = {};\nconst on = {};\nconst messageObj = new message({ on, MessageService,NotificationService });\nawait messageObj.sendMessage(req, res);\n     expect(res.status).to.have.been.calledWith(500);\n      expect(res.status(500).json).to.have.been.calledWith({\n    status: \"Internal server error\",\n     message: \"Internal server error\",\n})",
                  "err": {},
                  "uuid": "0ad310be-b867-465b-8576-3513cb39b699",
                  "parentUUID": "c7934939-f3f1-4438-8e20-15e05c6e9e55",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "6) test token ",
                  "fullTitle": "message test send message 6) test token ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n    user: {\n        _id:\" \"\n    },\n    body: {\n        text: \" \",\n        subject: \" \",\n        to:\" \"\n    }\n };\nconst MessageService = {\n    createMessage: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                 text: \"hi\",\n                 to:\"12\"\n            }\n        }\n        return response;\n    }\n};\n const NotificationService = {\n    getFirebaseToken: async (id) => {\n         const response = {\n             success: false,\n         }\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService,NotificationService });\nawait messageObj.sendMessage(req, res);\n          expect(res.status).to.have.been.calledWith(200);",
                  "err": {},
                  "uuid": "95b558a3-b471-459a-8c8c-0f15a520693c",
                  "parentUUID": "c7934939-f3f1-4438-8e20-15e05c6e9e55",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "7) test fail exception",
                  "fullTitle": "message test send message 7) test fail exception",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n    user: {\n        _id:\" \"\n    },\n    body: {\n        text: \" \",\n        subject: \" \",\n        to:\" \"\n    }\n };\nconst MessageService = {\n    createMessage: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                 text: \"hi\",\n                 to:\"12\"\n            }\n        }\n        throw new Error('divide by zero!');\n        return response;\n    }\n};\n const NotificationService = {\n    getFirebaseToken: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                firebaseToken: \"638bed1001f496d7284c2832\"\n            }\n        }\n        return response;\n    }\n};\nconst on = {};\nconst messageObj = new message({ on, MessageService,NotificationService });\nawait messageObj.sendMessage(req, res);\nexpect(res.status).to.have.been.calledWith(500);\n expect(res.status(500).json).to.have.been.calledWith({\n     status: \"fail\"\n})",
                  "err": {},
                  "uuid": "7b9714d0-6bdc-416e-8dbf-d6a4e3b03d77",
                  "parentUUID": "c7934939-f3f1-4438-8e20-15e05c6e9e55",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6f3eec35-9ffb-43de-a6fb-00d45d0b3a01",
                "b213a33b-7da6-4185-8a24-0166f3f3ad5b",
                "a3b27e27-66d0-4fb0-bf3e-e1e69ebbebdd",
                "687d9309-9de7-4fa5-88db-8838a433f475",
                "0ad310be-b867-465b-8576-3513cb39b699",
                "95b558a3-b471-459a-8c8c-0f15a520693c",
                "7b9714d0-6bdc-416e-8dbf-d6a4e3b03d77"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "75c99dd5-7e63-454a-8c6a-30c8f36d55d1",
          "title": "notification test",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\notificationController.js",
          "file": "\\test\\controllers\\notificationController.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "194c89fe-aa1c-478f-8b90-873ea7d9ce20",
              "title": "get notifications test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\notificationController.js",
              "file": "\\test\\controllers\\notificationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "notification test get notifications test 1) test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n    \n        // flairId: \"638bed1001f496d7284c2832\",\n        user: { _id: \"125\" }\n    \n};\nconst NotificationService = {\n    getAllNotifications: async (id) => {\n        const response = {\n            success: true,\n            data: [{\n                _id: \"638bed1001f496d7284c2832\"\n            }]\n        }\n        return response;\n    }\n};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.getAllNotifications(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(500).json).to.have.been.calledWith({\n    status: \"OK\",\n    data: [{\n        _id: \"638bed1001f496d7284c2832\",\n    }]\n})",
                  "err": {},
                  "uuid": "29316c5e-7901-459b-9c1b-c9d7cd5e4893",
                  "parentUUID": "194c89fe-aa1c-478f-8b90-873ea7d9ce20",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test failure",
                  "fullTitle": "notification test get notifications test 2) test failure",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    \n        user: { _id: \"125\" }\n    \n};\nconst NotificationService = {\n    getAllNotifications: async (id) => {\n        const response = {\n            success: false,\n        }\n        return response;\n    }\n};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.getAllNotifications(req, res);\nexpect(res.status).to.have.been.calledWith(500);\nexpect(res.status(500).json).to.have.been.calledWith({\n     status: \"Internal server error\",\n          message: \"Internal server error\",\n       \n})",
                  "err": {},
                  "uuid": "586dd80e-eaec-4bbf-a709-30f52f553500",
                  "parentUUID": "194c89fe-aa1c-478f-8b90-873ea7d9ce20",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test fail exception",
                  "fullTitle": "notification test get notifications test 3) test fail exception",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n    \n        // flairId: \"638bed1001f496d7284c2832\",\n        user: { _id: \"125\" }\n    \n};\nconst NotificationService = {\n    getAllNotifications: async (id) => {\n        const response = {\n            success: true,\n            data: [{\n                _id: \"638bed1001f496d7284c2832\"\n            }]\n    }\n    throw new Error('divide by zero!');\n        return response;\n    }\n};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.getAllNotifications(req, res);\nexpect(res.status).to.have.been.calledWith(500);",
                  "err": {},
                  "uuid": "c79c74ed-a67e-41b3-b9eb-09f74dcbfc59",
                  "parentUUID": "194c89fe-aa1c-478f-8b90-873ea7d9ce20",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "29316c5e-7901-459b-9c1b-c9d7cd5e4893",
                "586dd80e-eaec-4bbf-a709-30f52f553500",
                "c79c74ed-a67e-41b3-b9eb-09f74dcbfc59"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "4e469038-e823-417f-8a43-b5230464bfa3",
              "title": "mark all as read test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\notificationController.js",
              "file": "\\test\\controllers\\notificationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "notification test mark all as read test 1) test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n    \n        // flairId: \"638bed1001f496d7284c2832\",\n        user: { _id: \"125\" }\n    \n};\nconst NotificationService = {\n    markAllNotificationsAsRead: async (id) => {\n        const response = {\n            success: true\n        }\n        return response;\n    }\n};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.markAllNotificationsAsRead(req, res);\nexpect(res.status).to.have.been.calledWith(201);\n          expect(res.status(201).json).to.have.been.calledWith({});",
                  "err": {},
                  "uuid": "4ef428f1-30b6-4e6f-bcfd-c3e33d78e031",
                  "parentUUID": "4e469038-e823-417f-8a43-b5230464bfa3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test failure",
                  "fullTitle": "notification test mark all as read test 2) test failure",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n    \n        user: { _id: \"125\" }\n    \n};\nconst NotificationService = {\n    markAllNotificationsAsRead: async (id) => {\n        const response = {\n            success: false,\n        }\n        return response;\n    }\n};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.markAllNotificationsAsRead(req, res);\nexpect(res.status).to.have.been.calledWith(500);\nexpect(res.status(500).json).to.have.been.calledWith({\n     status: \"Internal server error\",\n          message: \"Internal server error\",\n       \n})",
                  "err": {},
                  "uuid": "a1b48636-dbd8-46e8-9532-20ea96adae61",
                  "parentUUID": "4e469038-e823-417f-8a43-b5230464bfa3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test fail exception",
                  "fullTitle": "notification test mark all as read test 3) test fail exception",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n    \n        // flairId: \"638bed1001f496d7284c2832\",\n        user: { _id: \"125\" }\n    \n};\nconst NotificationService = {\n    markAllNotificationsAsRead: async (id) => {\n        const response = {\n            success: true\n    }\n    throw new Error('divide by zero!');\n        return response;\n    }\n};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.markAllNotificationsAsRead(req, res);\nexpect(res.status).to.have.been.calledWith(500);\n          //expect(res.status(201).json).to.have.been.calledWith({});",
                  "err": {},
                  "uuid": "29ce9970-8929-4ffd-af04-0dc5f6cb367e",
                  "parentUUID": "4e469038-e823-417f-8a43-b5230464bfa3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4ef428f1-30b6-4e6f-bcfd-c3e33d78e031",
                "a1b48636-dbd8-46e8-9532-20ea96adae61",
                "29ce9970-8929-4ffd-af04-0dc5f6cb367e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "0a250ca3-f0a3-47a1-a20e-af5ffa8e54f5",
              "title": "mark one notification as read test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\notificationController.js",
              "file": "\\test\\controllers\\notificationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "notification test mark one notification as read test 1) test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  params: {\n      notificationId:\"123\"\n    },\n        // flairId: \"638bed1001f496d7284c2832\",\n        user: { _id: \"125\" }\n    \n};\nconst NotificationService = {\n    markNotificationAsRead: async (id) => {\n        const response = {\n            success: true\n        }\n        return response;\n    }\n};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.markNotificationAsRead(req, res);\n          expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "be4c91b7-19b5-4a6e-bfc5-57e2317e7040",
                  "parentUUID": "0a250ca3-f0a3-47a1-a20e-af5ffa8e54f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test failure not found",
                  "fullTitle": "notification test mark one notification as read test 2) test failure not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n params: {\n     notificationId:\"123\"\n   },\n       // flairId: \"638bed1001f496d7284c2832\",\n       user: { _id: \"125\" }\n   \n            };\n            const NotificationService = {\n   markNotificationAsRead: async (id) => {\n       const response = {\n         success: false,\n         error:notificationErrors.NOTIFICATION_NOT_FOUND\n       }\n       return response;\n   }\n            };\n            const on = {};\n            const notificationObj = new notification({ on, NotificationService });\n            await notificationObj.markNotificationAsRead(req, res);\n            expect(res.status).to.have.been.calledWith(404);\n            expect(res.status(404).json).to.have.been.calledWith({\n   message : \"Notification not found\",\n   status : \"Not Found\"\n            })",
                  "err": {},
                  "uuid": "e971320f-d78c-42da-87fc-aabef72954d8",
                  "parentUUID": "0a250ca3-f0a3-47a1-a20e-af5ffa8e54f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test failure internal",
                  "fullTitle": "notification test mark one notification as read test 3) test failure internal",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n params: {\n     notificationId:\"123\"\n   },\n       // flairId: \"638bed1001f496d7284c2832\",\n       user: { _id: \"125\" }\n   \n            };\n            const NotificationService = {\n   markNotificationAsRead: async (id) => {\n       const response = {\n         success: false,\n         error:notificationErrors.MONGO_ERR\n       }\n       return response;\n   }\n            };\n            const on = {};\n            const notificationObj = new notification({ on, NotificationService });\n            await notificationObj.markNotificationAsRead(req, res);\n            expect(res.status).to.have.been.calledWith(500);\n            expect(res.status(404).json).to.have.been.calledWith({\n    message : \"Internal server error\",\n            \n            status : \"Internal Server Error\"\n            })",
                  "err": {},
                  "uuid": "8c657002-9c22-4175-b1d4-9b96ed801a83",
                  "parentUUID": "0a250ca3-f0a3-47a1-a20e-af5ffa8e54f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4) test fail exception",
                  "fullTitle": "notification test mark one notification as read test 4) test fail exception",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  params: {\n      notificationId:\"123\"\n    },\n        // flairId: \"638bed1001f496d7284c2832\",\n        user: { _id: \"125\" }\n    \n};\nconst NotificationService = {\n    markNotificationAsRead: async (id) => {\n        const response = {\n            success: true\n    }\n    throw new Error('divide by zero!');\n        return response;\n    }\n};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.markNotificationAsRead(req, res);\n          expect(res.status).to.have.been.calledWith(500);",
                  "err": {},
                  "uuid": "c432296c-21ce-407a-a2e9-a7b3855adc8d",
                  "parentUUID": "0a250ca3-f0a3-47a1-a20e-af5ffa8e54f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be4c91b7-19b5-4a6e-bfc5-57e2317e7040",
                "e971320f-d78c-42da-87fc-aabef72954d8",
                "8c657002-9c22-4175-b1d4-9b96ed801a83",
                "c432296c-21ce-407a-a2e9-a7b3855adc8d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "aaec1ae2-fd54-4f74-9334-0cc6459c426d",
              "title": "hide one notification",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\notificationController.js",
              "file": "\\test\\controllers\\notificationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "notification test hide one notification 1) test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  params: {\n      notificationId:\"123\"\n    },\n        // flairId: \"638bed1001f496d7284c2832\",\n        user: { _id: \"125\" }\n    \n};\nconst NotificationService = {\n    hideNotification: async (id) => {\n        const response = {\n            success: true\n        }\n        return response;\n    }\n};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.hideNotification(req, res);\n            expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "d1bfdce7-ee69-4290-96ff-fd2f3ab6c375",
                  "parentUUID": "aaec1ae2-fd54-4f74-9334-0cc6459c426d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test failure not found",
                  "fullTitle": "notification test hide one notification 2) test failure not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n      notificationId:\"123\"\n    },\n        // flairId: \"638bed1001f496d7284c2832\",\n        user: { _id: \"125\" }\n    \n};\nconst NotificationService = {\n    hideNotification: async (id) => {\n        const response = {\n          success: false,\n          error:notificationErrors.NOTIFICATION_NOT_FOUND\n        }\n        return response;\n    }\n};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.hideNotification(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n    message : \"Notification not found\",\n    status : \"Not Found\"\n})",
                  "err": {},
                  "uuid": "f69c5a5a-2ead-42c8-a2ea-7ab15ad8c438",
                  "parentUUID": "aaec1ae2-fd54-4f74-9334-0cc6459c426d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test failure internal",
                  "fullTitle": "notification test hide one notification 3) test failure internal",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n      notificationId:\"123\"\n    },\n        // flairId: \"638bed1001f496d7284c2832\",\n        user: { _id: \"125\" }\n    \n};\nconst NotificationService = {\n    hideNotification: async (id) => {\n        const response = {\n          success: false,\n          error:notificationErrors.MONGO_ERR\n        }\n        return response;\n    }\n};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.hideNotification(req, res);\nexpect(res.status).to.have.been.calledWith(500);\nexpect(res.status(404).json).to.have.been.calledWith({\n    message : \"Internal server error\",\n\nstatus : \"Internal Server Error\"\n})",
                  "err": {},
                  "uuid": "54cf643e-76cd-454f-afee-82277497f4a6",
                  "parentUUID": "aaec1ae2-fd54-4f74-9334-0cc6459c426d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4) test fail exception",
                  "fullTitle": "notification test hide one notification 4) test fail exception",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  params: {\n      notificationId:\"123\"\n    },\n        // flairId: \"638bed1001f496d7284c2832\",\n        user: { _id: \"125\" }\n    \n};\nconst NotificationService = {\n    hideNotification: async (id) => {\n        const response = {\n            success: true\n    }\n    throw new Error('divide by zero!');\n        return response;\n    }\n};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.hideNotification(req, res);\n            expect(res.status).to.have.been.calledWith(500);",
                  "err": {},
                  "uuid": "f38cf250-3bdf-41ca-b34c-ef97ee7c6a06",
                  "parentUUID": "aaec1ae2-fd54-4f74-9334-0cc6459c426d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d1bfdce7-ee69-4290-96ff-fd2f3ab6c375",
                "f69c5a5a-2ead-42c8-a2ea-7ab15ad8c438",
                "54cf643e-76cd-454f-afee-82277497f4a6",
                "f38cf250-3bdf-41ca-b34c-ef97ee7c6a06"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "13f6b8a9-3086-4579-9951-9767c6aea3d4",
              "title": "add firebase token",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\notificationController.js",
              "file": "\\test\\controllers\\notificationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "notification test add firebase token 1) test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  body: {\n      token:\"123\"\n    },\n        // flairId: \"638bed1001f496d7284c2832\",\n        user: { _id: \"125\" }\n    \n};\nconst UserService = {\n    saveFirebaseToken: async (id) => {\n        const response = {\n            success: true\n        }\n        return response;\n    }\n};\nconst on = {};\nconst notificationObj = new notification({ UserService, on });\nawait notificationObj.addFirebaseToken(req, res);\n            expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "b9f07b49-a8ad-4df0-8581-7858f51c94e6",
                  "parentUUID": "13f6b8a9-3086-4579-9951-9767c6aea3d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test invalid request",
                  "fullTitle": "notification test add firebase token 2) test invalid request",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    \n    },\n  user: { _id: \"125\" }\n    \n};\nconst NotificationService = {};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.addFirebaseToken(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n    status: \"fail\",\n    message: \"Invalid request\"\n})",
                  "err": {},
                  "uuid": "fa6ce8c1-25be-46f8-ab85-1942544ba99f",
                  "parentUUID": "13f6b8a9-3086-4579-9951-9767c6aea3d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test failure internal",
                  "fullTitle": "notification test add firebase token 3) test failure internal",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n      token:\"123\"\n    },\n        // flairId: \"638bed1001f496d7284c2832\",\n        user: { _id: \"125\" }\n    \n};\nconst UserService = {\n    saveFirebaseToken: async (id) => {\n        const response = {\n          success: false\n        }\n        return response;\n    }\n};\nconst on = {};\nconst notificationObj = new notification({ UserService,on });\nawait notificationObj.addFirebaseToken(req, res);\nexpect(res.status).to.have.been.calledWith(500);\nexpect(res.status(500).json).to.have.been.calledWith({\n    message : \"Internal server error\",\n     statusCode: 500,\n    status : \"Internal Server Error\"\n})",
                  "err": {},
                  "uuid": "b44d241f-5886-45e9-8b85-8ae814cfa279",
                  "parentUUID": "13f6b8a9-3086-4579-9951-9767c6aea3d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4) test fail exception",
                  "fullTitle": "notification test add firebase token 4) test fail exception",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  body: {\n      token:\"123\"\n    },\n        // flairId: \"638bed1001f496d7284c2832\",\n        user: { _id: \"125\" }\n    \n};\nconst UserService = {\n    saveFirebaseToken: async (id) => {\n        const response = {\n            success: true\n    }\n    throw new Error('divide by zero!');\n        return response;\n    }\n};\nconst on = {};\nconst notificationObj = new notification({ UserService, on });\nawait notificationObj.addFirebaseToken(req, res);\n            expect(res.status).to.have.been.calledWith(500);",
                  "err": {},
                  "uuid": "27354d92-6453-4c50-bb1a-e61ce4da8642",
                  "parentUUID": "13f6b8a9-3086-4579-9951-9767c6aea3d4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b9f07b49-a8ad-4df0-8581-7858f51c94e6",
                "fa6ce8c1-25be-46f8-ab85-1942544ba99f",
                "b44d241f-5886-45e9-8b85-8ae814cfa279",
                "27354d92-6453-4c50-bb1a-e61ce4da8642"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "6161b9f9-1f1a-4e51-b293-ad7456ca0211",
              "title": "create reply notification",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\notificationController.js",
              "file": "\\test\\controllers\\notificationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success (postReply)",
                  "fullTitle": "notification test create reply notification 1) test success (postReply)",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  \n    user: {},\n    comment: {},\n  post: {author:{_id:\" \"}}\n    \n };\nconst NotificationService = {\n    addReplyNotification: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                 text: \"hi\",\n              to: \"12\",\n                 type:\"postReply\"\n            }\n        }\n        return response;\n  },\n   getFirebaseToken: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                firebaseToken: \"638bed1001f496d7284c2832\"\n            }\n        }\n        return response;\n    }\n  \n};\n \nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.addReplyNotification(req, res,next);\n         // expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "ed71af1a-8f69-4ac9-84ac-050339abfd7e",
                  "parentUUID": "6161b9f9-1f1a-4e51-b293-ad7456ca0211",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test success (commentReply)",
                  "fullTitle": "notification test create reply notification 2) test success (commentReply)",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  \n    user: {},\n    comment: {},\n  post: {author:{_id:\" \"}}\n    \n };\nconst NotificationService = {\n    addReplyNotification: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                 text: \"hi\",\n              to: \"12\",\n                 type:\"userMention\"\n            }\n        }\n        return response;\n  },\n   getFirebaseToken: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                firebaseToken: \"638bed1001f496d7284c2832\"\n            }\n        }\n        return response;\n    }\n  \n};\n \nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.addReplyNotification(req, res,next);\n         // expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "b6c93d52-e7c6-42a2-914d-a7aac1555b4e",
                  "parentUUID": "6161b9f9-1f1a-4e51-b293-ad7456ca0211",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test fail bad request",
                  "fullTitle": "notification test create reply notification 3) test fail bad request",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  \n    user: {},               \n };            \nconst on = {};\nconst notificationObj = new notification({ on, on });\nawait notificationObj.addReplyNotification(req, res,next);\n         // expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "c25f5e85-019c-4abe-9687-a4108fbbd32c",
                  "parentUUID": "6161b9f9-1f1a-4e51-b293-ad7456ca0211",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4) test fail bad request",
                  "fullTitle": "notification test create reply notification 4) test fail bad request",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  \n    comment: {},             \n };            \nconst on = {};\nconst notificationObj = new notification({ on, on });\nawait notificationObj.addReplyNotification(req, res,next);\n         // expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "2141ff9e-a320-40f5-b89f-eeb2e09b2014",
                  "parentUUID": "6161b9f9-1f1a-4e51-b293-ad7456ca0211",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5) test fail bad request",
                  "fullTitle": "notification test create reply notification 5) test fail bad request",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  \n     post: {author:{_id:\" \"}}           \n };            \nconst on = {};\nconst notificationObj = new notification({ on, on,next });\nawait notificationObj.addReplyNotification(req, res);\n         // expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "9dc2d263-01e1-4c46-98bb-c9837d5e8208",
                  "parentUUID": "6161b9f9-1f1a-4e51-b293-ad7456ca0211",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "6) test fail in reply notification creation",
                  "fullTitle": "notification test create reply notification 6) test fail in reply notification creation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  \n    user: {},\n    comment: {},\n  post: {author:{_id:\" \"}}\n    \n };\nconst NotificationService = {\n    addReplyNotification: async (id) => {\n        const response = {\n            success: false,\n           \n        }\n        return response;\n  }\n  \n};\n \nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.addReplyNotification(req, res,next);\n         // expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "205dafcf-ea1b-40c3-a3f5-e258d5e7b06d",
                  "parentUUID": "6161b9f9-1f1a-4e51-b293-ad7456ca0211",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "7) test fail in token ",
                  "fullTitle": "notification test create reply notification 7) test fail in token ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  \n    user: {},\n    comment: {},\n post: {author:{_id:\" \"}}\n    \n };\nconst NotificationService = {\n    addReplyNotification: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                 text: \"hi\",\n              to: \"12\",\n                 type:\"postReply\"\n            }\n        }\n        return response;\n  },\n   getFirebaseToken: async (id) => {\n        const response = {\n            success: false,\n            \n        }\n        return response;\n    }\n  \n};\n \nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.addReplyNotification(req, res,next);\n         // expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "b0f0e1d6-6a85-4417-a184-d85acc5d12c5",
                  "parentUUID": "6161b9f9-1f1a-4e51-b293-ad7456ca0211",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "8) test mention case",
                  "fullTitle": "notification test create reply notification 8) test mention case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  \n    user: {},\n    comment: {},\n  post: {author:{_id:\" \"}},\n  mentions:{}\n    \n };\nconst NotificationService = {\n    addReplyNotification: async (id) => {\n        const response = {\n            success: false,\n            data: {\n                 text: \"hi\",\n              to: \"12\",\n                 type:\"postReply\"\n            }\n        }\n        return response;\n  },\n   getFirebaseToken: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                firebaseToken: \"638bed1001f496d7284c2832\"\n            }\n        }\n        return response;\n    }\n  \n};\n \nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\n       notificationObj.sendMentions = async () => { return; };\n       await notificationObj.addReplyNotification(req, res,next);\n         // expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "20535f92-1bdd-4295-b4c8-25c130f2e915",
                  "parentUUID": "6161b9f9-1f1a-4e51-b293-ad7456ca0211",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "9) test fail exception",
                  "fullTitle": "notification test create reply notification 9) test fail exception",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  \n    user: {},\n    comment: {},\n post: {author:{_id:\" \"}},\n  mentions:{}\n    \n };\nconst NotificationService = {\n    addReplyNotification: async (id) => {\n        const response = {\n            success: false,\n            data: {\n                 text: \"hi\",\n              to: \"12\",\n                 type:\"postReply\"\n            }\n    }\n    throw new Error('divide by zero!');\n        return response;\n  }\n};\n \nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\n       notificationObj.sendMentions = async () => { return; };\n       await notificationObj.addReplyNotification(req, res,next);\n         // expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "1728a69d-c4d4-443c-909c-1590a07cc4dc",
                  "parentUUID": "6161b9f9-1f1a-4e51-b293-ad7456ca0211",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "10) test fail bad request",
                  "fullTitle": "notification test create reply notification 10) test fail bad request",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  comment:{},\n     post: {}            \n };            \nconst on = {};\nconst notificationObj = new notification({ on, on });\nawait notificationObj.addReplyNotification(req, res);\n         // expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "260320aa-e57a-4203-aeca-84f564997642",
                  "parentUUID": "6161b9f9-1f1a-4e51-b293-ad7456ca0211",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "11) test fail bad request",
                  "fullTitle": "notification test create reply notification 11) test fail bad request",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  user:{},\n     post: {}            \n };            \nconst on = {};\nconst notificationObj = new notification({ on, on });\nawait notificationObj.addReplyNotification(req, res);\n         // expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "1c72ef2e-16ad-47ac-8f94-deff2e6ad317",
                  "parentUUID": "6161b9f9-1f1a-4e51-b293-ad7456ca0211",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "12) test fail bad request",
                  "fullTitle": "notification test create reply notification 12) test fail bad request",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  user:{},\n     comment: {}            \n };            \nconst on = {};\nconst notificationObj = new notification({ on, on });\nawait notificationObj.addReplyNotification(req, res);\n         // expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "d0df39ea-56c4-4526-bc40-7cab2ebe0ff0",
                  "parentUUID": "6161b9f9-1f1a-4e51-b293-ad7456ca0211",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "13) test fail bad request",
                  "fullTitle": "notification test create reply notification 13) test fail bad request",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n             \n };            \nconst on = {};\nconst notificationObj = new notification({ on, on });\nawait notificationObj.addReplyNotification(req, res);\n         // expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "3ed6fde2-3e39-4d07-b171-068c9f212357",
                  "parentUUID": "6161b9f9-1f1a-4e51-b293-ad7456ca0211",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "14) test success not post or comment reply",
                  "fullTitle": "notification test create reply notification 14) test success not post or comment reply",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  \n    user: {},\n    comment: {},\n  post: {author:{_id:\" \"}}\n    \n };\nconst NotificationService = {\n    addReplyNotification: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                 text: \"hi\",\n              to: \"12\",\n                 type:\"postReply\"\n            }\n        }\n        return response;\n  },\n   getFirebaseToken: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                firebaseToken: \"638bed1001f496d7284c2832\"\n            }\n        }\n        return response;\n    }\n  \n};\n \nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.addReplyNotification(req, res,next);\n         // expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "c936a2e3-05e8-4272-92fd-46a27b0d2f78",
                  "parentUUID": "6161b9f9-1f1a-4e51-b293-ad7456ca0211",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "15) test fail in token ",
                  "fullTitle": "notification test create reply notification 15) test fail in token ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  \n    user: {},\n    comment: {},\n  post: {author:{_id:\" \"}},\n  mentions:{}\n    \n };\nconst NotificationService = {\n    addReplyNotification: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                 text: \"hi\",\n              to: \"12\",\n                 type:\"postReply\"\n            }\n        }\n        return response;\n  },\n   getFirebaseToken: async (id) => {\n        const response = {\n            success: false,\n            \n        }\n        return response;\n    }\n  \n};\n \nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\n  notificationObj.sendMentions = async () => { return; };\nawait notificationObj.addReplyNotification(req, res,next);\n         // expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "4a5e54e2-d147-4d73-b837-d94f2192f1d2",
                  "parentUUID": "6161b9f9-1f1a-4e51-b293-ad7456ca0211",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ed71af1a-8f69-4ac9-84ac-050339abfd7e",
                "b6c93d52-e7c6-42a2-914d-a7aac1555b4e",
                "c25f5e85-019c-4abe-9687-a4108fbbd32c",
                "2141ff9e-a320-40f5-b89f-eeb2e09b2014",
                "9dc2d263-01e1-4c46-98bb-c9837d5e8208",
                "205dafcf-ea1b-40c3-a3f5-e258d5e7b06d",
                "b0f0e1d6-6a85-4417-a184-d85acc5d12c5",
                "20535f92-1bdd-4295-b4c8-25c130f2e915",
                "1728a69d-c4d4-443c-909c-1590a07cc4dc",
                "260320aa-e57a-4203-aeca-84f564997642",
                "1c72ef2e-16ad-47ac-8f94-deff2e6ad317",
                "d0df39ea-56c4-4526-bc40-7cab2ebe0ff0",
                "3ed6fde2-3e39-4d07-b171-068c9f212357",
                "c936a2e3-05e8-4272-92fd-46a27b0d2f78",
                "4a5e54e2-d147-4d73-b837-d94f2192f1d2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "df1015c4-5eb8-4153-a485-9eaee7048d98",
              "title": "add follow notification",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\notificationController.js",
              "file": "\\test\\controllers\\notificationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "notification test add follow notification 1) test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  follower: {_id:\"1\"},\n  followed: {_id:\" 2\"  }\n    \n};\nconst NotificationService = {\n    addFollowNotification: async (id) => {\n        const response = {\n            success: true\n        }\n        return response;\n    },\n     getFirebaseToken: async (id) => {\n      const response = {\n          success: true,\n          data: {\n              firebaseToken: \"638bed1001f496d7284c2832\"\n          }\n      }\n      return response;\n  }\n\n};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.addFollowNotification(req, res);\n            //expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "755cefcc-01fe-43e1-882f-c51c36e33fce",
                  "parentUUID": "df1015c4-5eb8-4153-a485-9eaee7048d98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test bad request",
                  "fullTitle": "notification test add follow notification 2) test bad request",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  \n  followed: {_id:\" 2\"  }\n    \n};\nconst NotificationService = {};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.addFollowNotification(req, res);\n            //expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "8bbeea7f-03e6-4666-93c9-84a0446a3687",
                  "parentUUID": "df1015c4-5eb8-4153-a485-9eaee7048d98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test bad request",
                  "fullTitle": "notification test add follow notification 3) test bad request",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  follower: {_id:\"1\"},\n    \n};\nconst NotificationService = {};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.addFollowNotification(req, res);\n            //expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "12d217de-44ee-4667-8691-0b1e58f7408f",
                  "parentUUID": "df1015c4-5eb8-4153-a485-9eaee7048d98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4) test bad request",
                  "fullTitle": "notification test add follow notification 4) test bad request",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {};\nconst NotificationService = {};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.addFollowNotification(req, res);\n            //expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "69e20a4b-11c4-44e6-ae51-03c253e39193",
                  "parentUUID": "df1015c4-5eb8-4153-a485-9eaee7048d98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5) test fail in notification creation",
                  "fullTitle": "notification test add follow notification 5) test fail in notification creation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  follower: {_id:\"1\"},\n  followed: {_id:\" 2\"  }\n    \n};\nconst NotificationService = {\n    addFollowNotification: async (id) => {\n        const response = {\n            success: false\n        }\n        return response;\n    }};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.addFollowNotification(req, res);\n            //expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "b29df198-ef9e-4723-ad40-1503d943569b",
                  "parentUUID": "df1015c4-5eb8-4153-a485-9eaee7048d98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "6) test fail in getting token",
                  "fullTitle": "notification test add follow notification 6) test fail in getting token",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  follower: {_id:\"1\"},\n  followed: {_id:\" 2\"  }\n    \n};\nconst NotificationService = {\n    addFollowNotification: async (id) => {\n        const response = {\n            success: true\n        }\n        return response;\n    },\n     getFirebaseToken: async (id) => {\n      const response = {\n          success: false,\n        }\n      return response;\n  }\n\n};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.addFollowNotification(req, res);\n            //expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "413a1bd9-51ed-4faf-afbe-a3c0ecdffff5",
                  "parentUUID": "df1015c4-5eb8-4153-a485-9eaee7048d98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "7) test exception",
                  "fullTitle": "notification test add follow notification 7) test exception",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  follower: {_id:\"1\"},\n  followed: {_id:\" 2\"  }\n    \n};\nconst NotificationService = {\n    addFollowNotification: async (id) => {\n        const response = {\n            success: true\n        }\nthrow new Error('divide by zero!');\n        return response;\n        \n    },\n     getFirebaseToken: async (id) => {\n      const response = {\n          success: true,\n          data: {\n              firebaseToken: \"638bed1001f496d7284c2832\"\n          }\n      }\n      return response;\n  }\n\n};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.addFollowNotification(req, res);\n            //expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "0aecc2b0-0511-4411-bc82-5abb7dc2181a",
                  "parentUUID": "df1015c4-5eb8-4153-a485-9eaee7048d98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "8) test exception",
                  "fullTitle": "notification test add follow notification 8) test exception",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const FCM = ()=>{ return \"b\" };\nconst req = {\n  follower: {_id:\"1\"},\n  followed: {_id:\" 2\"  }\n    \n};\nconst NotificationService = {\n    addFollowNotification: async (id) => {\n        const response = {\n            success: true\n        }\n        return response;\n        \n    },\n     getFirebaseToken: async (id) => {\n      const response = {\n          success: true,\n          data: {\n              firebaseToken: \"638bed1001f496d7284c2832\"\n          }\n      }\n      throw new Error('divide by zero!');\n      return response;\n  }\n\n};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.addFollowNotification(req, res);\n            //expect(res.status).to.have.been.calledWith(201);",
                  "err": {},
                  "uuid": "136718b6-7d43-489f-b2a1-13ee82e3869b",
                  "parentUUID": "df1015c4-5eb8-4153-a485-9eaee7048d98",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "755cefcc-01fe-43e1-882f-c51c36e33fce",
                "8bbeea7f-03e6-4666-93c9-84a0446a3687",
                "12d217de-44ee-4667-8691-0b1e58f7408f",
                "69e20a4b-11c4-44e6-ae51-03c253e39193",
                "b29df198-ef9e-4723-ad40-1503d943569b",
                "413a1bd9-51ed-4faf-afbe-a3c0ecdffff5",
                "0aecc2b0-0511-4411-bc82-5abb7dc2181a",
                "136718b6-7d43-489f-b2a1-13ee82e3869b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "53b8b9e9-4a25-418e-a16b-423ae37e00c7",
              "title": "send mentions",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\notificationController.js",
              "file": "\\test\\controllers\\notificationController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "notification test send mentions 1) test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n        user: { _id: \"125\" }\n    \n};\nconst user={\n    _id:\" \"\n};\n const mentions=[\n   { userId:\"12\"}\n           ] ;\nconst NotificationService = {\n    sendMentions: async (id) => {\n        const response = {\n            success: true,\n            data:[\n                {}]\n        }\n        return response;\n    },\n      getFirebaseToken: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                firebaseToken: \"638bed1001f496d7284c2832\"\n            }\n        }\n        return response;\n    }\n  \n};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.sendMentions(user,on,on, mentions);",
                  "err": {},
                  "uuid": "990eee51-b1b8-4c7b-9f8a-8764a08c6757",
                  "parentUUID": "53b8b9e9-4a25-418e-a16b-423ae37e00c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test no notifiaction",
                  "fullTitle": "notification test send mentions 2) test no notifiaction",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n        user: { _id: \"125\" }\n    \n};\nconst user={\n    _id:\" \"\n};\n const mentions=[\n   { userId:\"12\"}\n           ] ;\nconst NotificationService = {\n    sendMentions: async (id) => {\n        const response = {\n            success: false,\n           \n        }\n        return response;\n    }\n  \n};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.sendMentions(user,on,on, mentions);",
                  "err": {},
                  "uuid": "640f1a75-ffb9-4e61-be44-227216c1707c",
                  "parentUUID": "53b8b9e9-4a25-418e-a16b-423ae37e00c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test no notifications existing",
                  "fullTitle": "notification test send mentions 3) test no notifications existing",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n        user: { _id: \"125\" }\n    \n};\nconst user={\n    _id:\" \"\n};\n const mentions=[\n   { userId:\"12\"}\n           ] ;\nconst NotificationService = {\n    sendMentions: async (id) => {\n        const response = {\n            success: true,\n            data:[]\n        }\n        return response;\n    }\n  \n};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.sendMentions(user,on,on, mentions);",
                  "err": {},
                  "uuid": "fde5b418-68d6-4adf-b03a-3a3b68c5ea26",
                  "parentUUID": "53b8b9e9-4a25-418e-a16b-423ae37e00c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4) test same id and success ",
                  "fullTitle": "notification test send mentions 4) test same id and success ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n        user: { _id: \"125\" }\n    \n};\nconst user={\n    _id:\"12\"\n}\nconst mentions=[\n   { userId:\"12\"}\n           ] ;\nconst NotificationService = {\n    sendMentions: async (id) => {\n        const response = {\n            success: true,\n            data:[\n                {}]\n        }\n        return response;\n    },\n      getFirebaseToken: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                firebaseToken: \"638bed1001f496d7284c2832\"\n            }\n        }\n        return response;\n    }\n  \n};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.sendMentions(user,on,on, mentions);",
                  "err": {},
                  "uuid": "ea2ad7b1-2db0-415a-98a6-427d50e1a743",
                  "parentUUID": "53b8b9e9-4a25-418e-a16b-423ae37e00c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5) test defferent id and success ",
                  "fullTitle": "notification test send mentions 5) test defferent id and success ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n        user: { _id: \"125\" }\n    \n};\nconst user={\n    _id:\"124\"\n}\nconst mentions=[\n   { userId:\"12\"}\n           ] ;\nconst NotificationService = {\n    sendMentions: async (id) => {\n        const response = {\n            success: true,\n            data:[\n                {}\n               ]\n        }\n        return response;\n    },\n      getFirebaseToken: async (id) => {\n        const response = {\n            success: true,\n            data: {\n                firebaseToken: \"638bed1001f496d7284c2832\"\n            }\n        }\n        return response;\n    }\n  \n};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.sendMentions(user,on,on, mentions);",
                  "err": {},
                  "uuid": "197e67a7-7545-4c3b-b614-564536e68b9a",
                  "parentUUID": "53b8b9e9-4a25-418e-a16b-423ae37e00c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "6) test different id and fail",
                  "fullTitle": "notification test send mentions 6) test different id and fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n        user: { _id: \"125\" }\n    \n};\nconst user={\n    _id:\"132\"\n}\nconst mentions=[\n   { userId:\"12\"}\n           ] ;\nconst NotificationService = {\n    sendMentions: async (id) => {\n        const response = {\n            success: true,\n            data:[\n                {},\n               ]\n        }\n        return response;\n    },\n      getFirebaseToken: async (id) => {\n        const response = {\n            success: false\n        }\n        return response;\n    }\n  \n};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.sendMentions(user,on,on, mentions);",
                  "err": {},
                  "uuid": "5cc8feb1-6769-4a07-b728-140f508a37ae",
                  "parentUUID": "53b8b9e9-4a25-418e-a16b-423ae37e00c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "7) test fail exception",
                  "fullTitle": "notification test send mentions 7) test fail exception",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n        user: { _id: \"125\" }\n    \n};\nconst user={\n    _id:\"132\"\n}\nconst mentions=[\n   { userId:\"12\"}\n           ] ;\nconst NotificationService = {\n    sendMentions: async (id) => {\n        const response = {\n            success: true,\n            data:[\n                {},\n               ]\n        }\n        return response;\n    },\n      getFirebaseToken: async (id) => {\n        const response = {\n            success: false\n        }\n        throw new Error('divide by zero!');\n        return response;\n    }\n  \n};\nconst on = {};\nconst notificationObj = new notification({ on, NotificationService });\nawait notificationObj.sendMentions(user,on,on, mentions);",
                  "err": {},
                  "uuid": "a3f4520a-74b3-4ff3-8d10-9712c6d9c65b",
                  "parentUUID": "53b8b9e9-4a25-418e-a16b-423ae37e00c7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "990eee51-b1b8-4c7b-9f8a-8764a08c6757",
                "640f1a75-ffb9-4e61-be44-227216c1707c",
                "fde5b418-68d6-4adf-b03a-3a3b68c5ea26",
                "ea2ad7b1-2db0-415a-98a6-427d50e1a743",
                "197e67a7-7545-4c3b-b614-564536e68b9a",
                "5cc8feb1-6769-4a07-b728-140f508a37ae",
                "a3f4520a-74b3-4ff3-8d10-9712c6d9c65b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "a3aca677-d7ee-4a65-a368-1b1d9702de4f",
          "title": "Post Controller Test",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
          "file": "\\test\\controllers\\postController.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6619938c-5522-4a02-9970-4ad042250be6",
              "title": "userPosts Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
              "file": "\\test\\controllers\\postController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Post Controller Test userPosts Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    userName: \"Ahmed\",\n  },\n  query: {\n    sort: \"New\",\n    limit: -1,\n    page:-1\n  },\n};\nconst UserService = {\n  getUserByName: async (userName, dummy) => {\n    return {\n      success: true,\n      data: {\n        _id: \"2\",\n      },\n    };\n  },\n  checkBlockStatus: async (me, user) => {\n    return false;\n  },\n};\nconst PostService = {\n  getUserPosts: async (userid, sorttype) => {\n    let posts = [\n      {\n        _id: \"637e7497b207b89c889ac1d6\",\n        owner: \"637e7493b207b89c889ac1c4\",\n        ownerType: \"User\",\n        author: \"637e7493b207b89c889ac1c4\",\n        replies: [],\n        title: \"First Post\",\n        kind: \"self\",\n        text: \"this is my first post on NONLEGIT\",\n        images: [],\n        createdAt: \"2022-11-23T19:29:21.916Z\",\n        locked: false,\n        isDeleted: false,\n        sendReplies: true,\n        nsfw: false,\n        spoiler: false,\n        votes: 2,\n        views: 0,\n        commentCount: 0,\n        shareCount: 0,\n        suggestedSort: \"top\",\n        scheduled: false,\n        postVoteStatus: \"1\",\n        isSaved: false,\n        isHidden: false,\n        name: \"Nour\",\n      },\n    ];\n    return posts;\n  },\n  setVotePostStatus: (me, posts) => {\n    return posts;\n  },\n  setSavedPostStatus: (me, posts) => {\n    return posts;\n  },\n  setHiddenPostStatus: (me, posts) => {\n    return posts;\n  },\n  setPostOwnerData: (posts) => {\n    return posts;\n  },\n  removeHiddenPosts: (me, posts) => {\n    return posts;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.userPosts(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  posts: [\n    {\n      _id: \"637e7497b207b89c889ac1d6\",\n      owner: \"637e7493b207b89c889ac1c4\",\n      ownerType: \"User\",\n      author: \"637e7493b207b89c889ac1c4\",\n      replies: [],\n      title: \"First Post\",\n      kind: \"self\",\n      text: \"this is my first post on NONLEGIT\",\n      images: [],\n      createdAt: \"2022-11-23T19:29:21.916Z\",\n      locked: false,\n      isDeleted: false,\n      sendReplies: true,\n      nsfw: false,\n      spoiler: false,\n      votes: 2,\n      views: 0,\n      commentCount: 0,\n      shareCount: 0,\n      suggestedSort: \"top\",\n      scheduled: false,\n      postVoteStatus: \"1\",\n      isSaved: false,\n      isHidden: false,\n      name: \"Nour\",\n    },\n  ],\n});",
                  "err": {},
                  "uuid": "13eb81ea-f4a4-4709-9d58-d09cbc2cb047",
                  "parentUUID": "6619938c-5522-4a02-9970-4ad042250be6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test fail",
                  "fullTitle": "Post Controller Test userPosts Test second test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {},\n  query: {\n    sortType: \"New\",\n  },\n};\nconst UserService = {\n  getUserByName: async (userName, dummy) => {\n    return {\n      success: true,\n      data: {\n        _id: \"2\",\n      },\n    };\n  },\n};\nconst PostService = {};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.userPosts(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Provide userName \",\n});",
                  "err": {},
                  "uuid": "f08f4b6a-5f8f-4739-8179-a9cc21174240",
                  "parentUUID": "6619938c-5522-4a02-9970-4ad042250be6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "third test fail",
                  "fullTitle": "Post Controller Test userPosts Test third test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    userName: \"ahmed\",\n  },\n  query: {\n    sortType: \"New\",\n  },\n};\nconst UserService = {\n  getUserByName: async (userName, dummy) => {\n    return {\n      success: false,\n    };\n  },\n};\nconst PostService = {};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.userPosts(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"User Not Found\",\n});",
                  "err": {},
                  "uuid": "54685eb3-09b5-41e9-8420-585cf727df9a",
                  "parentUUID": "6619938c-5522-4a02-9970-4ad042250be6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test fail",
                  "fullTitle": "Post Controller Test userPosts Test fourth test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    userName: \"ahmed\",\n  },\n  query: {\n    sortType: \"New\",\n  },\n};\nconst UserService = {\n  getUserByName: async (userName, dummy) => {\n    return {\n      success: true,\n      data: {\n        _id: \"2\",\n      },\n    };\n  },\n  checkBlockStatus: async (me, user) => {\n    return true;\n  },\n};\nconst PostService = {};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.userPosts(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  posts: [],\n});",
                  "err": {},
                  "uuid": "ede34877-9685-4055-b073-0a51917de1ff",
                  "parentUUID": "6619938c-5522-4a02-9970-4ad042250be6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "13eb81ea-f4a4-4709-9d58-d09cbc2cb047",
                "f08f4b6a-5f8f-4739-8179-a9cc21174240",
                "54685eb3-09b5-41e9-8420-585cf727df9a",
                "ede34877-9685-4055-b073-0a51917de1ff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "7048f017-8b4e-4ca3-a463-ad29edf3e164",
              "title": "getSavedPosts Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
              "file": "\\test\\controllers\\postController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Post Controller Test getSavedPosts Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n    saved: [\n      {\n        _id: \"637e7497b207b89c889ac1d6\",\n        owner: \"637e7493b207b89c889ac1c4\",\n        ownerType: \"User\",\n        author: \"637e7493b207b89c889ac1c4\",\n        name: \"Nour\",\n      },\n    ],\n    savedComments: [\n      {\n        _id: \"637e7497b207b89c889ac1d6\",\n        owner: \"637e7493b207b89c889ac1c4\",\n        ownerType: \"User\",\n        author: \"637e7493b207b89c889ac1c4\",\n        name: \"Nour\",\n      },\n    ],\n    populate: async (saved, dummy) => {\n      return [];\n    },\n  },\n  params: {\n    userName: \"Ahmed\",\n  },\n  query: {\n    sortType: \"New\",\n  },\n};\nconst UserService = {\n  getUserByName: async (userName, dummy) => {\n    return {\n      success: true,\n      data: {\n        _id: \"2\",\n      },\n    };\n  },\n};\nconst PostService = {\n  setVoteStatus: (me, posts) => {\n    return posts;\n  },\n};\nconst CommentService = {\n  setVoteStatus: (me, posts) => {\n    return posts;\n  },\n};\nconst authObj = new auth({ PostService, UserService, CommentService });\nawait authObj.getSavedPosts(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  savedPosts: [\n    {\n      _id: \"637e7497b207b89c889ac1d6\",\n      owner: \"637e7493b207b89c889ac1c4\",\n      ownerType: \"User\",\n      author: \"637e7493b207b89c889ac1c4\",\n      name: \"Nour\",\n    },\n  ],\n  savedComments: [\n    {\n      _id: \"637e7497b207b89c889ac1d6\",\n      owner: \"637e7493b207b89c889ac1c4\",\n      ownerType: \"User\",\n      author: \"637e7493b207b89c889ac1c4\",\n      name: \"Nour\",\n    },\n  ],\n});",
                  "err": {},
                  "uuid": "ee9fbc9c-d9cd-4eaf-848c-e283c7f5d45c",
                  "parentUUID": "7048f017-8b4e-4ca3-a463-ad29edf3e164",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ee9fbc9c-d9cd-4eaf-848c-e283c7f5d45c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "a21a87eb-e0cf-4484-9213-6dd64b788f6a",
              "title": "getHiddenPosts Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
              "file": "\\test\\controllers\\postController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Post Controller Test getHiddenPosts Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n    hidden: [\n      {\n        _id: \"637e7497b207b89c889ac1d6\",\n        owner: \"637e7493b207b89c889ac1c4\",\n        ownerType: \"User\",\n        author: \"637e7493b207b89c889ac1c4\",\n        replies: [],\n        title: \"First Post\",\n        kind: \"self\",\n        text: \"this is my first post on NONLEGIT\",\n        images: [],\n        createdAt: \"2022-11-23T19:29:21.916Z\",\n        locked: false,\n        isDeleted: false,\n        sendReplies: true,\n        nsfw: false,\n        spoiler: false,\n        votes: 2,\n        views: 0,\n        commentCount: 0,\n        shareCount: 0,\n        suggestedSort: \"top\",\n        scheduled: false,\n        postVoteStatus: \"1\",\n        isSaved: false,\n        isHidden: true,\n        name: \"Nour\",\n      },\n    ],\n    populate: async (saved, dummy) => {\n      return [];\n    },\n  },\n  params: {\n    userName: \"Ahmed\",\n  },\n  query: {\n    sortType: \"New\",\n  },\n};\nconst UserService = {\n  getUserByName: async (userName, dummy) => {\n    return {\n      success: true,\n      data: {\n        _id: \"2\",\n      },\n    };\n  },\n};\nconst PostService = {\n  setVotePostStatus: (me, posts) => {\n    return posts;\n  },\n  removeHiddenPosts: (me, posts) => {\n    return posts;\n  },\n  setPostOwnerData: (posts) => {\n    return posts;\n  },\n  setSavedPostStatus: (me, posts) => {\n    return posts;\n  },\n  setHiddenPostStatus: (me, posts) => {\n    return posts;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.getHiddenPosts(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  posts: [\n    {\n      _id: \"637e7497b207b89c889ac1d6\",\n      owner: \"637e7493b207b89c889ac1c4\",\n      ownerType: \"User\",\n      author: \"637e7493b207b89c889ac1c4\",\n      replies: [],\n      title: \"First Post\",\n      kind: \"self\",\n      text: \"this is my first post on NONLEGIT\",\n      images: [],\n      createdAt: \"2022-11-23T19:29:21.916Z\",\n      locked: false,\n      isDeleted: false,\n      sendReplies: true,\n      nsfw: false,\n      spoiler: false,\n      votes: 2,\n      views: 0,\n      commentCount: 0,\n      shareCount: 0,\n      suggestedSort: \"top\",\n      scheduled: false,\n      postVoteStatus: \"1\",\n      isSaved: false,\n      isHidden: true,\n      name: \"Nour\",\n    },\n  ],\n});",
                  "err": {},
                  "uuid": "a6016710-5dd8-419a-9f91-e2eb50d4aaa9",
                  "parentUUID": "a21a87eb-e0cf-4484-9213-6dd64b788f6a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a6016710-5dd8-419a-9f91-e2eb50d4aaa9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "f5cbcb9d-fd99-4e5c-9112-b0389b37f2aa",
              "title": "userUpvotedPosts Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
              "file": "\\test\\controllers\\postController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Post Controller Test userUpvotedPosts Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n    votePost: [\n      {\n        _id: \"637e7497b207b89c889ac1d6\",\n        owner: \"637e7493b207b89c889ac1c4\",\n        ownerType: \"User\",\n        author: \"637e7493b207b89c889ac1c4\",\n        replies: [],\n        title: \"First Post\",\n        kind: \"self\",\n        text: \"this is my first post on NONLEGIT\",\n        images: [],\n        createdAt: \"2022-11-23T19:29:21.916Z\",\n        locked: false,\n        isDeleted: false,\n        sendReplies: true,\n        nsfw: false,\n        spoiler: false,\n        votes: 2,\n        views: 0,\n        commentCount: 0,\n        shareCount: 0,\n        suggestedSort: \"top\",\n        scheduled: false,\n        postVoteStatus: \"1\",\n        isSaved: false,\n        isHidden: true,\n        name: \"Nour\",\n      },\n    ],\n    populate: async (saved, dummy) => {\n      return [];\n    },\n  },\n  params: {\n    userName: \"Ahmed\",\n  },\n  query: {\n    sortType: \"New\",\n  },\n};\nconst UserService = {\n  getUserByName: async (userName, dummy) => {\n    return {\n      success: true,\n      data: {\n        _id: \"2\",\n      },\n    };\n  },\n};\nconst PostService = {\n  selectPostsWithVotes: (me, posts) => {\n    return posts;\n  },\n  setSavedPostStatus: (me, posts) => {\n    return posts;\n  },\n  setHiddenPostStatus: (me, posts) => {\n    return posts;\n  },\n  setPostOwnerData: (posts) => {\n    return posts;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.userUpvotedPosts(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  posts: [\n    {\n      _id: \"637e7497b207b89c889ac1d6\",\n      owner: \"637e7493b207b89c889ac1c4\",\n      ownerType: \"User\",\n      author: \"637e7493b207b89c889ac1c4\",\n      replies: [],\n      title: \"First Post\",\n      kind: \"self\",\n      text: \"this is my first post on NONLEGIT\",\n      images: [],\n      createdAt: \"2022-11-23T19:29:21.916Z\",\n      locked: false,\n      isDeleted: false,\n      sendReplies: true,\n      nsfw: false,\n      spoiler: false,\n      votes: 2,\n      views: 0,\n      commentCount: 0,\n      shareCount: 0,\n      suggestedSort: \"top\",\n      scheduled: false,\n      postVoteStatus: \"1\",\n      isSaved: false,\n      isHidden: true,\n      name: \"Nour\",\n    },\n  ],\n});",
                  "err": {},
                  "uuid": "ce991c37-0507-4b61-b396-a5ea9eab265c",
                  "parentUUID": "f5cbcb9d-fd99-4e5c-9112-b0389b37f2aa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ce991c37-0507-4b61-b396-a5ea9eab265c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "5c60363c-952e-4e0b-a395-45aefb24bf4c",
              "title": "postVote Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
              "file": "\\test\\controllers\\postController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Post Controller Test postVote Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  addVote: (me, posts) => {\n    return true;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.postVote(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "f128eb13-6bed-4114-b674-2b06d29b4be9",
                  "parentUUID": "5c60363c-952e-4e0b-a395-45aefb24bf4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test success",
                  "fullTitle": "Post Controller Test postVote Test second test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  addVote: (me, posts) => {\n    return false;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.postVote(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(304).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "13cc4d2d-73fc-4765-9e93-29103cb38a03",
                  "parentUUID": "5c60363c-952e-4e0b-a395-45aefb24bf4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test success",
                  "fullTitle": "Post Controller Test postVote Test thrid test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return true;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  addVote: (me, posts) => {\n    return true;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.postVote(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(405);\nexpect(res.status(405).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Method Not Allowed\",\n});",
                  "err": {},
                  "uuid": "d04f4c87-96cf-4a8b-b5e2-0eebc3372ee0",
                  "parentUUID": "5c60363c-952e-4e0b-a395-45aefb24bf4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test success",
                  "fullTitle": "Post Controller Test postVote Test fourth test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: false,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  addVote: (me, posts) => {\n    return true;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.postVote(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Post Not Found\",\n});",
                  "err": {},
                  "uuid": "7cc47a2c-f3d0-406b-8e75-995b2b4a583c",
                  "parentUUID": "5c60363c-952e-4e0b-a395-45aefb24bf4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fifth test success",
                  "fullTitle": "Post Controller Test postVote Test fifth test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 2,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  addVote: (me, posts) => {\n    return true;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.postVote(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Enter Valid Vote dir\",\n});",
                  "err": {},
                  "uuid": "8d24d916-be2f-495e-a092-3473aae84005",
                  "parentUUID": "5c60363c-952e-4e0b-a395-45aefb24bf4c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f128eb13-6bed-4114-b674-2b06d29b4be9",
                "13cc4d2d-73fc-4765-9e93-29103cb38a03",
                "d04f4c87-96cf-4a8b-b5e2-0eebc3372ee0",
                "7cc47a2c-f3d0-406b-8e75-995b2b4a583c",
                "8d24d916-be2f-495e-a092-3473aae84005"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "c3f9fc17-89e7-411a-be79-f8e729eaeb70",
              "title": "savePost Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
              "file": "\\test\\controllers\\postController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Post Controller Test savePost Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  savePost: (me, posts) => {\n    return true;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.savePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "8835d29f-236c-496c-88c5-30f8aba6d262",
                  "parentUUID": "c3f9fc17-89e7-411a-be79-f8e729eaeb70",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test success",
                  "fullTitle": "Post Controller Test savePost Test second test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  savePost: (me, posts) => {\n    return false;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.savePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(304).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "def358e2-e359-44a3-a5e2-1048c308ee9d",
                  "parentUUID": "c3f9fc17-89e7-411a-be79-f8e729eaeb70",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test success",
                  "fullTitle": "Post Controller Test savePost Test thrid test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return true;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  savePost: (me, posts) => {\n    return true;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.savePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(405);\nexpect(res.status(405).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Method Not Allowed\",\n});",
                  "err": {},
                  "uuid": "fa0b8e9e-da95-486e-9528-52745ab3d621",
                  "parentUUID": "c3f9fc17-89e7-411a-be79-f8e729eaeb70",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test success",
                  "fullTitle": "Post Controller Test savePost Test fourth test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: false,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  savePost: (me, posts) => {\n    return true;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.savePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Post Not Found\",\n});",
                  "err": {},
                  "uuid": "197577b0-8eb9-4b87-af01-ee3af27f502f",
                  "parentUUID": "c3f9fc17-89e7-411a-be79-f8e729eaeb70",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fifth test success",
                  "fullTitle": "Post Controller Test savePost Test fifth test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 2,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  savePost: (me, posts) => {\n    return true;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.savePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Enter Valid Vote dir\",\n});",
                  "err": {},
                  "uuid": "02843a8b-23e9-479b-b9c9-4c9b18c68293",
                  "parentUUID": "c3f9fc17-89e7-411a-be79-f8e729eaeb70",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8835d29f-236c-496c-88c5-30f8aba6d262",
                "def358e2-e359-44a3-a5e2-1048c308ee9d",
                "fa0b8e9e-da95-486e-9528-52745ab3d621",
                "197577b0-8eb9-4b87-af01-ee3af27f502f",
                "02843a8b-23e9-479b-b9c9-4c9b18c68293"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "e142bb2d-4fea-4a9a-8328-be991c142e12",
              "title": "unSavePost Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
              "file": "\\test\\controllers\\postController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Post Controller Test unSavePost Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  unSavePost: (me, posts) => {\n    return true;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.unSavePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "0de82b4c-4f8b-4cf0-9058-04980ef1f5e0",
                  "parentUUID": "e142bb2d-4fea-4a9a-8328-be991c142e12",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test success",
                  "fullTitle": "Post Controller Test unSavePost Test second test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  unSavePost: (me, posts) => {\n    return false;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.unSavePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(304).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "64253822-ef26-455e-8dec-451d4bba5e4d",
                  "parentUUID": "e142bb2d-4fea-4a9a-8328-be991c142e12",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test success",
                  "fullTitle": "Post Controller Test unSavePost Test thrid test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return true;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  unSavePost: (me, posts) => {\n    return true;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.unSavePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(405);\nexpect(res.status(405).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Method Not Allowed\",\n});",
                  "err": {},
                  "uuid": "afe07e9c-46cf-4364-8f8a-549ff27e2de9",
                  "parentUUID": "e142bb2d-4fea-4a9a-8328-be991c142e12",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test success",
                  "fullTitle": "Post Controller Test unSavePost Test fourth test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: false,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  unSavePost: (me, posts) => {\n    return true;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.unSavePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Post Not Found\",\n});",
                  "err": {},
                  "uuid": "da3b15c6-8570-4a33-992f-a735e8f4703f",
                  "parentUUID": "e142bb2d-4fea-4a9a-8328-be991c142e12",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fifth test success",
                  "fullTitle": "Post Controller Test unSavePost Test fifth test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 2,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  unSavePost: (me, posts) => {\n    return true;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.unSavePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Enter Valid Vote dir\",\n});",
                  "err": {},
                  "uuid": "04ab2776-cef6-4e7a-9f12-503811ab3705",
                  "parentUUID": "e142bb2d-4fea-4a9a-8328-be991c142e12",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0de82b4c-4f8b-4cf0-9058-04980ef1f5e0",
                "64253822-ef26-455e-8dec-451d4bba5e4d",
                "afe07e9c-46cf-4364-8f8a-549ff27e2de9",
                "da3b15c6-8570-4a33-992f-a735e8f4703f",
                "04ab2776-cef6-4e7a-9f12-503811ab3705"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "e0bc2580-6bc6-4ffd-b3d2-65535b94dc01",
              "title": "hidePost Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
              "file": "\\test\\controllers\\postController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Post Controller Test hidePost Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  hidePost: (me, posts) => {\n    return true;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.hidePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "c7aee3be-e7ef-4ccd-a3a4-01fa28d94ce9",
                  "parentUUID": "e0bc2580-6bc6-4ffd-b3d2-65535b94dc01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test success",
                  "fullTitle": "Post Controller Test hidePost Test second test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  hidePost: (me, posts) => {\n    return false;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.hidePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(304).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "00cc6b4f-7a8a-4736-9f1a-e973da5b81ed",
                  "parentUUID": "e0bc2580-6bc6-4ffd-b3d2-65535b94dc01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test success",
                  "fullTitle": "Post Controller Test hidePost Test thrid test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return true;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  hidePost: (me, posts) => {\n    return true;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.hidePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(405);\nexpect(res.status(405).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Method Not Allowed\",\n});",
                  "err": {},
                  "uuid": "a452948e-5b4e-4663-97dc-f3cf9b2bb1cc",
                  "parentUUID": "e0bc2580-6bc6-4ffd-b3d2-65535b94dc01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test success",
                  "fullTitle": "Post Controller Test hidePost Test fourth test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: false,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  hidePost: (me, posts) => {\n    return true;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.hidePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Post Not Found\",\n});",
                  "err": {},
                  "uuid": "50ba70de-c497-4fb5-9382-81269acbb7cf",
                  "parentUUID": "e0bc2580-6bc6-4ffd-b3d2-65535b94dc01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fifth test success",
                  "fullTitle": "Post Controller Test hidePost Test fifth test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 2,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  hidePost: (me, posts) => {\n    return true;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.hidePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Enter Valid Vote dir\",\n});",
                  "err": {},
                  "uuid": "93fd385c-da26-4de4-b273-2d4f0bc03c9b",
                  "parentUUID": "e0bc2580-6bc6-4ffd-b3d2-65535b94dc01",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c7aee3be-e7ef-4ccd-a3a4-01fa28d94ce9",
                "00cc6b4f-7a8a-4736-9f1a-e973da5b81ed",
                "a452948e-5b4e-4663-97dc-f3cf9b2bb1cc",
                "50ba70de-c497-4fb5-9382-81269acbb7cf",
                "93fd385c-da26-4de4-b273-2d4f0bc03c9b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "0b0a922a-6107-4e93-9a60-5409eebcbbec",
              "title": "unHidePost Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
              "file": "\\test\\controllers\\postController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Post Controller Test unHidePost Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  unHidePost: (me, posts) => {\n    return true;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.unHidePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "dd6bf128-2377-4684-b4c6-ac87b2f15539",
                  "parentUUID": "0b0a922a-6107-4e93-9a60-5409eebcbbec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test success",
                  "fullTitle": "Post Controller Test unHidePost Test second test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  unHidePost: (me, posts) => {\n    return false;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.unHidePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(304).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "50a0c9c6-22ed-42b6-bee9-3405b9fac3e3",
                  "parentUUID": "0b0a922a-6107-4e93-9a60-5409eebcbbec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test success",
                  "fullTitle": "Post Controller Test unHidePost Test thrid test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return true;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  unHidePost: (me, posts) => {\n    return true;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.unHidePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(405);\nexpect(res.status(405).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Method Not Allowed\",\n});",
                  "err": {},
                  "uuid": "608e694f-36ec-4d87-9fa6-bc4883486c3e",
                  "parentUUID": "0b0a922a-6107-4e93-9a60-5409eebcbbec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test success",
                  "fullTitle": "Post Controller Test unHidePost Test fourth test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 1,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: false,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  unHidePost: (me, posts) => {\n    return true;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.unHidePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Post Not Found\",\n});",
                  "err": {},
                  "uuid": "66affa7d-7b79-4dd9-b20b-c816a6483230",
                  "parentUUID": "0b0a922a-6107-4e93-9a60-5409eebcbbec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fifth test success",
                  "fullTitle": "Post Controller Test unHidePost Test fifth test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    postId: \"Ahmed\",\n  },\n  body: {\n    dir: 2,\n  },\n};\nconst UserService = {\n  checkBlockStatus: async (user, me) => {\n    return false;\n  },\n};\nconst PostService = {\n  findPostById: async (postId) => {\n    let response = {\n      success: true,\n      data: {\n        author: \"1\",\n        votes: \"5\",\n      },\n    };\n    return response;\n  },\n  unHidePost: (me, posts) => {\n    return true;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.unHidePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Enter Valid Vote dir\",\n});",
                  "err": {},
                  "uuid": "5e3f4b65-deb1-4638-9b1e-4c1504ad1030",
                  "parentUUID": "0b0a922a-6107-4e93-9a60-5409eebcbbec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dd6bf128-2377-4684-b4c6-ac87b2f15539",
                "50a0c9c6-22ed-42b6-bee9-3405b9fac3e3",
                "608e694f-36ec-4d87-9fa6-bc4883486c3e",
                "66affa7d-7b79-4dd9-b20b-c816a6483230",
                "5e3f4b65-deb1-4638-9b1e-4c1504ad1030"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "3048c1bf-798d-4fe1-a81e-86d04494bb33",
              "title": "overview Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
              "file": "\\test\\controllers\\postController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Post Controller Test overview Test first test success",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    userName: \"Ahmed\",\n  },\n  query: {\n    sortType: \"New\",\n  },\n};\nconst UserService = {\n  getUserByName: async (userName, dummy) => {\n    return {\n      success: true,\n      data: {\n        _id: \"2\",\n      },\n    };\n  },\n  checkBlockStatus: async (userName, dummy) => {\n    return false;\n  },\n};\nconst PostService = {\n  getUserPosts: (me, posts) => {\n    return [{ _id: \"1\" }];\n  },\n  setVotePostStatus: (me, posts) => {\n    return posts;\n  },\n  setSavedPostStatus: (me, posts) => {\n    return posts;\n  },\n  setHiddenPostStatus: (me, posts) => {\n    return posts;\n  },\n  setPostOwnerData: (posts) => {\n    return posts;\n  },\n  removeHiddenPosts: (me, posts) => {\n    return posts;\n  },\n  filterPosts: (posts) => {\n    return posts;\n  },\n};\nconst CommentService = {\n  getUserComments: async () => {\n    return [\n      {\n        _id: \"1\",\n      },\n    ];\n  },\n};\nconst authObj = new auth({ PostService, UserService, CommentService });\nawait authObj.overview(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  posts: [\n    {\n      _id: \"1\",\n    },\n  ],\n  comments: [\n    {\n      _id: \"1\",\n    },\n  ],\n});\nconst authObj2 = new auth({ PostService, UserService, CommentService });\nconst req2 = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    userName: \"Ahmed\",\n  },\n  query: {\n    sort: \"Top\",\n    page: 5,\n    limit: 3,\n  },\n};\nawait authObj2.overview(req2, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  posts: [\n    {\n      _id: \"1\",\n    },\n  ],\n  comments: [\n    {\n      _id: \"1\",\n    },\n  ],\n});",
                  "err": {},
                  "uuid": "bc11e31d-03e2-496d-b11f-2a68344b8d26",
                  "parentUUID": "3048c1bf-798d-4fe1-a81e-86d04494bb33",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test success",
                  "fullTitle": "Post Controller Test overview Test second test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    userName: \"Ahmed\",\n  },\n  query: {\n    sortType: \"New\",\n  },\n};\nconst UserService = {\n  getUserByName: async (userName, dummy) => {\n    return {\n      success: true,\n      data: {\n        _id: \"2\",\n      },\n    };\n  },\n  checkBlockStatus: async (userName, dummy) => {\n    return true;\n  },\n};\nconst PostService = {\n  getUserPosts: (me, posts) => {\n    return [{ _id: \"1\" }];\n  },\n  setVotePostStatus: (me, posts) => {\n    return posts;\n  },\n  setSavedPostStatus: (me, posts) => {\n    return posts;\n  },\n  setHiddenPostStatus: (me, posts) => {\n    return posts;\n  },\n  setPostOwnerData: (posts) => {\n    return posts;\n  },\n  removeHiddenPosts: (me, posts) => {\n    return posts;\n  },\n  filterPosts: (posts) => {\n    return posts;\n  },\n};\nconst CommentService = {\n  getUserComments: async () => {\n    return [\n      {\n        _id: \"1\",\n      },\n    ];\n  },\n};\nconst authObj = new auth({ PostService, UserService, CommentService });\nawait authObj.overview(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  posts: [],\n  comments: [],\n});",
                  "err": {},
                  "uuid": "b76d7d10-9bee-4a40-8b44-33928287a84c",
                  "parentUUID": "3048c1bf-798d-4fe1-a81e-86d04494bb33",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "first test success",
                  "fullTitle": "Post Controller Test overview Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n  },\n  params: {\n    userName: \"Ahmed\",\n  },\n  query: {\n    sortType: \"New\",\n  },\n};\nconst UserService = {\n  getUserByName: async (userName, dummy) => {\n    return {\n      success: false,\n      data: {\n        _id: \"2\",\n      },\n    };\n  },\n  checkBlockStatus: async (userName, dummy) => {\n    return false;\n  },\n};\nconst PostService = {\n  getUserPosts: (me, posts) => {\n    return [{ _id: \"1\" }];\n  },\n  setVotePostStatus: (me, posts) => {\n    return posts;\n  },\n  setSavedPostStatus: (me, posts) => {\n    return posts;\n  },\n  setHiddenPostStatus: (me, posts) => {\n    return posts;\n  },\n  setPostOwnerData: (posts) => {\n    return posts;\n  },\n  removeHiddenPosts: (me, posts) => {\n    return posts;\n  },\n  filterPosts: (posts) => {\n    return posts;\n  },\n};\nconst CommentService = {\n  getUserComments: async () => {\n    return [\n      {\n        _id: \"1\",\n      },\n    ];\n  },\n};\nconst authObj = new auth({ PostService, UserService, CommentService });\nawait authObj.overview(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"User Not Found\",\n});",
                  "err": {},
                  "uuid": "2d9dd877-1544-432c-b70b-444d45da07d7",
                  "parentUUID": "3048c1bf-798d-4fe1-a81e-86d04494bb33",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bc11e31d-03e2-496d-b11f-2a68344b8d26",
                "b76d7d10-9bee-4a40-8b44-33928287a84c",
                "2d9dd877-1544-432c-b70b-444d45da07d7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "56aa9f71-e91f-4d7c-87c0-92ed7e67510f",
              "title": "userDownvotedPosts Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
              "file": "\\test\\controllers\\postController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Post Controller Test userDownvotedPosts Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n    votePost: [\n      {\n        _id: \"637e7497b207b89c889ac1d6\",\n        owner: \"637e7493b207b89c889ac1c4\",\n        ownerType: \"User\",\n        author: \"637e7493b207b89c889ac1c4\",\n        replies: [],\n        title: \"First Post\",\n        kind: \"self\",\n        text: \"this is my first post on NONLEGIT\",\n        images: [],\n        createdAt: \"2022-11-23T19:29:21.916Z\",\n        locked: false,\n        isDeleted: false,\n        sendReplies: true,\n        nsfw: false,\n        spoiler: false,\n        votes: 2,\n        views: 0,\n        commentCount: 0,\n        shareCount: 0,\n        suggestedSort: \"top\",\n        scheduled: false,\n        postVoteStatus: \"1\",\n        isSaved: false,\n        isHidden: true,\n        name: \"Nour\",\n      },\n    ],\n    populate: async (saved, dummy) => {\n      return [];\n    },\n  },\n  params: {\n    userName: \"Ahmed\",\n  },\n  query: {\n    sortType: \"New\",\n  },\n};\nconst UserService = {\n  getUserByName: async (userName, dummy) => {\n    return {\n      success: true,\n      data: {\n        _id: \"2\",\n      },\n    };\n  },\n};\nconst PostService = {\n  selectPostsWithVotes: (me, posts) => {\n    return posts;\n  },\n  setSavedPostStatus: (me, posts) => {\n    return posts;\n  },\n  setHiddenPostStatus: (me, posts) => {\n    return posts;\n  },\n  setPostOwnerData: (posts) => {\n    return posts;\n  },\n};\nconst authObj = new auth({ PostService, UserService });\nawait authObj.userDownvotedPosts(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  posts: [\n    {\n      _id: \"637e7497b207b89c889ac1d6\",\n      owner: \"637e7493b207b89c889ac1c4\",\n      ownerType: \"User\",\n      author: \"637e7493b207b89c889ac1c4\",\n      replies: [],\n      title: \"First Post\",\n      kind: \"self\",\n      text: \"this is my first post on NONLEGIT\",\n      images: [],\n      createdAt: \"2022-11-23T19:29:21.916Z\",\n      locked: false,\n      isDeleted: false,\n      sendReplies: true,\n      nsfw: false,\n      spoiler: false,\n      votes: 2,\n      views: 0,\n      commentCount: 0,\n      shareCount: 0,\n      suggestedSort: \"top\",\n      scheduled: false,\n      postVoteStatus: \"1\",\n      isSaved: false,\n      isHidden: true,\n      name: \"Nour\",\n    },\n  ],\n});",
                  "err": {},
                  "uuid": "54e85175-3672-42e9-850e-55473e942a1c",
                  "parentUUID": "56aa9f71-e91f-4d7c-87c0-92ed7e67510f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "54e85175-3672-42e9-850e-55473e942a1c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "d838b2f1-6894-49e9-89b0-c750e095a20b",
              "title": "get hot posts",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
              "file": "\\test\\controllers\\postController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "Post Controller Test get hot posts 1) test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n  user: {\n    _id: \" \",\n  }\n};\nconst UserService = {\n  getPeopleUserKnows: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    return response;\n  }\n};\nconst PostService = {\n  getPosts: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, UserService });\nawait postObj.getHotPosts(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"OK\",\n  data: posts,\n});",
                  "err": {},
                  "uuid": "2df0d45b-53df-482c-b1fa-0d5ae95cddb1",
                  "parentUUID": "d838b2f1-6894-49e9-89b0-c750e095a20b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test success not logged in",
                  "fullTitle": "Post Controller Test get hot posts 2) test success not logged in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n \n};\nconst UserService = {\n  getPeopleUserKnows: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    return response;\n  }\n};\nconst PostService = {\n  getPosts: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, UserService });\nawait postObj.getHotPosts(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"OK\",\n  data: posts,\n});",
                  "err": {},
                  "uuid": "71ed304e-de35-4b0f-bf6a-5b73626e1e30",
                  "parentUUID": "d838b2f1-6894-49e9-89b0-c750e095a20b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test fail subreddit not found",
                  "fullTitle": "Post Controller Test get hot posts 3) test fail subreddit not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n  user: {\n    _id: \" \",\n  },\n  // toFilter: \" \"\n};\nconst UserService = {\n  getPeopleUserKnows: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    return response;\n  }\n};\nconst PostService = {\n  getPosts: async () => {\n    const response = {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, UserService });\nawait postObj.getHotPosts(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  message: \"Subreddit not found\",\n  status: \"Not Found\",\n});",
                  "err": {},
                  "uuid": "b9bbd16d-892f-4622-aa10-c6c79da8beab",
                  "parentUUID": "d838b2f1-6894-49e9-89b0-c750e095a20b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4) test fail internal",
                  "fullTitle": "Post Controller Test get hot posts 4) test fail internal",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n  user: {\n    _id: \" \",\n  },\n  // toFilter: \" \"\n};\nconst UserService = {\n  getPeopleUserKnows: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    return response;\n  }\n};\nconst PostService = {\n  getPosts: async () => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, UserService });\nawait postObj.getHotPosts(req, res);\nexpect(res.status).to.have.been.calledWith(500);\nexpect(res.status(500).json).to.have.been.calledWith({\n  message: \"Internal server error\",\n      \n  status: \"Internal Server Error\",\n});",
                  "err": {},
                  "uuid": "2add1531-adb8-4528-9873-2a46e9b07f54",
                  "parentUUID": "d838b2f1-6894-49e9-89b0-c750e095a20b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5) test fail exception",
                  "fullTitle": "Post Controller Test get hot posts 5) test fail exception",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n  user: {\n    _id: \" \",\n  }\n};\nconst UserService = {\n  getPeopleUserKnows: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    \n    return response;\n  }\n};\nconst PostService = {\n  getPosts: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    throw new Error('divide by zero!');\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, UserService });\nawait postObj.getHotPosts(req, res);\nexpect(res.status).to.have.been.calledWith(500);\nexpect(res.status(500).json).to.have.been.calledWith({\n  status: \"fail\",\n \n});",
                  "err": {},
                  "uuid": "2e9b4412-21cd-4c6f-ba12-b6d9eeaca14b",
                  "parentUUID": "d838b2f1-6894-49e9-89b0-c750e095a20b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2df0d45b-53df-482c-b1fa-0d5ae95cddb1",
                "71ed304e-de35-4b0f-bf6a-5b73626e1e30",
                "b9bbd16d-892f-4622-aa10-c6c79da8beab",
                "2add1531-adb8-4528-9873-2a46e9b07f54",
                "2e9b4412-21cd-4c6f-ba12-b6d9eeaca14b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "fb02cf69-0c60-48b0-ad11-ecfd7ec09244",
              "title": "get new posts",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
              "file": "\\test\\controllers\\postController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "Post Controller Test get new posts 1) test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n  user: {\n    _id: \" \",\n  }\n};\nconst UserService = {\n  getPeopleUserKnows: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    return response;\n  }\n};\nconst PostService = {\n  getPosts: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, UserService });\nawait postObj.getNewPosts(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"OK\",\n  data: posts,\n});",
                  "err": {},
                  "uuid": "2e2effc2-95b9-49b1-9737-fe6111cbf4a9",
                  "parentUUID": "fb02cf69-0c60-48b0-ad11-ecfd7ec09244",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test success not logged in",
                  "fullTitle": "Post Controller Test get new posts 2) test success not logged in",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n \n};\nconst UserService = {\n  getPeopleUserKnows: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    return response;\n  }\n};\nconst PostService = {\n  getPosts: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, UserService });\nawait postObj.getNewPosts(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"OK\",\n  data: posts,\n});",
                  "err": {},
                  "uuid": "ba7adb32-4bed-4810-860e-25f3d31fa1ba",
                  "parentUUID": "fb02cf69-0c60-48b0-ad11-ecfd7ec09244",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test fail subreddit not found",
                  "fullTitle": "Post Controller Test get new posts 3) test fail subreddit not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n  user: {\n    _id: \" \",\n  },\n  // toFilter: \" \"\n};\nconst UserService = {\n  getPeopleUserKnows: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    return response;\n  }\n};\nconst PostService = {\n  getPosts: async () => {\n    const response = {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, UserService });\nawait postObj.getNewPosts(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  message: \"Subreddit not found\",\n  status: \"Not Found\",\n});",
                  "err": {},
                  "uuid": "34c95fdd-ca92-41ba-a543-28199869f17a",
                  "parentUUID": "fb02cf69-0c60-48b0-ad11-ecfd7ec09244",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4) test fail internal",
                  "fullTitle": "Post Controller Test get new posts 4) test fail internal",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n  user: {\n    _id: \" \",\n  },\n  // toFilter: \" \"\n};\nconst UserService = {\n  getPeopleUserKnows: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    return response;\n  }\n};\nconst PostService = {\n  getPosts: async () => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, UserService });\nawait postObj.getNewPosts(req, res);\nexpect(res.status).to.have.been.calledWith(500);\nexpect(res.status(500).json).to.have.been.calledWith({\n  message: \"Internal server error\",\n      \n  status: \"Internal Server Error\",\n});",
                  "err": {},
                  "uuid": "b5eda12e-5c03-4bcd-8ea4-9c6ccfd6315a",
                  "parentUUID": "fb02cf69-0c60-48b0-ad11-ecfd7ec09244",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5) test fail exception",
                  "fullTitle": "Post Controller Test get new posts 5) test fail exception",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n  user: {\n    _id: \" \",\n  }\n};\nconst UserService = {\n  getPeopleUserKnows: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    \n    return response;\n  }\n};\nconst PostService = {\n  getPosts: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    throw new Error('divide by zero!');\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, UserService });\nawait postObj.getNewPosts(req, res);\nexpect(res.status).to.have.been.calledWith(500);\nexpect(res.status(500).json).to.have.been.calledWith({\n  status: \"fail\",\n \n});",
                  "err": {},
                  "uuid": "3a7503c7-7a7b-461a-ae09-c36cdfafa358",
                  "parentUUID": "fb02cf69-0c60-48b0-ad11-ecfd7ec09244",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2e2effc2-95b9-49b1-9737-fe6111cbf4a9",
                "ba7adb32-4bed-4810-860e-25f3d31fa1ba",
                "34c95fdd-ca92-41ba-a543-28199869f17a",
                "b5eda12e-5c03-4bcd-8ea4-9c6ccfd6315a",
                "3a7503c7-7a7b-461a-ae09-c36cdfafa358"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "54053541-19d3-49fc-a0a3-e1ca834d5696",
              "title": "get top posts",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
              "file": "\\test\\controllers\\postController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "Post Controller Test get top posts 1) test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n  user: {\n    _id: \" \",\n  }\n};\nconst UserService = {\n  getPeopleUserKnows: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    return response;\n  }\n};\nconst PostService = {\n  getPosts: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, UserService });\nawait postObj.getTopPosts(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"OK\",\n  data: posts,\n});",
                  "err": {},
                  "uuid": "44c226ec-00cd-419e-b8dc-93558197afcd",
                  "parentUUID": "54053541-19d3-49fc-a0a3-e1ca834d5696",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test success not logged in",
                  "fullTitle": "Post Controller Test get top posts 2) test success not logged in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n       \n};\nconst UserService = {\n  getPeopleUserKnows: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    return response;\n  }\n};\nconst PostService = {\n  getPosts: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, UserService });\nawait postObj.getTopPosts(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"OK\",\n  data: posts,\n});",
                  "err": {},
                  "uuid": "b4e917df-0a94-442f-987e-06d2d8ce6dbf",
                  "parentUUID": "54053541-19d3-49fc-a0a3-e1ca834d5696",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test fail subreddit not found",
                  "fullTitle": "Post Controller Test get top posts 3) test fail subreddit not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n  user: {\n    _id: \" \",\n  },\n  // toFilter: \" \"\n};\nconst UserService = {\n  getPeopleUserKnows: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    return response;\n  }\n};\nconst PostService = {\n  getPosts: async () => {\n    const response = {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, UserService });\nawait postObj.getTopPosts(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  message: \"Subreddit not found\",\n  status: \"Not Found\",\n});",
                  "err": {},
                  "uuid": "b9108221-f762-4507-9eb4-4eae43244728",
                  "parentUUID": "54053541-19d3-49fc-a0a3-e1ca834d5696",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4) test fail internal",
                  "fullTitle": "Post Controller Test get top posts 4) test fail internal",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n  user: {\n    _id: \" \",\n  },\n  // toFilter: \" \"\n};\nconst UserService = {\n  getPeopleUserKnows: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    return response;\n  }\n};\nconst PostService = {\n  getPosts: async () => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, UserService });\nawait postObj.getTopPosts(req, res);\nexpect(res.status).to.have.been.calledWith(500);\nexpect(res.status(500).json).to.have.been.calledWith({\n  message: \"Internal server error\",\n    \n  status: \"Internal Server Error\",\n});",
                  "err": {},
                  "uuid": "fb44b4a6-207e-41bb-9579-41a8bda46513",
                  "parentUUID": "54053541-19d3-49fc-a0a3-e1ca834d5696",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5) test fail exception",
                  "fullTitle": "Post Controller Test get top posts 5) test fail exception",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n  user: {\n    _id: \" \",\n  }\n};\nconst UserService = {\n  getPeopleUserKnows: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n  \n    return response;\n  }\n};\nconst PostService = {\n  getPosts: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    throw new Error('divide by zero!');\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, UserService });\nawait postObj.getTopPosts(req, res);\nexpect(res.status).to.have.been.calledWith(500);\nexpect(res.status(500).json).to.have.been.calledWith({\n  status: \"fail\",\n       \n});",
                  "err": {},
                  "uuid": "2a1e1332-67c8-4382-8b95-166aa42454a4",
                  "parentUUID": "54053541-19d3-49fc-a0a3-e1ca834d5696",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "44c226ec-00cd-419e-b8dc-93558197afcd",
                "b4e917df-0a94-442f-987e-06d2d8ce6dbf",
                "b9108221-f762-4507-9eb4-4eae43244728",
                "fb44b4a6-207e-41bb-9579-41a8bda46513",
                "2a1e1332-67c8-4382-8b95-166aa42454a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "c367f8c8-2b35-476f-9fa1-e9587eef9357",
              "title": "get best posts",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
              "file": "\\test\\controllers\\postController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "Post Controller Test get best posts 1) test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n  user: {\n    _id: \" \",\n  }\n};\nconst UserService = {\n  getPeopleUserKnows: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    return response;\n  }\n};\nconst PostService = {\n  getPosts: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, UserService });\nawait postObj.getBestPosts(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"OK\",\n  data: posts,\n});",
                  "err": {},
                  "uuid": "463466c1-d964-4fe2-97e5-194d2071c8df",
                  "parentUUID": "c367f8c8-2b35-476f-9fa1-e9587eef9357",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test success not logged in",
                  "fullTitle": "Post Controller Test get best posts 2) test success not logged in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n       \n};\nconst UserService = {\n  getPeopleUserKnows: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    return response;\n  }\n};\nconst PostService = {\n  getPosts: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, UserService });\nawait postObj.getBestPosts(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"OK\",\n  data: posts,\n});",
                  "err": {},
                  "uuid": "5745d98d-d87f-40ca-8f33-780eae41e8cc",
                  "parentUUID": "c367f8c8-2b35-476f-9fa1-e9587eef9357",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test fail subreddit not found",
                  "fullTitle": "Post Controller Test get best posts 3) test fail subreddit not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n  user: {\n    _id: \" \",\n  },\n  // toFilter: \" \"\n};\nconst UserService = {\n  getPeopleUserKnows: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    return response;\n  }\n};\nconst PostService = {\n  getPosts: async () => {\n    const response = {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, UserService });\nawait postObj.getBestPosts(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  message: \"Subreddit not found\",\n  status: \"Not Found\",\n});",
                  "err": {},
                  "uuid": "f8fbcfc7-4ffe-4685-94e8-b3256da1e163",
                  "parentUUID": "c367f8c8-2b35-476f-9fa1-e9587eef9357",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4) test fail internal",
                  "fullTitle": "Post Controller Test get best posts 4) test fail internal",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n  user: {\n    _id: \" \",\n  },\n  // toFilter: \" \"\n};\nconst UserService = {\n  getPeopleUserKnows: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    return response;\n  }\n};\nconst PostService = {\n  getPosts: async () => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, UserService });\nawait postObj.getBestPosts(req, res);\nexpect(res.status).to.have.been.calledWith(500);\nexpect(res.status(500).json).to.have.been.calledWith({\n  message: \"Internal server error\",\n    \n  status: \"Internal Server Error\",\n});",
                  "err": {},
                  "uuid": "367dd1a8-bab0-4291-a719-e017d9946516",
                  "parentUUID": "c367f8c8-2b35-476f-9fa1-e9587eef9357",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5) test fail exception",
                  "fullTitle": "Post Controller Test get best posts 5) test fail exception",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n  user: {\n    _id: \" \",\n  }\n};\nconst UserService = {\n  getPeopleUserKnows: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n  \n    return response;\n  }\n};\nconst PostService = {\n  getPosts: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    throw new Error('divide by zero!');\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, UserService });\nawait postObj.getBestPosts(req, res);\nexpect(res.status).to.have.been.calledWith(500);\nexpect(res.status(500).json).to.have.been.calledWith({\n  status: \"fail\",\n       \n});",
                  "err": {},
                  "uuid": "4bce0c4c-ffc3-4215-b558-ab3e95378c85",
                  "parentUUID": "c367f8c8-2b35-476f-9fa1-e9587eef9357",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "463466c1-d964-4fe2-97e5-194d2071c8df",
                "5745d98d-d87f-40ca-8f33-780eae41e8cc",
                "f8fbcfc7-4ffe-4685-94e8-b3256da1e163",
                "367dd1a8-bab0-4291-a719-e017d9946516",
                "4bce0c4c-ffc3-4215-b558-ab3e95378c85"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "3a5893a1-9476-4dc9-a4f0-eb42b51e3c49",
              "title": "get post",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
              "file": "\\test\\controllers\\postController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1) test success",
                  "fullTitle": "Post Controller Test get post 1) test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n  user: {\n    _id: \" \",\n  },\n  params: {\n    postId:\" \"\n  }\n};\nconst PostService = {\n  getPost: async () => {\n    const response = {\n      success: true,\n      doc: posts[0],\n    };\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, on });\nawait postObj.getPost(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"OK\",\n  data: posts[0],\n});",
                  "err": {},
                  "uuid": "ca7d0f8b-aa43-4be0-bbea-975833b7a67b",
                  "parentUUID": "3a5893a1-9476-4dc9-a4f0-eb42b51e3c49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2) test success not logged in",
                  "fullTitle": "Post Controller Test get post 2) test success not logged in",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n  params: {\n    postId:\" \"\n  }\n};\n\nconst PostService = {\n  getPosts: async () => {\n    const response = {\n      success: true,\n      doc: posts[0],\n    };\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, on });\nawait postObj.getPost(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"OK\",\n  data: posts[0],\n});",
                  "err": {},
                  "uuid": "f1d091be-9d6e-4da2-8fdc-606711f300a6",
                  "parentUUID": "3a5893a1-9476-4dc9-a4f0-eb42b51e3c49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3) test fail post not found",
                  "fullTitle": "Post Controller Test get post 3) test fail post not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n  user: {\n    _id: \" \",\n  },\n   params: {\n    postId:\" \"\n  }\n  // toFilter: \" \"\n};\n     \nconst PostService = {\n  getPost: async () => {\n    const response = {\n      success: false,\n      error: postErrors.POST_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, on });\nawait postObj.getPost(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  message: \"Post not found\",\n  status: \"Not Found\",\n});",
                  "err": {},
                  "uuid": "1affcd5e-2dbd-4b23-9aaf-d96f3d7153f8",
                  "parentUUID": "3a5893a1-9476-4dc9-a4f0-eb42b51e3c49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4) test fail internal",
                  "fullTitle": "Post Controller Test get post 4) test fail internal",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n  user: {\n    _id: \" \",\n  },\n   params: {\n    postId:\" \"\n  }\n  // toFilter: \" \"\n};\n     \nconst PostService = {\n  getPost: async () => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, on });\nawait postObj.getPost(req, res);\nexpect(res.status).to.have.been.calledWith(500);\nexpect(res.status(500).json).to.have.been.calledWith({\n  message: \"Internal server error\",\n      \n  status: \"Internal Server Error\",\n});",
                  "err": {},
                  "uuid": "298a16f0-f13f-4dfd-8847-dddf2f244292",
                  "parentUUID": "3a5893a1-9476-4dc9-a4f0-eb42b51e3c49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5) test fail exception",
                  "fullTitle": "Post Controller Test get post 5) test fail exception",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n  user: {\n    _id: \" \",\n  },\n   params: {\n    postId:\" \"\n  }\n};\n     \nconst PostService = {\n  getPost: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n    throw new Error('divide by zero!');\n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, on });\nawait postObj.getPost(req, res);\nexpect(res.status).to.have.been.calledWith(500);\nexpect(res.status(500).json).to.have.been.calledWith({\n  status: \"fail\",\n \n});",
                  "err": {},
                  "uuid": "09919f8c-c700-4faf-b309-d8e2867bf64a",
                  "parentUUID": "3a5893a1-9476-4dc9-a4f0-eb42b51e3c49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "6) test fail bad request",
                  "fullTitle": "Post Controller Test get post 6) test fail bad request",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  isAuthorized: true,\n  user: {\n    _id: \" \",\n  },\n   params: {\n    postId:undefined\n  }\n};\n     \nconst PostService = {\n  getPost: async () => {\n    const response = {\n      success: true,\n      data: posts,\n    };\n   \n    return response;\n  },\n};\nconst on = {};\nconst postObj = new auth({ PostService, on });\nawait postObj.getPost(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Missing required parameter\",\n \n});",
                  "err": {},
                  "uuid": "c4bfe3d2-8f04-46ce-b4ef-a5f13f213c02",
                  "parentUUID": "3a5893a1-9476-4dc9-a4f0-eb42b51e3c49",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ca7d0f8b-aa43-4be0-bbea-975833b7a67b",
                "f1d091be-9d6e-4da2-8fdc-606711f300a6",
                "1affcd5e-2dbd-4b23-9aaf-d96f3d7153f8",
                "298a16f0-f13f-4dfd-8847-dddf2f244292",
                "09919f8c-c700-4faf-b309-d8e2867bf64a",
                "c4bfe3d2-8f04-46ce-b4ef-a5f13f213c02"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "7edfd63b-a22d-407a-9855-79e3be6dd068",
              "title": "Post Controller CRUD operations",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
              "file": "\\test\\controllers\\postController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "fffd8cca-e9e1-4771-9de2-e39a7ee1e315",
                  "title": "Create post test",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
                  "file": "\\test\\controllers\\postController.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "successful creation",
                      "fullTitle": "Post Controller Test Post Controller CRUD operations Create post test successful creation",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await postController.createPost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(201);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"success\",\n  data: {\n    author: \"123e4aab2a94c22ae492983a\",\n    title: \"kiro post\",\n    kind: \"self\",\n    text: \"this is a post\",\n    owner: \"637e4aab2a94c22ae492983a\",\n    ownerType: \"Subreddit\",\n    nsfw: false,\n    spoiler: true,\n    sendReplies: true,\n    suggestedSort: \"top\",\n  },\n});",
                      "err": {},
                      "uuid": "b2129f08-99d3-4107-b8c0-4153d5b981d8",
                      "parentUUID": "fffd8cca-e9e1-4771-9de2-e39a7ee1e315",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Invalid post kind",
                      "fullTitle": "Post Controller Test Post Controller CRUD operations Create post test Invalid post kind",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "PostService.createPost = async (data) => {\n  return { success: false, error: postErrors.INVALID_POST_KIND };\n};\nawait postController.createPost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Invalid post kind\",\n});",
                      "err": {},
                      "uuid": "c34210af-ac84-4380-a653-daf8b485cf62",
                      "parentUUID": "fffd8cca-e9e1-4771-9de2-e39a7ee1e315",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Invalid owner type",
                      "fullTitle": "Post Controller Test Post Controller CRUD operations Create post test Invalid owner type",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "PostService.createPost = async (data) => {\n  return { success: false, error: postErrors.INVALID_OWNER };\n};\nawait postController.createPost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Invalid owner type\",\n});",
                      "err": {},
                      "uuid": "c5a2ff30-666a-4b7f-b0e8-e27729609017",
                      "parentUUID": "fffd8cca-e9e1-4771-9de2-e39a7ee1e315",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Subreddit not found",
                      "fullTitle": "Post Controller Test Post Controller CRUD operations Create post test Subreddit not found",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "PostService.createPost = async (data) => {\n  return { success: false, error: postErrors.SUBREDDIT_NOT_FOUND };\n};\nawait postController.createPost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Subreddit not found\",\n});",
                      "err": {},
                      "uuid": "893adb92-ad29-46de-8fcb-82b0b1cf34b4",
                      "parentUUID": "fffd8cca-e9e1-4771-9de2-e39a7ee1e315",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Invalid parent post",
                      "fullTitle": "Post Controller Test Post Controller CRUD operations Create post test Invalid parent post",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "PostService.createPost = async (data) => {\n  return { success: false, error: postErrors.INVALID_PARENT_POST };\n};\nawait postController.createPost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Invalid parent post\",\n});",
                      "err": {},
                      "uuid": "2d03ed33-9565-4e4b-9a54-e659322d1e72",
                      "parentUUID": "fffd8cca-e9e1-4771-9de2-e39a7ee1e315",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Flair not found",
                      "fullTitle": "Post Controller Test Post Controller CRUD operations Create post test Flair not found",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "PostService.createPost = async (data) => {\n  return { success: false, error: postErrors.FLAIR_NOT_FOUND };\n};\nawait postController.createPost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Flair not found\",\n});",
                      "err": {},
                      "uuid": "3f032650-6dd8-4ec6-9762-f0e7f74afee0",
                      "parentUUID": "fffd8cca-e9e1-4771-9de2-e39a7ee1e315",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "mongo error",
                      "fullTitle": "Post Controller Test Post Controller CRUD operations Create post test mongo error",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "PostService.createPost = async (data) => {\n  return { success: false, error: postErrors.MONGO_ERR, msg: \"message\" };\n};\nawait postController.createPost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"message\",\n});",
                      "err": {},
                      "uuid": "212530ae-dd9f-4093-af3a-ebc95c98a6e0",
                      "parentUUID": "fffd8cca-e9e1-4771-9de2-e39a7ee1e315",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Invalid request",
                      "fullTitle": "Post Controller Test Post Controller CRUD operations Create post test Invalid request",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "delete req.body.kind;\nawait postController.createPost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Invalid request\",\n});",
                      "err": {},
                      "uuid": "77f10934-51ad-46f2-9468-bbd7ee33a233",
                      "parentUUID": "fffd8cca-e9e1-4771-9de2-e39a7ee1e315",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b2129f08-99d3-4107-b8c0-4153d5b981d8",
                    "c34210af-ac84-4380-a653-daf8b485cf62",
                    "c5a2ff30-666a-4b7f-b0e8-e27729609017",
                    "893adb92-ad29-46de-8fcb-82b0b1cf34b4",
                    "2d03ed33-9565-4e4b-9a54-e659322d1e72",
                    "3f032650-6dd8-4ec6-9762-f0e7f74afee0",
                    "212530ae-dd9f-4093-af3a-ebc95c98a6e0",
                    "77f10934-51ad-46f2-9468-bbd7ee33a233"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                },
                {
                  "uuid": "4f7d1737-0293-422c-aa73-c2faf74c22de",
                  "title": "Update post test",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
                  "file": "\\test\\controllers\\postController.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "successful update",
                      "fullTitle": "Post Controller Test Post Controller CRUD operations Update post test successful update",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await postController.updatePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(201);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"success\",\n  data: {\n    text: \"this is a post\",\n  },\n});",
                      "err": {},
                      "uuid": "de117030-4c20-4aee-971b-918475917460",
                      "parentUUID": "4f7d1737-0293-422c-aa73-c2faf74c22de",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Post isn't editable",
                      "fullTitle": "Post Controller Test Post Controller CRUD operations Update post test Post isn't editable",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "PostService.updatePost = async (data) => {\n  return { success: false, error: postErrors.NOT_EDITABLE };\n};\nawait postController.updatePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Post isn't editable\",\n});",
                      "err": {},
                      "uuid": "4fab4b02-39b1-4041-86b4-860fd7393333",
                      "parentUUID": "4f7d1737-0293-422c-aa73-c2faf74c22de",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "User must be author",
                      "fullTitle": "Post Controller Test Post Controller CRUD operations Update post test User must be author",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "PostService.updatePost = async (data) => {\n  return { success: false, error: postErrors.NOT_AUTHOR };\n};\nawait postController.updatePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"User must be author\",\n});",
                      "err": {},
                      "uuid": "bdc3b7d4-eb9f-4ece-b6f8-25d10d7e1e8c",
                      "parentUUID": "4f7d1737-0293-422c-aa73-c2faf74c22de",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Post not found",
                      "fullTitle": "Post Controller Test Post Controller CRUD operations Update post test Post not found",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "PostService.updatePost = async (data) => {\n  return { success: false, error: postErrors.POST_NOT_FOUND };\n};\nawait postController.updatePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Post not found\",\n});",
                      "err": {},
                      "uuid": "36395c1b-41a5-4834-aa11-2543d5683c9d",
                      "parentUUID": "4f7d1737-0293-422c-aa73-c2faf74c22de",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "mongo error",
                      "fullTitle": "Post Controller Test Post Controller CRUD operations Update post test mongo error",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "PostService.updatePost = async (data) => {\n  return { success: false, error: postErrors.MONGO_ERR, msg: \"message\" };\n};\nawait postController.updatePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"message\",\n});",
                      "err": {},
                      "uuid": "a1a7f7de-53cf-4a7a-a885-ce6a33e4a256",
                      "parentUUID": "4f7d1737-0293-422c-aa73-c2faf74c22de",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Invalid request",
                      "fullTitle": "Post Controller Test Post Controller CRUD operations Update post test Invalid request",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "delete req.body.text;\nawait postController.updatePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Invalid request\",\n});",
                      "err": {},
                      "uuid": "5328869a-915c-40f9-8c5f-f578d29a9adf",
                      "parentUUID": "4f7d1737-0293-422c-aa73-c2faf74c22de",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "de117030-4c20-4aee-971b-918475917460",
                    "4fab4b02-39b1-4041-86b4-860fd7393333",
                    "bdc3b7d4-eb9f-4ece-b6f8-25d10d7e1e8c",
                    "36395c1b-41a5-4834-aa11-2543d5683c9d",
                    "a1a7f7de-53cf-4a7a-a885-ce6a33e4a256",
                    "5328869a-915c-40f9-8c5f-f578d29a9adf"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                },
                {
                  "uuid": "a077f443-7bfa-4fe5-91d0-c6b4da9fa073",
                  "title": "Delete post test",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
                  "file": "\\test\\controllers\\postController.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "successful delete",
                      "fullTitle": "Post Controller Test Post Controller CRUD operations Delete post test successful delete",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await postController.deletePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(204);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"success\",\n  data: null,\n});",
                      "err": {},
                      "uuid": "b3a50333-0974-405f-b723-a59b77bfabe2",
                      "parentUUID": "a077f443-7bfa-4fe5-91d0-c6b4da9fa073",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "User must be author",
                      "fullTitle": "Post Controller Test Post Controller CRUD operations Delete post test User must be author",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "PostService.deletePost = async () => {\n  return { success: false, error: postErrors.NOT_AUTHOR };\n};\nawait postController.deletePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"User must be author\",\n});",
                      "err": {},
                      "uuid": "2ce53e23-5aec-43f8-9f98-e3a22e0c111f",
                      "parentUUID": "a077f443-7bfa-4fe5-91d0-c6b4da9fa073",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Post not found",
                      "fullTitle": "Post Controller Test Post Controller CRUD operations Delete post test Post not found",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "PostService.deletePost = async () => {\n  return { success: false, error: postErrors.POST_NOT_FOUND };\n};\nawait postController.deletePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Post not found\",\n});",
                      "err": {},
                      "uuid": "3ca9c5a1-38a7-4902-a7cd-fd0b64f6c069",
                      "parentUUID": "a077f443-7bfa-4fe5-91d0-c6b4da9fa073",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Invalid request",
                      "fullTitle": "Post Controller Test Post Controller CRUD operations Delete post test Invalid request",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "delete req.params.postId;\nawait postController.deletePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Missing required parameter postId\",\n});",
                      "err": {},
                      "uuid": "8e261919-c0ed-411c-82a6-e81a036cb589",
                      "parentUUID": "a077f443-7bfa-4fe5-91d0-c6b4da9fa073",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b3a50333-0974-405f-b723-a59b77bfabe2",
                    "2ce53e23-5aec-43f8-9f98-e3a22e0c111f",
                    "3ca9c5a1-38a7-4902-a7cd-fd0b64f6c069",
                    "8e261919-c0ed-411c-82a6-e81a036cb589"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "78f9d195-2875-454e-954b-6e5a603cbec0",
              "title": "Delete post test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
              "file": "\\test\\controllers\\postController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "successful delete",
                  "fullTitle": "Post Controller Test Delete post test successful delete",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await postController.deletePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(204);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"success\",\n  data: null,\n});",
                  "err": {},
                  "uuid": "469650aa-dc1a-4a20-9e46-c514fc64637b",
                  "parentUUID": "78f9d195-2875-454e-954b-6e5a603cbec0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "User must be author",
                  "fullTitle": "Post Controller Test Delete post test User must be author",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "PostService.deletePost = async () => {\n  return { success: false, error: postErrors.NOT_AUTHOR };\n};\nawait postController.deletePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"User must be author\",\n});",
                  "err": {},
                  "uuid": "c16f6504-e872-45b1-95f0-2c20afb25324",
                  "parentUUID": "78f9d195-2875-454e-954b-6e5a603cbec0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Post not found",
                  "fullTitle": "Post Controller Test Delete post test Post not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "PostService.deletePost = async () => {\n  return { success: false, error: postErrors.POST_NOT_FOUND };\n};\nawait postController.deletePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Post not found\",\n});",
                  "err": {},
                  "uuid": "280a6eaa-3ce9-43b1-b1a0-dda925596122",
                  "parentUUID": "78f9d195-2875-454e-954b-6e5a603cbec0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid request",
                  "fullTitle": "Post Controller Test Delete post test Invalid request",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "delete req.params.postId;\nawait postController.deletePost(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Missing required parameter postId\",\n});",
                  "err": {},
                  "uuid": "f2be2e69-500c-4481-9e18-44474190e9ad",
                  "parentUUID": "78f9d195-2875-454e-954b-6e5a603cbec0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "469650aa-dc1a-4a20-9e46-c514fc64637b",
                "c16f6504-e872-45b1-95f0-2c20afb25324",
                "280a6eaa-3ce9-43b1-b1a0-dda925596122",
                "f2be2e69-500c-4481-9e18-44474190e9ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "5b963b10-230c-44d1-8d41-ef8f93d821ef",
              "title": "Must be moderator test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
              "file": "\\test\\controllers\\postController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "moderator",
                  "fullTitle": "Post Controller Test Must be moderator test moderator",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await postController.mustBeMod(req, res, next);\nexpect(res.status).to.have.been.calledWith(200);\n//expect(res.status().json).to.have.been.calledWith({});",
                  "err": {},
                  "uuid": "7b70b726-1e25-4413-8f4c-08a08f516a08",
                  "parentUUID": "5b963b10-230c-44d1-8d41-ef8f93d821ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "not moderator",
                  "fullTitle": "Post Controller Test Must be moderator test not moderator",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "PostService.isMod = () => {\n  return { success: false, error: postErrors.NOT_MOD };\n};\nawait postController.mustBeMod(req, res, next);\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"User must be moderator\",\n});",
                  "err": {},
                  "uuid": "9c2195e7-6246-421f-8db8-a811e6733921",
                  "parentUUID": "5b963b10-230c-44d1-8d41-ef8f93d821ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "not subreddit",
                  "fullTitle": "Post Controller Test Must be moderator test not subreddit",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "PostService.isMod = () => {\n  return { success: false, error: postErrors.OWNER_NOT_SUBREDDIT };\n};\nawait postController.mustBeMod(req, res, next);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"The post must belong to a subreddit\",\n});",
                  "err": {},
                  "uuid": "13fb48b8-c76a-4093-9dea-9dd9af3ab2bd",
                  "parentUUID": "5b963b10-230c-44d1-8d41-ef8f93d821ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "post not found",
                  "fullTitle": "Post Controller Test Must be moderator test post not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "PostService.isMod = () => {\n  return { success: false, error: postErrors.POST_NOT_FOUND };\n};\nawait postController.mustBeMod(req, res, next);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Post not found\",\n});",
                  "err": {},
                  "uuid": "39979fee-e89a-4cab-8e33-0ace9abbe149",
                  "parentUUID": "5b963b10-230c-44d1-8d41-ef8f93d821ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid request",
                  "fullTitle": "Post Controller Test Must be moderator test Invalid request",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "delete req.params;\nawait postController.mustBeMod(req, res, next);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Invalid request\",\n});",
                  "err": {},
                  "uuid": "64a49c1f-9f6b-4a54-a19b-c3a2a9f8471e",
                  "parentUUID": "5b963b10-230c-44d1-8d41-ef8f93d821ef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7b70b726-1e25-4413-8f4c-08a08f516a08",
                "9c2195e7-6246-421f-8db8-a811e6733921",
                "13fb48b8-c76a-4093-9dea-9dd9af3ab2bd",
                "39979fee-e89a-4cab-8e33-0ace9abbe149",
                "64a49c1f-9f6b-4a54-a19b-c3a2a9f8471e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "6b96e379-84db-41d4-b887-df67e5c9e2f1",
              "title": "Must be moderator or author test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
              "file": "\\test\\controllers\\postController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "moderator or author",
                  "fullTitle": "Post Controller Test Must be moderator or author test moderator or author",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await postController.mustBeAuthOrMod(req, res, next);\nexpect(res.status).to.have.been.calledWith(200);\n//expect(res.status().json).to.have.been.calledWith({});",
                  "err": {},
                  "uuid": "6acd3b54-5929-43ed-9cef-926e3c190593",
                  "parentUUID": "6b96e379-84db-41d4-b887-df67e5c9e2f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "not moderator nor author",
                  "fullTitle": "Post Controller Test Must be moderator or author test not moderator nor author",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "PostService.isAuthOrMod = () => {\n  return { success: false, error: postErrors.NOT_AUTHOR_OR_MOD };\n};\nawait postController.mustBeAuthOrMod(req, res, next);\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"User must be moderator\",\n});",
                  "err": {},
                  "uuid": "6744320f-3e5d-4d6d-a098-c62ae6610a87",
                  "parentUUID": "6b96e379-84db-41d4-b887-df67e5c9e2f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "post not found",
                  "fullTitle": "Post Controller Test Must be moderator or author test post not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "PostService.isAuthOrMod = () => {\n  return { success: false, error: postErrors.POST_NOT_FOUND };\n};\nawait postController.mustBeAuthOrMod(req, res, next);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Post not found\",\n});",
                  "err": {},
                  "uuid": "a9c6fc01-a5b4-4c2b-bf9b-331bbf370b60",
                  "parentUUID": "6b96e379-84db-41d4-b887-df67e5c9e2f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid request",
                  "fullTitle": "Post Controller Test Must be moderator or author test Invalid request",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "delete req.params;\nawait postController.mustBeAuthOrMod(req, res, next);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Invalid request\",\n});",
                  "err": {},
                  "uuid": "1a5ee6f3-d8bb-4562-92a8-2a009adacc34",
                  "parentUUID": "6b96e379-84db-41d4-b887-df67e5c9e2f1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6acd3b54-5929-43ed-9cef-926e3c190593",
                "6744320f-3e5d-4d6d-a098-c62ae6610a87",
                "a9c6fc01-a5b4-4c2b-bf9b-331bbf370b60",
                "1a5ee6f3-d8bb-4562-92a8-2a009adacc34"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "6ad6f0c6-c5f8-42b1-86dd-8eae41b7a103",
              "title": "Moderate post test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
              "file": "\\test\\controllers\\postController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "successful action",
                  "fullTitle": "Post Controller Test Moderate post test successful action",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await postController.moderatePost(req, res, next);\nexpect(res.status).to.have.been.calledWith(204);\nexpect(res.status().json).to.have.been.calledWith({});",
                  "err": {},
                  "uuid": "5214b1d2-c481-4638-afca-d02e5e3d0e7b",
                  "parentUUID": "6ad6f0c6-c5f8-42b1-86dd-8eae41b7a103",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "action arleady done",
                  "fullTitle": "Post Controller Test Moderate post test action arleady done",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "PostService.modAction = () => false;\nawait postController.moderatePost(req, res, next);\nexpect(res.status).to.have.been.calledWith(409);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Action is already performed\",\n});",
                  "err": {},
                  "uuid": "e5317bb0-c832-4973-85b5-35fbd01ebe5b",
                  "parentUUID": "6ad6f0c6-c5f8-42b1-86dd-8eae41b7a103",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid request",
                  "fullTitle": "Post Controller Test Moderate post test Invalid request",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.action = \"not a valid action\";\nawait postController.moderatePost(req, res, next);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Invalid post moderation action\",\n});",
                  "err": {},
                  "uuid": "85f07215-6a50-470b-97e5-c7a935b56cc4",
                  "parentUUID": "6ad6f0c6-c5f8-42b1-86dd-8eae41b7a103",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5214b1d2-c481-4638-afca-d02e5e3d0e7b",
                "e5317bb0-c832-4973-85b5-35fbd01ebe5b",
                "85f07215-6a50-470b-97e5-c7a935b56cc4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "344729eb-4fca-4a09-ae80-a7b88524f41a",
              "title": "Spam test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
              "file": "\\test\\controllers\\postController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "successful action",
                  "fullTitle": "Post Controller Test Spam test successful action",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await postController.spam(req, res, next);\nexpect(res.status).to.have.been.calledWith(204);\nexpect(res.status().json).to.have.been.calledWith({});",
                  "err": {},
                  "uuid": "29443c79-17a2-466d-9782-b5afcb8906b2",
                  "parentUUID": "344729eb-4fca-4a09-ae80-a7b88524f41a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "action arleady done",
                  "fullTitle": "Post Controller Test Spam test action arleady done",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "PostService.spam = () => {\n  return { success: false, error: postErrors.ACTION_ALREADY_DONE };\n};\nawait postController.spam(req, res, next);\nexpect(res.status).to.have.been.calledWith(409);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Action is already performed\",\n});",
                  "err": {},
                  "uuid": "649d14b2-7ba6-4832-b39a-ec8ef79b1331",
                  "parentUUID": "344729eb-4fca-4a09-ae80-a7b88524f41a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "post not found",
                  "fullTitle": "Post Controller Test Spam test post not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "PostService.spam = () => {\n  return { success: false, error: postErrors.POST_NOT_FOUND };\n};\nawait postController.spam(req, res, next);\nexpect(res.status).to.have.been.calledWith(409);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Post not found\",\n});",
                  "err": {},
                  "uuid": "5ee1fcc0-4a3b-49fb-9e2d-f7708a6c8d88",
                  "parentUUID": "344729eb-4fca-4a09-ae80-a7b88524f41a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Default values",
                  "fullTitle": "Post Controller Test Spam test Default values",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "delete req.body.dir;\nawait postController.spam(req, res, next);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Invalid request\",\n});",
                  "err": {},
                  "uuid": "d476318b-c9a3-4261-8c6c-930ecaeaea82",
                  "parentUUID": "344729eb-4fca-4a09-ae80-a7b88524f41a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid request",
                  "fullTitle": "Post Controller Test Spam test Invalid request",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "delete req.params;\nawait postController.spam(req, res, next);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Invalid request\",\n});",
                  "err": {},
                  "uuid": "cdf63e5b-7c32-41e5-b1ca-58538130e61f",
                  "parentUUID": "344729eb-4fca-4a09-ae80-a7b88524f41a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "29443c79-17a2-466d-9782-b5afcb8906b2",
                "649d14b2-7ba6-4832-b39a-ec8ef79b1331",
                "5ee1fcc0-4a3b-49fb-9e2d-f7708a6c8d88",
                "d476318b-c9a3-4261-8c6c-930ecaeaea82",
                "cdf63e5b-7c32-41e5-b1ca-58538130e61f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "03de938c-b6da-4c8a-a960-490ce1b79667",
              "title": "Post actions test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\postController.js",
              "file": "\\test\\controllers\\postController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "post successful action",
                  "fullTitle": "Post Controller Test Post actions test post successful action",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await postController.postActions(req, res, next);\nexpect(res.status).to.have.been.calledWith(204);\nexpect(res.status().json).to.have.been.calledWith({});",
                  "err": {},
                  "uuid": "1e5967f6-6cfe-4f72-817e-8f46d0035565",
                  "parentUUID": "03de938c-b6da-4c8a-a960-490ce1b79667",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "post action arleady done",
                  "fullTitle": "Post Controller Test Post actions test post action arleady done",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "PostService.postAction = () => false;\nawait postController.postActions(req, res, next);\nexpect(res.status).to.have.been.calledWith(409);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Action already performed\",\n});",
                  "err": {},
                  "uuid": "c1fa7902-16a2-41ba-822b-bda82f984322",
                  "parentUUID": "03de938c-b6da-4c8a-a960-490ce1b79667",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid request",
                  "fullTitle": "Post Controller Test Post actions test Invalid request",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "req.params.action = \"not a valid action\";\nawait postController.postActions(req, res, next);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Invalid post action\",\n});",
                  "err": {},
                  "uuid": "b0e709d5-6387-4fac-a013-fbce357f5048",
                  "parentUUID": "03de938c-b6da-4c8a-a960-490ce1b79667",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1e5967f6-6cfe-4f72-817e-8f46d0035565",
                "c1fa7902-16a2-41ba-822b-bda82f984322",
                "b0e709d5-6387-4fac-a013-fbce357f5048"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "4af08a99-9629-43ee-b05a-643fb87b1a39",
          "title": "Search controller",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\searchController.js",
          "file": "\\test\\controllers\\searchController.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "search",
              "fullTitle": "Search controller search",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await searchController.search(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"success\",\n  data: [],\n});",
              "err": {},
              "uuid": "51c9df43-1cf3-4aee-ae03-d7d7172c50a3",
              "parentUUID": "4af08a99-9629-43ee-b05a-643fb87b1a39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "default limit",
              "fullTitle": "Search controller default limit",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "delete req.query.limit;\nawait searchController.search(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"success\",\n  data: [],\n});",
              "err": {},
              "uuid": "58ff7bed-3629-4fbf-80b0-a826dadead23",
              "parentUUID": "4af08a99-9629-43ee-b05a-643fb87b1a39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "default page",
              "fullTitle": "Search controller default page",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "delete req.query.page;\nawait searchController.search(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"success\",\n  data: [],\n});",
              "err": {},
              "uuid": "7572cf76-e4b8-4362-8d48-f340e672749a",
              "parentUUID": "4af08a99-9629-43ee-b05a-643fb87b1a39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "default type",
              "fullTitle": "Search controller default type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "delete req.query.type;\nawait searchController.search(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"success\",\n  data: [],\n});",
              "err": {},
              "uuid": "288a11bc-99d3-4220-8aa4-d167c69ffdd7",
              "parentUUID": "4af08a99-9629-43ee-b05a-643fb87b1a39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "default sort",
              "fullTitle": "Search controller default sort",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "delete req.query.sort;\nawait searchController.search(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"success\",\n  data: [],\n});",
              "err": {},
              "uuid": "0cedf790-3eff-4388-abe8-ffce5eda44e9",
              "parentUUID": "4af08a99-9629-43ee-b05a-643fb87b1a39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "default time",
              "fullTitle": "Search controller default time",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.query.time = \"not a valid time\";\nawait searchController.search(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"success\",\n  data: [],\n});",
              "err": {},
              "uuid": "8873522d-0ce4-4434-bc94-d44061588e58",
              "parentUUID": "4af08a99-9629-43ee-b05a-643fb87b1a39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "default query",
              "fullTitle": "Search controller default query",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "delete req.query.q;\nawait searchController.search(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"success\",\n  data: [],\n});",
              "err": {},
              "uuid": "5f1df45a-1059-46d7-bdb1-e035ffddeaa7",
              "parentUUID": "4af08a99-9629-43ee-b05a-643fb87b1a39",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "51c9df43-1cf3-4aee-ae03-d7d7172c50a3",
            "58ff7bed-3629-4fbf-80b0-a826dadead23",
            "7572cf76-e4b8-4362-8d48-f340e672749a",
            "288a11bc-99d3-4220-8aa4-d167c69ffdd7",
            "0cedf790-3eff-4388-abe8-ffce5eda44e9",
            "8873522d-0ce4-4434-bc94-d44061588e58",
            "5f1df45a-1059-46d7-bdb1-e035ffddeaa7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "d4085c30-8679-4a1f-a30b-47c1d5a08bd0",
          "title": "Subreddit Controller Test",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
          "file": "\\test\\controllers\\subredditController.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cb088cb6-f121-44db-8a95-6bf15fe28c2b",
              "title": "Create Subreddit Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Subreddit Controller Test Create Subreddit Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    fixedName: \"Subreddit name\",\n    type: \"Public\",\n    nsfw: true,\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  createSubreddit: async (data, userName, profilePicture) => {\n    const response = {\n      success: true,\n      data: { _id: \"10\" },\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.createSubreddit(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  id: \"10\",\n});",
                  "err": {},
                  "uuid": "5558a0f3-5a18-475a-941a-756a9723313b",
                  "parentUUID": "cb088cb6-f121-44db-8a95-6bf15fe28c2b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test fail",
                  "fullTitle": "Subreddit Controller Test Create Subreddit Test second test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    type: \"Public\",\n    nsfw: true,\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  createSubreddit: async (data, userName, profilePicture) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\nawait subredditController.createSubreddit(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Invalid request\",\n});",
                  "err": {},
                  "uuid": "04946126-c19c-4867-aa66-66e8b361186e",
                  "parentUUID": "cb088cb6-f121-44db-8a95-6bf15fe28c2b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "third test fail",
                  "fullTitle": "Subreddit Controller Test Create Subreddit Test third test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {},\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  createSubreddit: async (data, userName, profilePicture) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\nawait subredditController.createSubreddit(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Invalid request\",\n});",
                  "err": {},
                  "uuid": "032d987e-7d38-4c3e-9cb7-671457ddee0a",
                  "parentUUID": "cb088cb6-f121-44db-8a95-6bf15fe28c2b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test fail",
                  "fullTitle": "Subreddit Controller Test Create Subreddit Test fourth test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    fixedName: \"Subreddit name\",\n    type: \"Public\",\n    nsfw: true,\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  createSubreddit: async (data, userName, profilePicture) => {\n    const response = {\n      success: false,\n      error: subredditErrors.ALREADY_EXISTS,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\nawait subredditController.createSubreddit(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"This name is already taken\",\n});",
                  "err": {},
                  "uuid": "5661e074-a1d8-4643-975e-501f210b3aa0",
                  "parentUUID": "cb088cb6-f121-44db-8a95-6bf15fe28c2b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fifth test fail",
                  "fullTitle": "Subreddit Controller Test Create Subreddit Test fifth test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    fixedName: \"k\",\n    type: \"Public\",\n    nsfw: true,\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  createSubreddit: async (data, userName, profilePicture) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n      msg: \"Invalid data: A subreddit name must have more or equal then 2 characters\",\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\nawait subredditController.createSubreddit(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage:\n    \"Invalid data: A subreddit name must have more or equal then 2 characters\",\n});",
                  "err": {},
                  "uuid": "89e3ca65-7c2d-454c-b8cf-29cb6a4931f5",
                  "parentUUID": "cb088cb6-f121-44db-8a95-6bf15fe28c2b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5558a0f3-5a18-475a-941a-756a9723313b",
                "04946126-c19c-4867-aa66-66e8b361186e",
                "032d987e-7d38-4c3e-9cb7-671457ddee0a",
                "5661e074-a1d8-4643-975e-501f210b3aa0",
                "89e3ca65-7c2d-454c-b8cf-29cb6a4931f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "199efee0-5156-435a-88ba-22ebdc6acdb6",
              "title": "get Subreddit Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Subreddit Controller Test get Subreddit Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  retrieveSubreddit: async (userId, name, checkOnly) => {\n    const response = {\n      success: true,\n      data: { _id: \"10\", fixedName: \"Subreddit name\" },\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.getSubredditSettings(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  data: {\n    _id: \"10\",\n    fixedName: \"Subreddit name\",\n  },\n});",
                  "err": {},
                  "uuid": "9b9202b1-4f3b-41df-8c3f-75c977ba4d48",
                  "parentUUID": "199efee0-5156-435a-88ba-22ebdc6acdb6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test fail",
                  "fullTitle": "Subreddit Controller Test get Subreddit Test second test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  retrieveSubreddit: async (userId, name, checkOnly) => {\n    const response = {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.getSubredditSettings(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Subreddit not found\",\n});",
                  "err": {},
                  "uuid": "538ea806-bb36-40f9-9d50-9792556e00c6",
                  "parentUUID": "199efee0-5156-435a-88ba-22ebdc6acdb6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "third test fail",
                  "fullTitle": "Subreddit Controller Test get Subreddit Test third test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {},\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  retrieveSubreddit: async (userId, name, checkOnly) => {\n    const response = {\n      success: false,\n      errorMessage: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.getSubredditSettings(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter subredditName\",\n});",
                  "err": {},
                  "uuid": "e0420b70-64ee-4a8b-8a14-a1f050a6c5ca",
                  "parentUUID": "199efee0-5156-435a-88ba-22ebdc6acdb6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b9202b1-4f3b-41df-8c3f-75c977ba4d48",
                "538ea806-bb36-40f9-9d50-9792556e00c6",
                "e0420b70-64ee-4a8b-8a14-a1f050a6c5ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "77ab4261-bae2-4a75-860f-2b7a485f6efb",
              "title": "delete Subreddit Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Subreddit Controller Test delete Subreddit Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  deleteSubreddit: async (subredditName, userId) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.deleteSubreddit(req, res);\nexpect(res.status).to.have.been.calledWith(204);\nexpect(res.status(204).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "8d80a58f-9224-4a26-a650-b174599d2284",
                  "parentUUID": "77ab4261-bae2-4a75-860f-2b7a485f6efb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test fail",
                  "fullTitle": "Subreddit Controller Test delete Subreddit Test second test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {},\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  deleteSubreddit: async (subredditName, userId) => {\n    const response = {\n      success: false,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\nawait subredditController.deleteSubreddit(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter subredditName\",\n});",
                  "err": {},
                  "uuid": "7ec1fd47-0c18-47da-ada6-6839db1b15f7",
                  "parentUUID": "77ab4261-bae2-4a75-860f-2b7a485f6efb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "third test fail",
                  "fullTitle": "Subreddit Controller Test delete Subreddit Test third test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  deleteSubreddit: async (subredditName, userId) => {\n    const response = {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.deleteSubreddit(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Subreddit not found\",\n});",
                  "err": {},
                  "uuid": "65ec6a3f-8cd3-45b4-a586-223b124e3aea",
                  "parentUUID": "77ab4261-bae2-4a75-860f-2b7a485f6efb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test fail",
                  "fullTitle": "Subreddit Controller Test delete Subreddit Test fourth test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  deleteSubreddit: async (subredditName, userId) => {\n    const response = {\n      success: false,\n      error: subredditErrors.NOT_OWNER,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.deleteSubreddit(req, res);\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status(401).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"you are not the owner to this subreddit\",\n});",
                  "err": {},
                  "uuid": "5de62cd9-3ead-46c5-82bb-7e8c84cdc5c2",
                  "parentUUID": "77ab4261-bae2-4a75-860f-2b7a485f6efb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8d80a58f-9224-4a26-a650-b174599d2284",
                "7ec1fd47-0c18-47da-ada6-6839db1b15f7",
                "65ec6a3f-8cd3-45b4-a586-223b124e3aea",
                "5de62cd9-3ead-46c5-82bb-7e8c84cdc5c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "4170c41c-d7f8-4b69-aace-9f9341851a6d",
              "title": "update Subreddit Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Subreddit Controller Test update Subreddit Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    nsfw: false,\n  },\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  updateSubreddit: async (subredditName, userId, data) => {\n    const response = {\n      success: true,\n      data: {\n        fixedName: \"Subreddit name\",\n        nsfw: false,\n      },\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.updateSubredditSettings(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  data: {\n    fixedName: \"Subreddit name\",\n    nsfw: false,\n  },\n});",
                  "err": {},
                  "uuid": "d538e2fa-b4e8-475d-8dfc-b8c0b5bf2861",
                  "parentUUID": "4170c41c-d7f8-4b69-aace-9f9341851a6d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test fail",
                  "fullTitle": "Subreddit Controller Test update Subreddit Test second test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    nsfw: false,\n  },\n  params: {},\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  updateSubreddit: async (subredditName, userId, data) => {\n    const response = {\n      success: false,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.updateSubredditSettings(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter subredditName\",\n});",
                  "err": {},
                  "uuid": "dd4b1303-3b1e-47c1-ada0-0d0d167aa929",
                  "parentUUID": "4170c41c-d7f8-4b69-aace-9f9341851a6d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "third test fail",
                  "fullTitle": "Subreddit Controller Test update Subreddit Test third test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    nsfw: false,\n  },\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  updateSubreddit: async (subredditName, userId, data) => {\n    const response = {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.updateSubredditSettings(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Subreddit not found\",\n});",
                  "err": {},
                  "uuid": "2d9b5caa-d561-4052-86a8-66610035ed96",
                  "parentUUID": "4170c41c-d7f8-4b69-aace-9f9341851a6d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test fail",
                  "fullTitle": "Subreddit Controller Test update Subreddit Test fourth test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    nsfw: false,\n  },\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  updateSubreddit: async (subredditName, userId, data) => {\n    const response = {\n      success: false,\n      error: subredditErrors.NOT_MODERATOR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.updateSubredditSettings(req, res);\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status(401).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"you are not moderator to preform this request\",\n});",
                  "err": {},
                  "uuid": "bc5de629-603e-4df5-9d56-31f5ab360b22",
                  "parentUUID": "4170c41c-d7f8-4b69-aace-9f9341851a6d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d538e2fa-b4e8-475d-8dfc-b8c0b5bf2861",
                "dd4b1303-3b1e-47c1-ada0-0d0d167aa929",
                "2d9b5caa-d561-4052-86a8-66610035ed96",
                "bc5de629-603e-4df5-9d56-31f5ab360b22"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "92f995a5-c268-439c-a150-419d0bd31bf4",
              "title": "/subreddits/mine/{where} Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Subreddit Controller Test /subreddits/mine/{where} Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    where: \"moderator\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  subredditsIamIn: async (userId, location) => {\n    const response = {\n      success: true,\n      data: [\n        {\n          fixedName: \"Subreddit name\",\n          nsfw: false,\n        },\n      ],\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.subredditsJoined(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  data: [\n    {\n      fixedName: \"Subreddit name\",\n      nsfw: false,\n    },\n  ],\n});",
                  "err": {},
                  "uuid": "2a704ad3-cdcb-421b-902d-ab6ea7d4e7c2",
                  "parentUUID": "92f995a5-c268-439c-a150-419d0bd31bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test fail",
                  "fullTitle": "Subreddit Controller Test /subreddits/mine/{where} Test second test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  subredditsIamIn: async (userId, location) => {\n    const response = {\n      success: false,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.subredditsJoined(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter location\",\n});",
                  "err": {},
                  "uuid": "f99dbd91-6631-416f-9c71-bc7bd9d3b370",
                  "parentUUID": "92f995a5-c268-439c-a150-419d0bd31bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "third test fail",
                  "fullTitle": "Subreddit Controller Test /subreddits/mine/{where} Test third test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    where: \"subscriberr\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  subredditsIamIn: async (userId, location) => {\n    const response = {\n      success: false,\n      error: subredditErrors.INVALID_ENUM,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.subredditsJoined(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Invalid location value !\",\n});",
                  "err": {},
                  "uuid": "28494f76-8575-4f11-8c33-5c540f954f3f",
                  "parentUUID": "92f995a5-c268-439c-a150-419d0bd31bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "third test fail",
                  "fullTitle": "Subreddit Controller Test /subreddits/mine/{where} Test third test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    where: \"subscriberr\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  subredditsIamIn: async (userId, location) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.subredditsJoined(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: undefined,\n});",
                  "err": {},
                  "uuid": "b54edeba-8b25-42e3-b4a4-98e1a11c03d0",
                  "parentUUID": "92f995a5-c268-439c-a150-419d0bd31bf4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2a704ad3-cdcb-421b-902d-ab6ea7d4e7c2",
                "f99dbd91-6631-416f-9c71-bc7bd9d3b370",
                "28494f76-8575-4f11-8c33-5c540f954f3f",
                "b54edeba-8b25-42e3-b4a4-98e1a11c03d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "5a2e28b6-0f55-43ce-a752-6400840810ee",
              "title": "/subreddits/moderator/{username} Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Subreddit Controller Test /subreddits/moderator/{username} Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    username: \"khaled\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  subredditsModeratedBy: async (userName) => {\n    const response = {\n      success: true,\n      data: [\n        {\n          fixedName: \"Subreddit name\",\n          nsfw: false,\n        },\n      ],\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.subredditsModerated(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  data: [\n    {\n      fixedName: \"Subreddit name\",\n      nsfw: false,\n    },\n  ],\n});",
                  "err": {},
                  "uuid": "2c3e73cd-4a8b-461f-ad92-9c29ead767ea",
                  "parentUUID": "5a2e28b6-0f55-43ce-a752-6400840810ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test fail",
                  "fullTitle": "Subreddit Controller Test /subreddits/moderator/{username} Test second test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {},\n};\nconst UserService = {};\nconst subredditService = {\n  subredditsModeratedBy: async (userName) => {\n    const response = {\n      success: false,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\nawait subredditController.subredditsModerated(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter userName\",\n});",
                  "err": {},
                  "uuid": "5b5fff33-c211-49ac-a112-96217941bfa6",
                  "parentUUID": "5a2e28b6-0f55-43ce-a752-6400840810ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "third test fail",
                  "fullTitle": "Subreddit Controller Test /subreddits/moderator/{username} Test third test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {},\n};\nconst UserService = {};\nconst subredditService = {\n  subredditsModeratedBy: async (userName) => {\n    const response = {\n      success: false,\n      error:subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\nawait subredditController.subredditsModerated(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: undefined,\n});",
                  "err": {},
                  "uuid": "a7b1b292-da62-434d-baa2-135fc23fd012",
                  "parentUUID": "5a2e28b6-0f55-43ce-a752-6400840810ee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2c3e73cd-4a8b-461f-ad92-9c29ead767ea",
                "5b5fff33-c211-49ac-a112-96217941bfa6",
                "a7b1b292-da62-434d-baa2-135fc23fd012"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "92e5ee79-5441-41e1-aa87-0bb7862e1906",
              "title": "invite moderator Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Subreddit Controller Test invite moderator Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"subreddit\",\n    moderatorName: \"khaled\",\n  },\n  user: {\n    _id: \"1\",\n  },\n  body: {\n    permissions: {\n      all: false,\n      access: true,\n      config: true,\n      flair: false,\n      posts: false,\n    },\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  inviteMod: async (subredditName, userId, modName, data) => {\n    return { success: true };\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.inviteModerator(req, res, next);\nexpect(res.status).to.have.been.calledWith(204);",
                  "err": {},
                  "uuid": "31161669-d1da-426f-8c01-16b28f0a0c8e",
                  "parentUUID": "92e5ee79-5441-41e1-aa87-0bb7862e1906",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test fail",
                  "fullTitle": "Subreddit Controller Test invite moderator Test second test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    moderatorName: \"khaled\",\n  },\n  user: {\n    _id: \"1\",\n  },\n  body: {\n    permissions: {\n      all: false,\n      access: true,\n      config: true,\n      flair: false,\n      posts: false,\n    },\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  inviteMod: async (subredditName, userId, modName, data) => {\n    return { success: true };\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.inviteModerator(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter subredditName\",\n});",
                  "err": {},
                  "uuid": "2f6fb566-70a8-40e8-b053-ae2b0bb37ac7",
                  "parentUUID": "92e5ee79-5441-41e1-aa87-0bb7862e1906",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "third test fail",
                  "fullTitle": "Subreddit Controller Test invite moderator Test third test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"subreddit\",\n  },\n  user: {\n    _id: \"1\",\n  },\n  body: {\n    permissions: {\n      all: false,\n      access: true,\n      config: true,\n      flair: false,\n      posts: false,\n    },\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  inviteMod: async (subredditName, userId, modName, data) => {\n    return { success: true };\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.inviteModerator(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter moderatorName\",\n});",
                  "err": {},
                  "uuid": "31085f09-eba6-400e-bd77-9f12e3b7a05b",
                  "parentUUID": "92e5ee79-5441-41e1-aa87-0bb7862e1906",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test fail",
                  "fullTitle": "Subreddit Controller Test invite moderator Test fourth test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"subreddit\",\n    moderatorName: \"khaled\",\n  },\n  user: {\n    _id: \"1\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  inviteMod: async (subredditName, userId, modName, data) => {\n    return { success: false };\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.inviteModerator(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"please provide a permissions\",\n});",
                  "err": {},
                  "uuid": "62916661-c8ea-44c7-a742-530602d25b53",
                  "parentUUID": "92e5ee79-5441-41e1-aa87-0bb7862e1906",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fifth test fail",
                  "fullTitle": "Subreddit Controller Test invite moderator Test fifth test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"subreddit\",\n    moderatorName: \"khaled\",\n  },\n  user: {\n    _id: \"1\",\n  },\n  body: {\n    permissions: {\n      all: false,\n      access: true,\n      config: true,\n      flair: false,\n      posts: false,\n    },\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  inviteMod: async (subredditName, userId, modName, data) => {\n    return { success: false, error: subredditErrors.SUBREDDIT_NOT_FOUND };\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.inviteModerator(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Subreddit not found\",\n});",
                  "err": {},
                  "uuid": "45ede208-dddd-4a16-af66-230c831ec2f8",
                  "parentUUID": "92e5ee79-5441-41e1-aa87-0bb7862e1906",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "test fail",
                  "fullTitle": "Subreddit Controller Test invite moderator Test test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"subreddit\",\n    moderatorName: \"khaled\",\n  },\n  user: {\n    _id: \"1\",\n  },\n  body: {\n    permissions: {\n      all: false,\n      access: true,\n      config: true,\n      flair: false,\n      posts: false,\n    },\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  inviteMod: async (subredditName, userId, modName, data) => {\n    return { success: false, error: userErrors.USER_IS_ALREADY_INVITED };\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.inviteModerator(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"user is already invited\",\n});",
                  "err": {},
                  "uuid": "f6d4ce56-795b-4d0d-afc7-dd35afdfbbed",
                  "parentUUID": "92e5ee79-5441-41e1-aa87-0bb7862e1906",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "6th test fail",
                  "fullTitle": "Subreddit Controller Test invite moderator Test 6th test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"subreddit\",\n    moderatorName: \"khaled\",\n  },\n  user: {\n    _id: \"1\",\n  },\n  body: {\n    permissions: {\n      all: false,\n      access: true,\n      config: true,\n      flair: false,\n      posts: false,\n    },\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  inviteMod: async (subredditName, userId, modName, data) => {\n    return { success: false, error: subredditErrors.NOT_MODERATOR };\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.inviteModerator(req, res);\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status(401).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"you are not moderator to preform this action\",\n});",
                  "err": {},
                  "uuid": "604365e2-4d5a-4ec7-b357-23bb78846cf2",
                  "parentUUID": "92e5ee79-5441-41e1-aa87-0bb7862e1906",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "7th test success",
                  "fullTitle": "Subreddit Controller Test invite moderator Test 7th test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"subreddit\",\n    moderatorName: \"khaled\",\n  },\n  user: {\n    _id: \"1\",\n  },\n  body: {\n    permissions: {\n      all: false,\n      access: true,\n      config: true,\n      flair: false,\n      posts: false,\n    },\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  inviteMod: async (subredditName, userId, modName, data) => {\n    return { success: false, error: userErrors.USER_NOT_FOUND };\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.inviteModerator(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"user not found\",\n});",
                  "err": {},
                  "uuid": "b957f32c-6e6b-420a-b35a-43ad523bc810",
                  "parentUUID": "92e5ee79-5441-41e1-aa87-0bb7862e1906",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "8th test fail",
                  "fullTitle": "Subreddit Controller Test invite moderator Test 8th test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"subreddit\",\n    moderatorName: \"khaled\",\n  },\n  user: {\n    _id: \"1\",\n  },\n  body: {\n    permissions: {\n      all: false,\n      access: true,\n      config: true,\n      flair: false,\n      posts: false,\n    },\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  inviteMod: async (subredditName, userId, modName, data) => {\n    return { success: false, error: userErrors.ALREADY_MODERATOR };\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.inviteModerator(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"user is already moderator\",\n});",
                  "err": {},
                  "uuid": "67792af0-9d81-4c5c-ba84-a1d7f5c88582",
                  "parentUUID": "92e5ee79-5441-41e1-aa87-0bb7862e1906",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "9th test success",
                  "fullTitle": "Subreddit Controller Test invite moderator Test 9th test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"subreddit\",\n    moderatorName: \"khaled\",\n  },\n  user: {\n    _id: \"1\",\n  },\n  body: {\n    p: {\n      all: false,\n      access: true,\n      config: true,\n      flair: false,\n      posts: false,\n    },\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  inviteMod: async (subredditName, userId, modName, data) => {\n    return { success: false, error: subredditErrors.MONGO_ERR };\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.inviteModerator(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: undefined,\n});",
                  "err": {},
                  "uuid": "682b9ac6-5098-4115-97d6-39eb963731c6",
                  "parentUUID": "92e5ee79-5441-41e1-aa87-0bb7862e1906",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "31161669-d1da-426f-8c01-16b28f0a0c8e",
                "2f6fb566-70a8-40e8-b053-ae2b0bb37ac7",
                "31085f09-eba6-400e-bd77-9f12e3b7a05b",
                "62916661-c8ea-44c7-a742-530602d25b53",
                "45ede208-dddd-4a16-af66-230c831ec2f8",
                "f6d4ce56-795b-4d0d-afc7-dd35afdfbbed",
                "604365e2-4d5a-4ec7-b357-23bb78846cf2",
                "b957f32c-6e6b-420a-b35a-43ad523bc810",
                "67792af0-9d81-4c5c-ba84-a1d7f5c88582",
                "682b9ac6-5098-4115-97d6-39eb963731c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "0415d968-cbf9-4721-9e5a-9e3b574507fc",
              "title": "ModeratorInvitation invite Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1st test success",
                  "fullTitle": "Subreddit Controller Test ModeratorInvitation invite Test 1st test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"subreddit\",\n    action: \"accept\",\n  },\n  user: {\n    _id: \"1\",\n    userName: \"khaled\",\n    profilePicture: \"defult.png\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  handleInvitation: async (\n    userId,\n    userName,\n    profilePicture,\n    subredditName,\n    action\n  ) => {\n    return { success: true };\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.ModeratorInvitation(req, res);\nexpect(res.status).to.have.been.calledWith(204);",
                  "err": {},
                  "uuid": "7a88c8bf-ceab-49d8-84bc-3a57f2906cbf",
                  "parentUUID": "0415d968-cbf9-4721-9e5a-9e3b574507fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2nd test success",
                  "fullTitle": "Subreddit Controller Test ModeratorInvitation invite Test 2nd test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"subreddit\",\n    action: \"reject\",\n  },\n  user: {\n    _id: \"1\",\n    userName: \"khaled\",\n    profilePicture: \"defult.png\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  handleInvitation: async (\n    userId,\n    userName,\n    profilePicture,\n    subredditName,\n    action\n  ) => {\n    return { success: true };\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.ModeratorInvitation(req, res);\nexpect(res.status).to.have.been.calledWith(204);",
                  "err": {},
                  "uuid": "f6e1153c-a25b-4744-a49d-7c51ecaafd4d",
                  "parentUUID": "0415d968-cbf9-4721-9e5a-9e3b574507fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3rd test fail",
                  "fullTitle": "Subreddit Controller Test ModeratorInvitation invite Test 3rd test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"subreddit\",\n    action: \"acceptt\",\n  },\n  user: {\n    _id: \"1\",\n    userName: \"khaled\",\n    profilePicture: \"defult.png\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  handleInvitation: async (\n    userId,\n    userName,\n    profilePicture,\n    subredditName,\n    action\n  ) => {\n    return { success: false };\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.ModeratorInvitation(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Invalid Enum value\",\n});",
                  "err": {},
                  "uuid": "6442b6d0-9fef-420f-b2d0-7277cfaa8a10",
                  "parentUUID": "0415d968-cbf9-4721-9e5a-9e3b574507fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4th test fail",
                  "fullTitle": "Subreddit Controller Test ModeratorInvitation invite Test 4th test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"subreddit\",\n  },\n  user: {\n    _id: \"1\",\n    userName: \"khaled\",\n    profilePicture: \"defult.png\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  handleInvitation: async (\n    userId,\n    userName,\n    profilePicture,\n    subredditName,\n    action\n  ) => {\n    return { success: false };\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.ModeratorInvitation(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter action\",\n});",
                  "err": {},
                  "uuid": "eb2ff171-f618-4542-a64d-ce2497980ef3",
                  "parentUUID": "0415d968-cbf9-4721-9e5a-9e3b574507fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5th test success",
                  "fullTitle": "Subreddit Controller Test ModeratorInvitation invite Test 5th test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    action: \"accept\",\n  },\n  user: {\n    _id: \"1\",\n    userName: \"khaled\",\n    profilePicture: \"defult.png\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  handleInvitation: async (\n    userId,\n    userName,\n    profilePicture,\n    subredditName,\n    action\n  ) => {\n    return { success: true };\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.ModeratorInvitation(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter subredditName\",\n});",
                  "err": {},
                  "uuid": "8dd57304-c9f7-4672-ae1d-8ef6a1f87ab2",
                  "parentUUID": "0415d968-cbf9-4721-9e5a-9e3b574507fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "6th test fail",
                  "fullTitle": "Subreddit Controller Test ModeratorInvitation invite Test 6th test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"subreddit\",\n    action: \"accept\",\n  },\n  user: {\n    _id: \"1\",\n    userName: \"khaled\",\n    profilePicture: \"defult.png\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  handleInvitation: async (\n    userId,\n    userName,\n    profilePicture,\n    subredditName,\n    action\n  ) => {\n    return {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.ModeratorInvitation(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Subreddit not found\",\n});",
                  "err": {},
                  "uuid": "c26628e7-115e-469d-aac2-2a89a2fd095a",
                  "parentUUID": "0415d968-cbf9-4721-9e5a-9e3b574507fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "7th test fail",
                  "fullTitle": "Subreddit Controller Test ModeratorInvitation invite Test 7th test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"subreddit\",\n    action: \"accept\",\n  },\n  user: {\n    _id: \"1\",\n    userName: \"khaled\",\n    profilePicture: \"defult.png\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  handleInvitation: async (\n    userId,\n    userName,\n    profilePicture,\n    subredditName,\n    action\n  ) => {\n    return { success: false, error: userErrors.ALREADY_MODERATOR };\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.ModeratorInvitation(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"user already moderator\",\n});",
                  "err": {},
                  "uuid": "99f31e23-2ac2-44a6-a006-504cee5a0bfb",
                  "parentUUID": "0415d968-cbf9-4721-9e5a-9e3b574507fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "8th test fail",
                  "fullTitle": "Subreddit Controller Test ModeratorInvitation invite Test 8th test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"subreddit\",\n    action: \"accept\",\n  },\n  user: {\n    _id: \"1\",\n    userName: \"khaled\",\n    profilePicture: \"defult.png\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  handleInvitation: async (\n    userId,\n    userName,\n    profilePicture,\n    subredditName,\n    action\n  ) => {\n    return { success: false, error: subredditErrors.NO_INVITATION };\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.ModeratorInvitation(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"there is no moderation invitation to this subreddit\",\n});",
                  "err": {},
                  "uuid": "f081c655-d71a-47bc-b553-b9b4516de8e6",
                  "parentUUID": "0415d968-cbf9-4721-9e5a-9e3b574507fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "9th test fail",
                  "fullTitle": "Subreddit Controller Test ModeratorInvitation invite Test 9th test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"subreddit\",\n    action: \"reject\",\n  },\n  user: {\n    _id: \"1\",\n    userName: \"khaled\",\n    profilePicture: \"defult.png\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  handleInvitation: async (\n    userId,\n    userName,\n    profilePicture,\n    subredditName,\n    action\n  ) => {\n    return { success: false, error: subredditErrors.MONGO_ERR };\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.ModeratorInvitation(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: undefined,\n});",
                  "err": {},
                  "uuid": "4fa1be45-d8b9-4a02-9b9e-ca341790511c",
                  "parentUUID": "0415d968-cbf9-4721-9e5a-9e3b574507fc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a88c8bf-ceab-49d8-84bc-3a57f2906cbf",
                "f6e1153c-a25b-4744-a49d-7c51ecaafd4d",
                "6442b6d0-9fef-420f-b2d0-7277cfaa8a10",
                "eb2ff171-f618-4542-a64d-ce2497980ef3",
                "8dd57304-c9f7-4672-ae1d-8ef6a1f87ab2",
                "c26628e7-115e-469d-aac2-2a89a2fd095a",
                "99f31e23-2ac2-44a6-a006-504cee5a0bfb",
                "f081c655-d71a-47bc-b553-b9b4516de8e6",
                "4fa1be45-d8b9-4a02-9b9e-ca341790511c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "f799fbde-dae0-43c6-873d-d207e8c36801",
              "title": "Subscribe Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "successful subscribe",
                  "fullTitle": "Subreddit Controller Test Subscribe Test successful subscribe",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await subredditController.subscribe(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "aad917b6-e984-47a7-b737-093f2267bc67",
                  "parentUUID": "f799fbde-dae0-43c6-873d-d207e8c36801",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid action",
                  "fullTitle": "Subreddit Controller Test Subscribe Test invalid action",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "UserService.subscribe = async () => false;\nawait subredditController.subscribe(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Invalid subscribtion action\",\n});",
                  "err": {},
                  "uuid": "9678660e-295f-4ed5-8eb0-0e81ff1b6dc4",
                  "parentUUID": "f799fbde-dae0-43c6-873d-d207e8c36801",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "user banned",
                  "fullTitle": "Subreddit Controller Test Subscribe Test user banned",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "subredditService.subscriable = async () => {\n  return { success: false, error: subredditErrors.BANNED };\n};\nawait subredditController.subscribe(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"user is banned from subreddit\",\n});",
                  "err": {},
                  "uuid": "2ff54c4f-f73e-4d42-832b-cae18ca19853",
                  "parentUUID": "f799fbde-dae0-43c6-873d-d207e8c36801",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "subreddit not found",
                  "fullTitle": "Subreddit Controller Test Subscribe Test subreddit not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "subredditService.subscriable = async () => {\n  return { success: false, error: subredditErrors.SUBREDDIT_NOT_FOUND };\n};\nawait subredditController.subscribe(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Subreddit not found\",\n});",
                  "err": {},
                  "uuid": "c3aa11eb-6ed7-4a87-b72d-3d7d4b354d61",
                  "parentUUID": "f799fbde-dae0-43c6-873d-d207e8c36801",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid request",
                  "fullTitle": "Subreddit Controller Test Subscribe Test invalid request",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "delete req.params.subredditName;\nawait subredditController.subscribe(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Invalid request\",\n});",
                  "err": {},
                  "uuid": "a6de7a86-1279-4a93-83ca-c5eefa926ba6",
                  "parentUUID": "f799fbde-dae0-43c6-873d-d207e8c36801",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aad917b6-e984-47a7-b737-093f2267bc67",
                "9678660e-295f-4ed5-8eb0-0e81ff1b6dc4",
                "2ff54c4f-f73e-4d42-832b-cae18ca19853",
                "c3aa11eb-6ed7-4a87-b72d-3d7d4b354d61",
                "a6de7a86-1279-4a93-83ca-c5eefa926ba6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "e6195d2d-9f50-4b80-9934-dbc8ee0ab19d",
              "title": "updatePermissions Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1st test success",
                  "fullTitle": "Subreddit Controller Test updatePermissions Test 1st test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    moderatorName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    permissions: {\n      all: true,\n      access: true,\n      config: true,\n      flair: true,\n      posts: true,\n    },\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  updateModeratorSettings: async (\n    subredditName,\n    userId,\n    modName,\n    data\n  ) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.updatePermissions(req, res);\nexpect(res.status).to.have.been.calledWith(204);\nexpect(res.status(204).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "a3070840-456a-409b-8d65-d0485fe52547",
                  "parentUUID": "e6195d2d-9f50-4b80-9934-dbc8ee0ab19d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2nd test fail",
                  "fullTitle": "Subreddit Controller Test updatePermissions Test 2nd test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    moderatorName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    permissions: {\n      all: true,\n      access: true,\n      config: true,\n      flair: true,\n      posts: true,\n    },\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  updateModeratorSettings: async (\n    subredditName,\n    userId,\n    modName,\n    data\n  ) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.updatePermissions(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter subredditName\",\n});",
                  "err": {},
                  "uuid": "498c1df5-c8cf-4802-9335-f5da1c58e6a1",
                  "parentUUID": "e6195d2d-9f50-4b80-9934-dbc8ee0ab19d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3rd test fail",
                  "fullTitle": "Subreddit Controller Test updatePermissions Test 3rd test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    permissions: {\n      all: true,\n      access: true,\n      config: true,\n      flair: true,\n      posts: true,\n    },\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  updateModeratorSettings: async (\n    subredditName,\n    userId,\n    modName,\n    data\n  ) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.updatePermissions(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter moderatorName\",\n});",
                  "err": {},
                  "uuid": "d793a5da-81b6-4772-93d6-ee109fa571f4",
                  "parentUUID": "e6195d2d-9f50-4b80-9934-dbc8ee0ab19d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4th test fail",
                  "fullTitle": "Subreddit Controller Test updatePermissions Test 4th test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    moderatorName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    permissions: {\n      all: true,\n      access: true,\n      config: true,\n      flair: true,\n      posts: true,\n    },\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  updateModeratorSettings: async (\n    subredditName,\n    userId,\n    modName,\n    data\n  ) => {\n    const response = {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.updatePermissions(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Subreddit not found\",\n});",
                  "err": {},
                  "uuid": "2400f122-d771-49fd-b1b1-786d50b8d5ae",
                  "parentUUID": "e6195d2d-9f50-4b80-9934-dbc8ee0ab19d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5th test fail",
                  "fullTitle": "Subreddit Controller Test updatePermissions Test 5th test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    moderatorName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    permissions: {\n      all: true,\n      access: true,\n      config: true,\n      flair: true,\n      posts: true,\n    },\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  updateModeratorSettings: async (\n    subredditName,\n    userId,\n    modName,\n    data\n  ) => {\n    const response = {\n      success: false,\n      error: subredditErrors.NOT_MODERATOR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.updatePermissions(req, res);\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status(401).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"you are not moderator to preform this action\",\n});",
                  "err": {},
                  "uuid": "cae8a65c-e506-417d-9fb9-b00387e049cc",
                  "parentUUID": "e6195d2d-9f50-4b80-9934-dbc8ee0ab19d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": " test fail",
                  "fullTitle": "Subreddit Controller Test updatePermissions Test  test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    moderatorName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    permissions: {\n      all: true,\n      access: true,\n      config: true,\n      flair: true,\n      posts: true,\n    },\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  updateModeratorSettings: async (\n    subredditName,\n    userId,\n    modName,\n    data\n  ) => {\n    const response = {\n      success: false,\n      error: subredditErrors.CANNOT_UPDATE,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.updatePermissions(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"cannot update mod higher than you in mod tree\",\n});",
                  "err": {},
                  "uuid": "aba5c404-d4b2-4593-98b3-8b91b620bfb0",
                  "parentUUID": "e6195d2d-9f50-4b80-9934-dbc8ee0ab19d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "6th test fail",
                  "fullTitle": "Subreddit Controller Test updatePermissions Test 6th test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    moderatorName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    permissions: {\n      all: true,\n      access: true,\n      config: true,\n      flair: true,\n      posts: true,\n    },\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  updateModeratorSettings: async (\n    subredditName,\n    userId,\n    modName,\n    data\n  ) => {\n    const response = {\n      success: false,\n      error: userErrors.USER_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.updatePermissions(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"user not found\",\n});",
                  "err": {},
                  "uuid": "4360d363-be12-4eb9-8863-d3bd93dd0d5c",
                  "parentUUID": "e6195d2d-9f50-4b80-9934-dbc8ee0ab19d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "7th test fail",
                  "fullTitle": "Subreddit Controller Test updatePermissions Test 7th test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    moderatorName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    permissions: {\n      all: true,\n      access: true,\n      config: true,\n      flair: true,\n      posts: true,\n    },\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  updateModeratorSettings: async (\n    subredditName,\n    userId,\n    modName,\n    data\n  ) => {\n    const response = {\n      success: false,\n      error: userErrors.Not_MODERATOR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.updatePermissions(req, res);\nexpect(res.status).to.have.been.calledWith(204);\nexpect(res.status(204).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"user is not a moderator\",\n});",
                  "err": {},
                  "uuid": "3e1764ca-57ac-44b9-98a2-887294e104fe",
                  "parentUUID": "e6195d2d-9f50-4b80-9934-dbc8ee0ab19d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "8th test fail",
                  "fullTitle": "Subreddit Controller Test updatePermissions Test 8th test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    moderatorName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    permissions: {\n      all: true,\n      access: true,\n      config: true,\n      flair: true,\n      posts: true,\n    },\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  updateModeratorSettings: async (\n    subredditName,\n    userId,\n    modName,\n    data\n  ) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.updatePermissions(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: undefined,\n});",
                  "err": {},
                  "uuid": "f471e447-4180-45f4-8188-e27312d5dbe9",
                  "parentUUID": "e6195d2d-9f50-4b80-9934-dbc8ee0ab19d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a3070840-456a-409b-8d65-d0485fe52547",
                "498c1df5-c8cf-4802-9335-f5da1c58e6a1",
                "d793a5da-81b6-4772-93d6-ee109fa571f4",
                "2400f122-d771-49fd-b1b1-786d50b8d5ae",
                "cae8a65c-e506-417d-9fb9-b00387e049cc",
                "aba5c404-d4b2-4593-98b3-8b91b620bfb0",
                "4360d363-be12-4eb9-8863-d3bd93dd0d5c",
                "3e1764ca-57ac-44b9-98a2-887294e104fe",
                "f471e447-4180-45f4-8188-e27312d5dbe9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "fcc26c6f-d313-4c5f-b1e5-3f8bca0c3293",
              "title": "leaveModerator Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1st test success",
                  "fullTitle": "Subreddit Controller Test leaveModerator Test 1st test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  leaveMod: async (userId, subredditName) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.leaveModerator(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  data: {\n    _id: \"10\",\n    fixedName: \"Subreddit name\",\n  },\n});",
                  "err": {},
                  "uuid": "f8f02712-82ea-4b63-ae32-41f80f12181d",
                  "parentUUID": "fcc26c6f-d313-4c5f-b1e5-3f8bca0c3293",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2nd test success",
                  "fullTitle": "Subreddit Controller Test leaveModerator Test 2nd test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  leaveMod: async (userId, subredditName) => {\n    const response = {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.leaveModerator(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Subreddit not found\",\n});",
                  "err": {},
                  "uuid": "b087d417-b41c-4c2a-9311-d42980104085",
                  "parentUUID": "fcc26c6f-d313-4c5f-b1e5-3f8bca0c3293",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3rd test fail",
                  "fullTitle": "Subreddit Controller Test leaveModerator Test 3rd test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {},\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  leaveMod: async (userId, subredditName) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.leaveModerator(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter subredditName\",\n});",
                  "err": {},
                  "uuid": "aaba3394-eacd-4f43-a4de-1df4de632d95",
                  "parentUUID": "fcc26c6f-d313-4c5f-b1e5-3f8bca0c3293",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4th test fail",
                  "fullTitle": "Subreddit Controller Test leaveModerator Test 4th test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  leaveMod: async (userId, subredditName) => {\n    const response = {\n      success: false,\n      error: subredditErrors.NOT_MODERATOR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.leaveModerator(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"user is not a moderator\",\n});",
                  "err": {},
                  "uuid": "cf0774f6-0993-4426-8dc2-b573dec94092",
                  "parentUUID": "fcc26c6f-d313-4c5f-b1e5-3f8bca0c3293",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5th test fail",
                  "fullTitle": "Subreddit Controller Test leaveModerator Test 5th test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  leaveMod: async (userId, subredditName) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.leaveModerator(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: undefined,\n});",
                  "err": {},
                  "uuid": "b602e37d-560b-497b-b955-ab79310a5abd",
                  "parentUUID": "fcc26c6f-d313-4c5f-b1e5-3f8bca0c3293",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f8f02712-82ea-4b63-ae32-41f80f12181d",
                "b087d417-b41c-4c2a-9311-d42980104085",
                "aaba3394-eacd-4f43-a4de-1df4de632d95",
                "cf0774f6-0993-4426-8dc2-b573dec94092",
                "b602e37d-560b-497b-b955-ab79310a5abd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "db22802f-cf91-4564-a392-897d924ac1a0",
              "title": "Favourite Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Subreddit Controller Test Favourite Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  handleFavourite: async (userId, subredditName) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.Favourite(req, res);\nexpect(res.status).to.have.been.calledWith(204);\nexpect(res.status(204).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "d573c04f-68a0-45de-b976-88537224acbd",
                  "parentUUID": "db22802f-cf91-4564-a392-897d924ac1a0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2nd test fail",
                  "fullTitle": "Subreddit Controller Test Favourite Test 2nd test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {},\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  handleFavourite: async (userId, subredditName) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.Favourite(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter subredditName\",\n});",
                  "err": {},
                  "uuid": "bf21249e-de5c-4f8d-a4ba-9acb757bc010",
                  "parentUUID": "db22802f-cf91-4564-a392-897d924ac1a0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3rd test fail",
                  "fullTitle": "Subreddit Controller Test Favourite Test 3rd test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  handleFavourite: async (userId, subredditName) => {\n    const response = {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.Favourite(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Subreddit not found\",\n});",
                  "err": {},
                  "uuid": "32cb5c81-b3ed-457c-99b4-21595a3812b5",
                  "parentUUID": "db22802f-cf91-4564-a392-897d924ac1a0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4th test fail",
                  "fullTitle": "Subreddit Controller Test Favourite Test 4th test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  handleFavourite: async (userId, subredditName) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.Favourite(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: undefined,\n});",
                  "err": {},
                  "uuid": "baf06be0-eadd-4f19-8f96-56fed77a46c3",
                  "parentUUID": "db22802f-cf91-4564-a392-897d924ac1a0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d573c04f-68a0-45de-b976-88537224acbd",
                "bf21249e-de5c-4f8d-a4ba-9acb757bc010",
                "32cb5c81-b3ed-457c-99b4-21595a3812b5",
                "baf06be0-eadd-4f19-8f96-56fed77a46c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "306b4ad9-19aa-42b3-9f01-2987967f084a",
              "title": "favouriteSubreddits Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Subreddit Controller Test favouriteSubreddits Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  getFavourites: async (userId) => {\n    const response = {\n      success: true,\n      data: [{ _id: \"10\", fixedName: \"Subreddit name\" }],\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.favouriteSubreddits(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  data: [{ _id: \"10\", fixedName: \"Subreddit name\" }],\n});",
                  "err": {},
                  "uuid": "2f56395b-ba9c-4895-b1a5-fed3bc0780f6",
                  "parentUUID": "306b4ad9-19aa-42b3-9f01-2987967f084a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2nd test fail",
                  "fullTitle": "Subreddit Controller Test favouriteSubreddits Test 2nd test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  getFavourites: async (userId) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.favouriteSubreddits(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: undefined,\n});",
                  "err": {},
                  "uuid": "bb3f10ad-247d-4365-83f0-0104090c3536",
                  "parentUUID": "306b4ad9-19aa-42b3-9f01-2987967f084a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2f56395b-ba9c-4895-b1a5-fed3bc0780f6",
                "bb3f10ad-247d-4365-83f0-0104090c3536"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "a44bb8a6-f7f7-4929-8d09-213fd7a0c76b",
              "title": "banSettings Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1st test success",
                  "fullTitle": "Subreddit Controller Test banSettings Test 1st test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"ban\",\n    userName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    punish_type: \"No Spoiler\",\n    Note: \"he is bad person\",\n    punishReason: \"not dowing his homework\",\n    duration: 20,\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  banUnban: async (userId, subredditName, banedUser, action, data) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.banSettings(req, res, next);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(204).json).to.have.been.calledWith({});",
                  "err": {},
                  "uuid": "d80839e2-83bb-40e2-9af4-7e0c05222650",
                  "parentUUID": "a44bb8a6-f7f7-4929-8d09-213fd7a0c76b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2nd test success",
                  "fullTitle": "Subreddit Controller Test banSettings Test 2nd test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    action: \"ban\",\n    userName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    punish_type: \"No Spoiler\",\n    Note: \"he is bad person\",\n    punishReason: \"not dowing his homework\",\n    duration: 20,\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  banUnban: async (userId, subredditName, banedUser, action, data) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.banSettings(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter subredditName\",\n});",
                  "err": {},
                  "uuid": "f00d42fc-13d5-4724-9ef8-a353335598b6",
                  "parentUUID": "a44bb8a6-f7f7-4929-8d09-213fd7a0c76b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3rd test success",
                  "fullTitle": "Subreddit Controller Test banSettings Test 3rd test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"ban\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    punish_type: \"No Spoiler\",\n    Note: \"he is bad person\",\n    punishReason: \"not dowing his homework\",\n    duration: 20,\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  banUnban: async (userId, subredditName, banedUser, action, data) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.banSettings(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter banedUser\",\n});",
                  "err": {},
                  "uuid": "8e69dfbb-5eb1-46bd-9b98-ed44a2a8b57a",
                  "parentUUID": "a44bb8a6-f7f7-4929-8d09-213fd7a0c76b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4th test success",
                  "fullTitle": "Subreddit Controller Test banSettings Test 4th test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    userName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    punish_type: \"No Spoiler\",\n    Note: \"he is bad person\",\n    punishReason: \"not dowing his homework\",\n    duration: 20,\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  banUnban: async (userId, subredditName, banedUser, action, data) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.banSettings(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter action\",\n});",
                  "err": {},
                  "uuid": "bffada17-c248-4c12-a421-f4d56eb0bf56",
                  "parentUUID": "a44bb8a6-f7f7-4929-8d09-213fd7a0c76b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5th test success",
                  "fullTitle": "Subreddit Controller Test banSettings Test 5th test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"bann\",\n    userName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    punish_type: \"No Spoiler\",\n    Note: \"he is bad person\",\n    punishReason: \"not dowing his homework\",\n    duration: 20,\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  banUnban: async (userId, subredditName, banedUser, action, data) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.banSettings(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Invalid Enum value [ban,unban]\",\n});",
                  "err": {},
                  "uuid": "c447a3c2-ead4-4f0a-93b1-167bd2c936e1",
                  "parentUUID": "a44bb8a6-f7f7-4929-8d09-213fd7a0c76b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "test fail",
                  "fullTitle": "Subreddit Controller Test banSettings Test test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"ban\",\n    userName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    punish_type: \"No Spoiler\",\n    Note: \"he is bad person\",\n    punishReason: \"not dowing his homework\",\n    duration: 20,\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  banUnban: async (userId, subredditName, banedUser, action, data) => {\n    const response = {\n      success: false,\n      error:userErrors.USER_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.banSettings(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"user not found\",\n});",
                  "err": {},
                  "uuid": "276ccc0a-1840-430c-82bb-1850c41f16da",
                  "parentUUID": "a44bb8a6-f7f7-4929-8d09-213fd7a0c76b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5th test success",
                  "fullTitle": "Subreddit Controller Test banSettings Test 5th test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"ban\",\n    userName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    punish_type: \"No Spoiler\",\n    Note: \"he is bad person\",\n    punishReason: \"not dowing his homework\",\n    duration: 20,\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  banUnban: async (userId, subredditName, banedUser, action, data) => {\n    const response = {\n      success: false,error:userErrors.MODERATOR\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.banSettings(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"user is a moderator cant make this action\",\n});",
                  "err": {},
                  "uuid": "fc33e4c4-fa8a-4ab8-99e5-6c87d9499b57",
                  "parentUUID": "a44bb8a6-f7f7-4929-8d09-213fd7a0c76b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "6th test success",
                  "fullTitle": "Subreddit Controller Test banSettings Test 6th test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"ban\",\n    userName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    punish_type: \"No Spoiler\",\n    Note: \"he is bad person\",\n    punishReason: \"not dowing his homework\",\n    duration: 20,\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  banUnban: async (userId, subredditName, banedUser, action, data) => {\n    const response = {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.banSettings(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Subreddit not found\",\n});",
                  "err": {},
                  "uuid": "3ce62570-73d7-4231-a707-f0e483517d4a",
                  "parentUUID": "a44bb8a6-f7f7-4929-8d09-213fd7a0c76b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "7th test success",
                  "fullTitle": "Subreddit Controller Test banSettings Test 7th test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"ban\",\n    userName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    punish_type: \"No Spoiler\",\n    Note: \"he is bad person\",\n    punishReason: \"not dowing his homework\",\n    duration: 20,\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  banUnban: async (userId, subredditName, banedUser, action, data) => {\n    const response = {\n      success: false,\n      error: subredditErrors.NOT_MODERATOR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.banSettings(req, res);\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status(401).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"you are not moderator to preform this action\",\n});",
                  "err": {},
                  "uuid": "cccb1e7a-c8e7-4d9f-a924-a25ea32ae386",
                  "parentUUID": "a44bb8a6-f7f7-4929-8d09-213fd7a0c76b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "8th test success",
                  "fullTitle": "Subreddit Controller Test banSettings Test 8th test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"ban\",\n    userName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    punish_type: \"No Spoiler\",\n    Note: \"he is bad person\",\n    punishReason: \"not dowing his homework\",\n    duration: 20,\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  banUnban: async (userId, subredditName, banedUser, action, data) => {\n    const response = {\n      success: false,\n      error: userErrors.ALREADY_BANED,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.banSettings(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"user is already banned\",\n});",
                  "err": {},
                  "uuid": "3e0a49d8-002a-430c-8859-f63cb5407aac",
                  "parentUUID": "a44bb8a6-f7f7-4929-8d09-213fd7a0c76b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "9th test success",
                  "fullTitle": "Subreddit Controller Test banSettings Test 9th test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"ban\",\n    userName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    punish_type: \"No Spoiler\",\n    Note: \"he is bad person\",\n    punishReason: \"not dowing his homework\",\n    duration: 20,\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  banUnban: async (userId, subredditName, banedUser, action, data) => {\n    const response = {\n      success: false,\n      error: userErrors.Not_BANED,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.banSettings(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"user is not baned to unban\",\n});",
                  "err": {},
                  "uuid": "014a4578-86d3-4ca6-8dae-bd99a66df810",
                  "parentUUID": "a44bb8a6-f7f7-4929-8d09-213fd7a0c76b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "10th test success",
                  "fullTitle": "Subreddit Controller Test banSettings Test 10th test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"ban\",\n    userName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    punish_type: \"No Spoiler\",\n    Note: \"he is bad person\",\n    punishReason: \"not dowing his homework\",\n    duration: 20,\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  banUnban: async (userId, subredditName, banedUser, action, data) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.banSettings(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: undefined,\n});",
                  "err": {},
                  "uuid": "901b8453-b6ca-4d8b-9449-541ac5463589",
                  "parentUUID": "a44bb8a6-f7f7-4929-8d09-213fd7a0c76b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d80839e2-83bb-40e2-9af4-7e0c05222650",
                "f00d42fc-13d5-4724-9ef8-a353335598b6",
                "8e69dfbb-5eb1-46bd-9b98-ed44a2a8b57a",
                "bffada17-c248-4c12-a421-f4d56eb0bf56",
                "c447a3c2-ead4-4f0a-93b1-167bd2c936e1",
                "276ccc0a-1840-430c-82bb-1850c41f16da",
                "fc33e4c4-fa8a-4ab8-99e5-6c87d9499b57",
                "3ce62570-73d7-4231-a707-f0e483517d4a",
                "cccb1e7a-c8e7-4d9f-a924-a25ea32ae386",
                "3e0a49d8-002a-430c-8859-f63cb5407aac",
                "014a4578-86d3-4ca6-8dae-bd99a66df810",
                "901b8453-b6ca-4d8b-9449-541ac5463589"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "f895cd4a-3340-43b3-8861-20426626f920",
              "title": "muteSettings Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1st test success",
                  "fullTitle": "Subreddit Controller Test muteSettings Test 1st test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"mute\",\n    userName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    punish_type: \"No Spoiler\",\n    Note: \"he is bad person\",\n    punishReason: \"not dowing his homework\",\n    duration: 20,\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  muteUnmute: async (userId, subredditName, banedUser, action, data) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.muteSettings(req, res, next);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(204).json).to.have.been.calledWith({});",
                  "err": {},
                  "uuid": "99bba693-64ce-4628-a718-67b189fcdb4c",
                  "parentUUID": "f895cd4a-3340-43b3-8861-20426626f920",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2nd test success",
                  "fullTitle": "Subreddit Controller Test muteSettings Test 2nd test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    action: \"mute\",\n    userName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    punish_type: \"No Spoiler\",\n    Note: \"he is bad person\",\n    punishReason: \"not dowing his homework\",\n    duration: 20,\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  muteUnmute: async (userId, subredditName, banedUser, action, data) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.muteSettings(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter subredditName\",\n});",
                  "err": {},
                  "uuid": "e19a15b2-6478-417d-943a-50e24ed6a03d",
                  "parentUUID": "f895cd4a-3340-43b3-8861-20426626f920",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3rd test success",
                  "fullTitle": "Subreddit Controller Test muteSettings Test 3rd test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"mute\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    punish_type: \"No Spoiler\",\n    Note: \"he is bad person\",\n    punishReason: \"not dowing his homework\",\n    duration: 20,\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  muteUnmute: async (userId, subredditName, banedUser, action, data) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.muteSettings(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter banedUser\",\n});",
                  "err": {},
                  "uuid": "57e84ad2-1a3e-4640-b7d2-c054a4da9726",
                  "parentUUID": "f895cd4a-3340-43b3-8861-20426626f920",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4th test success",
                  "fullTitle": "Subreddit Controller Test muteSettings Test 4th test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    userName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    punish_type: \"No Spoiler\",\n    Note: \"he is bad person\",\n    punishReason: \"not dowing his homework\",\n    duration: 20,\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  muteUnmute: async (userId, subredditName, banedUser, action, data) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.muteSettings(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter action\",\n});",
                  "err": {},
                  "uuid": "2bf4405c-827d-4549-bfdd-844cd1a5a10d",
                  "parentUUID": "f895cd4a-3340-43b3-8861-20426626f920",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5th test success",
                  "fullTitle": "Subreddit Controller Test muteSettings Test 5th test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"bann\",\n    userName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    punish_type: \"No Spoiler\",\n    Note: \"he is bad person\",\n    punishReason: \"not dowing his homework\",\n    duration: 20,\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  muteUnmute: async (userId, subredditName, banedUser, action, data) => {\n    const response = {\n      success: false,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.muteSettings(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Invalid Enum value [mute,unmute]\",\n});",
                  "err": {},
                  "uuid": "ee148e24-ddc8-48fb-98a7-43799b56cd01",
                  "parentUUID": "f895cd4a-3340-43b3-8861-20426626f920",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "6th test success",
                  "fullTitle": "Subreddit Controller Test muteSettings Test 6th test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"mute\",\n    userName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    punish_type: \"No Spoiler\",\n    Note: \"he is bad person\",\n    punishReason: \"not dowing his homework\",\n    duration: 20,\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  muteUnmute: async (userId, subredditName, banedUser, action, data) => {\n    const response = {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.muteSettings(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Subreddit not found\",\n});",
                  "err": {},
                  "uuid": "5804aeee-3e2f-4975-bb8e-1499e9b72d67",
                  "parentUUID": "f895cd4a-3340-43b3-8861-20426626f920",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "7th test success",
                  "fullTitle": "Subreddit Controller Test muteSettings Test 7th test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"mute\",\n    userName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    punish_type: \"No Spoiler\",\n    Note: \"he is bad person\",\n    punishReason: \"not dowing his homework\",\n    duration: 20,\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  muteUnmute: async (userId, subredditName, banedUser, action, data) => {\n    const response = {\n      success: false,\n      error: subredditErrors.NOT_MODERATOR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.muteSettings(req, res);\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status(401).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"you are not moderator to preform this action\",\n});",
                  "err": {},
                  "uuid": "6d8dc249-4400-4132-bcd9-7d64a9af9233",
                  "parentUUID": "f895cd4a-3340-43b3-8861-20426626f920",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "7th test success",
                  "fullTitle": "Subreddit Controller Test muteSettings Test 7th test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"mute\",\n    userName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    punish_type: \"No Spoiler\",\n    Note: \"he is bad person\",\n    punishReason: \"not dowing his homework\",\n    duration: 20,\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  muteUnmute: async (userId, subredditName, banedUser, action, data) => {\n    const response = {\n      success: false,\n      error: userErrors.MODERATOR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.muteSettings(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"user is a moderator cant make this action\",\n});",
                  "err": {},
                  "uuid": "861f2c0b-8f6e-4650-977c-85ff935d4fbc",
                  "parentUUID": "f895cd4a-3340-43b3-8861-20426626f920",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "8th test success",
                  "fullTitle": "Subreddit Controller Test muteSettings Test 8th test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"mute\",\n    userName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    punish_type: \"No Spoiler\",\n    Note: \"he is bad person\",\n    punishReason: \"not dowing his homework\",\n    duration: 20,\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  muteUnmute: async (userId, subredditName, banedUser, action, data) => {\n    const response = {\n      success: false,\n      error: userErrors.ALREADY_MUTED,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.muteSettings(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"user is already muted\",\n});",
                  "err": {},
                  "uuid": "dd106b0d-710d-4483-85c2-124fd6dc67b7",
                  "parentUUID": "f895cd4a-3340-43b3-8861-20426626f920",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "9th test success",
                  "fullTitle": "Subreddit Controller Test muteSettings Test 9th test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"mute\",\n    userName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    punish_type: \"No Spoiler\",\n    Note: \"he is bad person\",\n    punishReason: \"not dowing his homework\",\n    duration: 20,\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  muteUnmute: async (userId, subredditName, banedUser, action, data) => {\n    const response = {\n      success: false,\n      error: userErrors.Not_MUTED,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.muteSettings(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"user is not muted to unmute\",\n});",
                  "err": {},
                  "uuid": "804aa257-bcb0-4f90-a977-023d1355999e",
                  "parentUUID": "f895cd4a-3340-43b3-8861-20426626f920",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "10th test success",
                  "fullTitle": "Subreddit Controller Test muteSettings Test 10th test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"mute\",\n    userName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    punish_type: \"No Spoiler\",\n    Note: \"he is bad person\",\n    punishReason: \"not dowing his homework\",\n    duration: 20,\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  muteUnmute: async (userId, subredditName, banedUser, action, data) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.muteSettings(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: undefined,\n});",
                  "err": {},
                  "uuid": "122f20e9-e53b-4459-b3f9-019b274f2016",
                  "parentUUID": "f895cd4a-3340-43b3-8861-20426626f920",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "99bba693-64ce-4628-a718-67b189fcdb4c",
                "e19a15b2-6478-417d-943a-50e24ed6a03d",
                "57e84ad2-1a3e-4640-b7d2-c054a4da9726",
                "2bf4405c-827d-4549-bfdd-844cd1a5a10d",
                "ee148e24-ddc8-48fb-98a7-43799b56cd01",
                "5804aeee-3e2f-4975-bb8e-1499e9b72d67",
                "6d8dc249-4400-4132-bcd9-7d64a9af9233",
                "861f2c0b-8f6e-4650-977c-85ff935d4fbc",
                "dd106b0d-710d-4483-85c2-124fd6dc67b7",
                "804aa257-bcb0-4f90-a977-023d1355999e",
                "122f20e9-e53b-4459-b3f9-019b274f2016"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "ae0ba9f2-9cff-4205-a89a-516f1cb7b5cf",
              "title": "bannedUsers Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1st test success",
                  "fullTitle": "Subreddit Controller Test bannedUsers Test 1st test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  banned: async (subredditName) => {\n    const response = {\n      success: true,\n      data: [{ _id: \"10\", userName: \"khaled\" }],\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.bannedUsers(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  data: [{ _id: \"10\", userName: \"khaled\" }],\n});",
                  "err": {},
                  "uuid": "15d74e7f-1704-4428-85b4-ba357ee8b8ac",
                  "parentUUID": "ae0ba9f2-9cff-4205-a89a-516f1cb7b5cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2nd test success",
                  "fullTitle": "Subreddit Controller Test bannedUsers Test 2nd test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {},\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  banned: async (subredditName) => {\n    const response = {\n      success: true,\n      data: [{ _id: \"10\", userName: \"khaled\" }],\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.bannedUsers(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter subredditName\",\n});",
                  "err": {},
                  "uuid": "d2d613d7-9e84-4ccb-ab72-1e74e41e3546",
                  "parentUUID": "ae0ba9f2-9cff-4205-a89a-516f1cb7b5cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3rd test success",
                  "fullTitle": "Subreddit Controller Test bannedUsers Test 3rd test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  banned: async (subredditName) => {\n    const response = {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.bannedUsers(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Subreddit not found\",\n});",
                  "err": {},
                  "uuid": "339e106b-25af-44ad-96e4-154ed73ee78e",
                  "parentUUID": "ae0ba9f2-9cff-4205-a89a-516f1cb7b5cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4th test success",
                  "fullTitle": "Subreddit Controller Test bannedUsers Test 4th test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  banned: async (subredditName) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.bannedUsers(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: undefined,\n});",
                  "err": {},
                  "uuid": "bcfadbc8-0e9f-4f83-9b2b-694d51ed1220",
                  "parentUUID": "ae0ba9f2-9cff-4205-a89a-516f1cb7b5cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5th test success",
                  "fullTitle": "Subreddit Controller Test bannedUsers Test 5th test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  banned: async (subredditName) => {\n    const response = {\n      success: false,\n      error: subredditErrors.NOT_MODERATOR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.bannedUsers(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"you are not moderator to preform this action\",\n});",
                  "err": {},
                  "uuid": "3fb94841-0cad-4ded-9aa3-830d866aede4",
                  "parentUUID": "ae0ba9f2-9cff-4205-a89a-516f1cb7b5cf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "15d74e7f-1704-4428-85b4-ba357ee8b8ac",
                "d2d613d7-9e84-4ccb-ab72-1e74e41e3546",
                "339e106b-25af-44ad-96e4-154ed73ee78e",
                "bcfadbc8-0e9f-4f83-9b2b-694d51ed1220",
                "3fb94841-0cad-4ded-9aa3-830d866aede4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "0649c882-b202-46c4-98f1-07774f49f54b",
              "title": "mutedUsers Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1st test success",
                  "fullTitle": "Subreddit Controller Test mutedUsers Test 1st test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  muted: async (subredditName) => {\n    const response = {\n      success: true,\n      data: [{ _id: \"10\", userName: \"khaled\" }],\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.mutedUsers(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  data: [{ _id: \"10\", userName: \"khaled\" }],\n});",
                  "err": {},
                  "uuid": "c53e28d5-08a5-4407-9994-fcc2d65df7b7",
                  "parentUUID": "0649c882-b202-46c4-98f1-07774f49f54b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2nd test success",
                  "fullTitle": "Subreddit Controller Test mutedUsers Test 2nd test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {},\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  muted: async (subredditName) => {\n    const response = {\n      success: true,\n      data: [{ _id: \"10\", userName: \"khaled\" }],\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.mutedUsers(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter subredditName\",\n});",
                  "err": {},
                  "uuid": "7884be21-756c-4b8e-bd3a-6ea53b675b26",
                  "parentUUID": "0649c882-b202-46c4-98f1-07774f49f54b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3rd test success",
                  "fullTitle": "Subreddit Controller Test mutedUsers Test 3rd test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  muted: async (subredditName) => {\n    const response = {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.mutedUsers(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Subreddit not found\",\n});",
                  "err": {},
                  "uuid": "ea7c6805-82e8-431f-9053-ef5df81b919c",
                  "parentUUID": "0649c882-b202-46c4-98f1-07774f49f54b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4th test success",
                  "fullTitle": "Subreddit Controller Test mutedUsers Test 4th test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  muted: async (subredditName) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.mutedUsers(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: undefined,\n});",
                  "err": {},
                  "uuid": "de6dfdce-8b77-42a6-913e-634c1f5a1e89",
                  "parentUUID": "0649c882-b202-46c4-98f1-07774f49f54b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5th test success",
                  "fullTitle": "Subreddit Controller Test mutedUsers Test 5th test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  muted: async (subredditName) => {\n    const response = {\n      success: false,\n      error: subredditErrors.NOT_MODERATOR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.mutedUsers(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"you are not moderator to preform this action\",\n});",
                  "err": {},
                  "uuid": "c67902c7-aed2-466c-aba6-4615f9b78240",
                  "parentUUID": "0649c882-b202-46c4-98f1-07774f49f54b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c53e28d5-08a5-4407-9994-fcc2d65df7b7",
                "7884be21-756c-4b8e-bd3a-6ea53b675b26",
                "ea7c6805-82e8-431f-9053-ef5df81b919c",
                "de6dfdce-8b77-42a6-913e-634c1f5a1e89",
                "c67902c7-aed2-466c-aba6-4615f9b78240"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "9a933ea2-ee94-4ae7-9435-7c963061befb",
              "title": "addRule Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Subreddit Controller Test addRule Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    title: \"rule 1\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  addRule: async (subredditName, userId, title, data) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.addRule(req, res);\nexpect(res.status).to.have.been.calledWith(204);\nexpect(res.status(204).json).to.have.been.calledWith({});",
                  "err": {},
                  "uuid": "c23a31e0-5032-4807-a1b6-1bb3517f9737",
                  "parentUUID": "9a933ea2-ee94-4ae7-9435-7c963061befb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2nd test success",
                  "fullTitle": "Subreddit Controller Test addRule Test 2nd test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    title: \"rule 1\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  addRule: async (subredditName, userId, title, data) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.addRule(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter subredditName\",\n});",
                  "err": {},
                  "uuid": "6574596e-2deb-42fe-9c7a-710da0e5b0b7",
                  "parentUUID": "9a933ea2-ee94-4ae7-9435-7c963061befb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3rd test success",
                  "fullTitle": "Subreddit Controller Test addRule Test 3rd test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  addRule: async (subredditName, userId, title, data) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.addRule(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter rule title\",\n});",
                  "err": {},
                  "uuid": "c9f8619f-2a06-4051-b968-d138461320fb",
                  "parentUUID": "9a933ea2-ee94-4ae7-9435-7c963061befb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4th test success",
                  "fullTitle": "Subreddit Controller Test addRule Test 4th test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    title: \"rule 1\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  addRule: async (subredditName, userId, title, data) => {\n    const response = {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.addRule(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Subreddit not found\",\n});",
                  "err": {},
                  "uuid": "2720c255-9c84-433b-aab6-b07f1ac96da3",
                  "parentUUID": "9a933ea2-ee94-4ae7-9435-7c963061befb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5th test success",
                  "fullTitle": "Subreddit Controller Test addRule Test 5th test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    title: \"rule 1\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  addRule: async (subredditName, userId, title, data) => {\n    const response = {\n      success: false,\n      error: subredditErrors.NOT_MODERATOR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.addRule(req, res);\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status(401).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"you are not moderator to preform this action\",\n});",
                  "err": {},
                  "uuid": "598fc93b-8ae4-456d-a73e-acc8cf78881f",
                  "parentUUID": "9a933ea2-ee94-4ae7-9435-7c963061befb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "6th test success",
                  "fullTitle": "Subreddit Controller Test addRule Test 6th test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    title: \"rule 1\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  addRule: async (subredditName, userId, title, data) => {\n    const response = {\n      success: false,\n      error: subredditErrors.RULE_TAKEN,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.addRule(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"this title is already taken\",\n});",
                  "err": {},
                  "uuid": "c1939a68-7781-4e7d-8cdf-3d9a1a840d76",
                  "parentUUID": "9a933ea2-ee94-4ae7-9435-7c963061befb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": " 7th success",
                  "fullTitle": "Subreddit Controller Test addRule Test  7th success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    title: \"rule 1\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  addRule: async (subredditName, userId, title, data) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.addRule(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: undefined,\n});",
                  "err": {},
                  "uuid": "3bcf9370-fc49-4f8f-9b68-5e380c4255aa",
                  "parentUUID": "9a933ea2-ee94-4ae7-9435-7c963061befb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c23a31e0-5032-4807-a1b6-1bb3517f9737",
                "6574596e-2deb-42fe-9c7a-710da0e5b0b7",
                "c9f8619f-2a06-4051-b968-d138461320fb",
                "2720c255-9c84-433b-aab6-b07f1ac96da3",
                "598fc93b-8ae4-456d-a73e-acc8cf78881f",
                "c1939a68-7781-4e7d-8cdf-3d9a1a840d76",
                "3bcf9370-fc49-4f8f-9b68-5e380c4255aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "d2550123-675c-4172-91e0-e3ab38a60a95",
              "title": "editRule Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Subreddit Controller Test editRule Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    title: \"rule 1\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  editRule: async (subredditName, userId, title, data) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.editRule(req, res);\nexpect(res.status).to.have.been.calledWith(204);\nexpect(res.status(204).json).to.have.been.calledWith({});",
                  "err": {},
                  "uuid": "31c6288a-b1d5-43a9-b105-eb1345503ea6",
                  "parentUUID": "d2550123-675c-4172-91e0-e3ab38a60a95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2nd test success",
                  "fullTitle": "Subreddit Controller Test editRule Test 2nd test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    title: \"rule 1\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  editRule: async (subredditName, userId, title, data) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.editRule(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter subredditName\",\n});",
                  "err": {},
                  "uuid": "1c8164e5-3295-46a0-af3a-a90d072aa1b5",
                  "parentUUID": "d2550123-675c-4172-91e0-e3ab38a60a95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3rd test success",
                  "fullTitle": "Subreddit Controller Test editRule Test 3rd test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  editRule: async (subredditName, userId, title, data) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.editRule(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter rule title\",\n});",
                  "err": {},
                  "uuid": "979f9a88-5f5d-40b1-887e-62c5b2332b5f",
                  "parentUUID": "d2550123-675c-4172-91e0-e3ab38a60a95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4th test success",
                  "fullTitle": "Subreddit Controller Test editRule Test 4th test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    title: \"rule 1\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  editRule: async (subredditName, userId, title, data) => {\n    const response = {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.editRule(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Subreddit not found\",\n});",
                  "err": {},
                  "uuid": "d858f949-4197-4a25-884c-cb8c8143c0f8",
                  "parentUUID": "d2550123-675c-4172-91e0-e3ab38a60a95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5th test success",
                  "fullTitle": "Subreddit Controller Test editRule Test 5th test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    title: \"rule 1\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  editRule: async (subredditName, userId, title, data) => {\n    const response = {\n      success: false,\n      error: subredditErrors.NOT_MODERATOR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.editRule(req, res);\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status(401).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"you are not moderator to preform this action\",\n});",
                  "err": {},
                  "uuid": "707bf80e-bb9c-4a86-b7c7-c01d26f7e91e",
                  "parentUUID": "d2550123-675c-4172-91e0-e3ab38a60a95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "6th test success",
                  "fullTitle": "Subreddit Controller Test editRule Test 6th test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    title: \"rule 1\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  editRule: async (subredditName, userId, title, data) => {\n    const response = {\n      success: false,\n      error: subredditErrors.RULE_TAKEN,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.editRule(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"this title is already taken\",\n});",
                  "err": {},
                  "uuid": "71844c11-232f-4f44-9798-96d6bdfe19c9",
                  "parentUUID": "d2550123-675c-4172-91e0-e3ab38a60a95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": " 7th success",
                  "fullTitle": "Subreddit Controller Test editRule Test  7th success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    title: \"rule 1\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  editRule: async (subredditName, userId, title, data) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.editRule(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: undefined,\n});",
                  "err": {},
                  "uuid": "8bee33c1-4405-4d25-8584-ba9af2f8289c",
                  "parentUUID": "d2550123-675c-4172-91e0-e3ab38a60a95",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "31c6288a-b1d5-43a9-b105-eb1345503ea6",
                "1c8164e5-3295-46a0-af3a-a90d072aa1b5",
                "979f9a88-5f5d-40b1-887e-62c5b2332b5f",
                "d858f949-4197-4a25-884c-cb8c8143c0f8",
                "707bf80e-bb9c-4a86-b7c7-c01d26f7e91e",
                "71844c11-232f-4f44-9798-96d6bdfe19c9",
                "8bee33c1-4405-4d25-8584-ba9af2f8289c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "e267de0a-ed41-4eb1-98f5-a60f5e59b8d9",
              "title": "deleteRule Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Subreddit Controller Test deleteRule Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    title: \"rule 1\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  deleteRule: async (subredditName, userId, title, data) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.deleteRule(req, res);\nexpect(res.status).to.have.been.calledWith(204);\nexpect(res.status(204).json).to.have.been.calledWith({});",
                  "err": {},
                  "uuid": "09ff8116-ce7e-4771-bd3f-7c9844a29b7d",
                  "parentUUID": "e267de0a-ed41-4eb1-98f5-a60f5e59b8d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2nd test success",
                  "fullTitle": "Subreddit Controller Test deleteRule Test 2nd test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    title: \"rule 1\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  deleteRule: async (subredditName, userId, title, data) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.deleteRule(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter subredditName\",\n});",
                  "err": {},
                  "uuid": "b8a397a8-aabd-49e8-a9e1-548dedfa9bec",
                  "parentUUID": "e267de0a-ed41-4eb1-98f5-a60f5e59b8d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3rd test success",
                  "fullTitle": "Subreddit Controller Test deleteRule Test 3rd test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  deleteRule: async (subredditName, userId, title, data) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.deleteRule(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter rule title\",\n});",
                  "err": {},
                  "uuid": "1dd3d6d6-2c1f-4b46-9939-d66d5fd0bf91",
                  "parentUUID": "e267de0a-ed41-4eb1-98f5-a60f5e59b8d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4th test success",
                  "fullTitle": "Subreddit Controller Test deleteRule Test 4th test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    title: \"rule 1\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  deleteRule: async (subredditName, userId, title, data) => {\n    const response = {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.deleteRule(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Subreddit not found\",\n});",
                  "err": {},
                  "uuid": "e7ec3881-c391-497c-b38c-44f6e89b6cf2",
                  "parentUUID": "e267de0a-ed41-4eb1-98f5-a60f5e59b8d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5th test success",
                  "fullTitle": "Subreddit Controller Test deleteRule Test 5th test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    title: \"rule 1\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  deleteRule: async (subredditName, userId, title, data) => {\n    const response = {\n      success: false,\n      error: subredditErrors.NOT_MODERATOR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.deleteRule(req, res);\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status(401).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"you are not moderator to preform this action\",\n});",
                  "err": {},
                  "uuid": "b847c9f9-1f5f-4cf6-ba0a-eb3f49852cc1",
                  "parentUUID": "e267de0a-ed41-4eb1-98f5-a60f5e59b8d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "6th test success",
                  "fullTitle": "Subreddit Controller Test deleteRule Test 6th test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    title: \"rule 1\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  deleteRule: async (subredditName, userId, title, data) => {\n    const response = {\n      success: false,\n      error: subredditErrors.RULE_TAKEN,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.deleteRule(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"this title is already taken\",\n});",
                  "err": {},
                  "uuid": "16bdd88f-e5dc-4013-8061-adf624f68433",
                  "parentUUID": "e267de0a-ed41-4eb1-98f5-a60f5e59b8d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": " 7th success",
                  "fullTitle": "Subreddit Controller Test deleteRule Test  7th success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    title: \"rule 1\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  deleteRule: async (subredditName, userId, title, data) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.deleteRule(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: undefined,\n});",
                  "err": {},
                  "uuid": "41358c21-15a9-4b2b-8731-0e46e77032a9",
                  "parentUUID": "e267de0a-ed41-4eb1-98f5-a60f5e59b8d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "09ff8116-ce7e-4771-bd3f-7c9844a29b7d",
                "b8a397a8-aabd-49e8-a9e1-548dedfa9bec",
                "1dd3d6d6-2c1f-4b46-9939-d66d5fd0bf91",
                "e7ec3881-c391-497c-b38c-44f6e89b6cf2",
                "b847c9f9-1f5f-4cf6-ba0a-eb3f49852cc1",
                "16bdd88f-e5dc-4013-8061-adf624f68433",
                "41358c21-15a9-4b2b-8731-0e46e77032a9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "79552ee5-a15f-43e0-abf1-93861da75d46",
              "title": "modPosts Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Subreddit Controller Test modPosts Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    location: \"spammed\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  categorizedPosts: async (userId, name, checkOnly) => {\n    const response = {\n      success: true,\n      data: [{ _id: \"10\" }],\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.modPosts(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  data: [\n    {\n      _id: \"10\",\n    },\n  ],\n});",
                  "err": {},
                  "uuid": "414df1a6-2340-4ea4-9d1c-24975b9de269",
                  "parentUUID": "79552ee5-a15f-43e0-abf1-93861da75d46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2nd test fail",
                  "fullTitle": "Subreddit Controller Test modPosts Test 2nd test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    location: \"spammed\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  categorizedPosts: async (userId, name, checkOnly) => {\n    const response = {\n      success: true,\n      data: [{ _id: \"10\" }],\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.modPosts(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Missing required parameter subredditName\",\n});",
                  "err": {},
                  "uuid": "574f2f31-ae9e-42f2-bd0f-1f5cfeb6c125",
                  "parentUUID": "79552ee5-a15f-43e0-abf1-93861da75d46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3rd test success",
                  "fullTitle": "Subreddit Controller Test modPosts Test 3rd test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  categorizedPosts: async (userId, name, checkOnly) => {\n    const response = {\n      success: true,\n      data: [{ _id: \"10\" }],\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.modPosts(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Missing required parameter location\",\n});",
                  "err": {},
                  "uuid": "5885e274-0760-47ce-af32-c91bbba8b6de",
                  "parentUUID": "79552ee5-a15f-43e0-abf1-93861da75d46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4th test success",
                  "fullTitle": "Subreddit Controller Test modPosts Test 4th test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    location: \"spammed\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  categorizedPosts: async (userId, name, checkOnly) => {\n    const response = {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.modPosts(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Subreddit not found\",\n});",
                  "err": {},
                  "uuid": "5b6d490a-59fb-44a2-bec4-aced253a74e1",
                  "parentUUID": "79552ee5-a15f-43e0-abf1-93861da75d46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5th test success",
                  "fullTitle": "Subreddit Controller Test modPosts Test 5th test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    location: \"spammed\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  categorizedPosts: async (userId, name, checkOnly) => {\n    const response = {\n      success: false,\n      error: mongoErrors.NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.modPosts(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  data: [],\n});",
                  "err": {},
                  "uuid": "20fcee4c-3254-460a-a59a-578d04a70e4b",
                  "parentUUID": "79552ee5-a15f-43e0-abf1-93861da75d46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "6th test success",
                  "fullTitle": "Subreddit Controller Test modPosts Test 6th test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    location: \"spammed\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  categorizedPosts: async (userId, name, checkOnly) => {\n    const response = {\n      success: false,\n      error: subredditErrors.NOT_MODERATOR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.modPosts(req, res);\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status(401).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"you are not moderator to preform this action\",\n});",
                  "err": {},
                  "uuid": "4dbf64dd-5409-4e02-b766-8ecb2b204159",
                  "parentUUID": "79552ee5-a15f-43e0-abf1-93861da75d46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "7th test success",
                  "fullTitle": "Subreddit Controller Test modPosts Test 7th test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    location: \"spammed\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  categorizedPosts: async (userId, name, checkOnly) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.modPosts(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: undefined,\n});",
                  "err": {},
                  "uuid": "ef52a12f-41c8-4018-803a-147c21ce4868",
                  "parentUUID": "79552ee5-a15f-43e0-abf1-93861da75d46",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "414df1a6-2340-4ea4-9d1c-24975b9de269",
                "574f2f31-ae9e-42f2-bd0f-1f5cfeb6c125",
                "5885e274-0760-47ce-af32-c91bbba8b6de",
                "5b6d490a-59fb-44a2-bec4-aced253a74e1",
                "20fcee4c-3254-460a-a59a-578d04a70e4b",
                "4dbf64dd-5409-4e02-b766-8ecb2b204159",
                "ef52a12f-41c8-4018-803a-147c21ce4868"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "33046c54-48e6-4559-ad66-fee092123421",
              "title": "leaderboardCategory Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Subreddit Controller Test leaderboardCategory Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    category: \"sport\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  categorizedSubreddits: async (category, query) => {\n    const response = {\n      success: true,\n      data: [{ _id: \"10\", fixedName: \"Subreddit name\" }],\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.leaderboardCategory(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  data: [\n    {\n      _id: \"10\",\n      fixedName: \"Subreddit name\",\n    },\n  ],\n});",
                  "err": {},
                  "uuid": "b8b43592-fcf0-472d-8a95-25d0be9737b5",
                  "parentUUID": "33046c54-48e6-4559-ad66-fee092123421",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2nd test fail",
                  "fullTitle": "Subreddit Controller Test leaderboardCategory Test 2nd test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {},\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  categorizedSubreddits: async (category, query) => {\n    const response = {\n      success: true,\n      data: [{ _id: \"10\", fixedName: \"Subreddit name\" }],\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.leaderboardCategory(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Missing required parameter location\",\n});",
                  "err": {},
                  "uuid": "af575b09-3717-4ea8-bd92-e2bbdd77ef45",
                  "parentUUID": "33046c54-48e6-4559-ad66-fee092123421",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3rd test fail",
                  "fullTitle": "Subreddit Controller Test leaderboardCategory Test 3rd test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    category: \"sport\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  categorizedSubreddits: async (category, query) => {\n    const response = {\n      success: false,\n      error: mongoErrors.NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.leaderboardCategory(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  data: [],\n});",
                  "err": {},
                  "uuid": "c1976c5b-2095-43ca-be58-112265848187",
                  "parentUUID": "33046c54-48e6-4559-ad66-fee092123421",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4th test fail",
                  "fullTitle": "Subreddit Controller Test leaderboardCategory Test 4th test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    category: \"sport\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  categorizedSubreddits: async (category, query) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.leaderboardCategory(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: undefined,\n});",
                  "err": {},
                  "uuid": "e12c84ba-4626-440d-999c-a743e3ae1e30",
                  "parentUUID": "33046c54-48e6-4559-ad66-fee092123421",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8b43592-fcf0-472d-8a95-25d0be9737b5",
                "af575b09-3717-4ea8-bd92-e2bbdd77ef45",
                "c1976c5b-2095-43ca-be58-112265848187",
                "e12c84ba-4626-440d-999c-a743e3ae1e30"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "1ee215ed-3c19-47a6-b803-91ef12f4c79d",
              "title": "leaderboardRandom Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Subreddit Controller Test leaderboardRandom Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {},\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  randomSubreddits: async (category, query) => {\n    const response = {\n      success: true,\n      data: [{ _id: \"10\", fixedName: \"Subreddit name\" }],\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.leaderboardRandom(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  data: [\n    {\n      _id: \"10\",\n      fixedName: \"Subreddit name\",\n    },\n  ],\n});",
                  "err": {},
                  "uuid": "b21776d2-92cc-435b-8e31-6cb3915dc446",
                  "parentUUID": "1ee215ed-3c19-47a6-b803-91ef12f4c79d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2nd test fail",
                  "fullTitle": "Subreddit Controller Test leaderboardRandom Test 2nd test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {},\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  randomSubreddits: async (category, query) => {\n    const response = {\n      success: true,\n      data: [{ _id: \"10\", fixedName: \"Subreddit name\" }],\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.leaderboardRandom(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Missing required parameter location\",\n});",
                  "err": {},
                  "uuid": "1e92216f-b962-40ab-883f-ef7d54509baf",
                  "parentUUID": "1ee215ed-3c19-47a6-b803-91ef12f4c79d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3rd test fail",
                  "fullTitle": "Subreddit Controller Test leaderboardRandom Test 3rd test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {},\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  randomSubreddits: async (category, query) => {\n    const response = {\n      success: false,\n      error: mongoErrors.NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\nawait subredditController.leaderboardRandom(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  data: [],\n});",
                  "err": {},
                  "uuid": "64c18631-6e37-459c-8bf9-39135e09b0e7",
                  "parentUUID": "1ee215ed-3c19-47a6-b803-91ef12f4c79d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4th test fail",
                  "fullTitle": "Subreddit Controller Test leaderboardRandom Test 4th test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {},\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  randomSubreddits: async (category, query) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\nawait subredditController.leaderboardRandom(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: undefined,\n});",
                  "err": {},
                  "uuid": "378143f7-62fe-43e1-bb5f-4480f51edcfc",
                  "parentUUID": "1ee215ed-3c19-47a6-b803-91ef12f4c79d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b21776d2-92cc-435b-8e31-6cb3915dc446",
                "1e92216f-b962-40ab-883f-ef7d54509baf",
                "64c18631-6e37-459c-8bf9-39135e09b0e7",
                "378143f7-62fe-43e1-bb5f-4480f51edcfc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "20d57fdf-e0b0-491f-817b-752874b43049",
              "title": "approveUser Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Subreddit Controller Test approveUser Test first test success",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"approve\",\n    userName: \"tot\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  approveUser: async (userId, subredditName, approvedUser, action) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.approveUser(req, res, next);\nexpect(res.status).to.have.been.calledWith(204);\nexpect(res.status(204).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "39a2102f-1a9f-41f3-b823-ca024b247db5",
                  "parentUUID": "20d57fdf-e0b0-491f-817b-752874b43049",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2nd test fail",
                  "fullTitle": "Subreddit Controller Test approveUser Test 2nd test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    action: \"approve\",\n    userName: \"tot\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  approveUser: async (userId, subredditName, approvedUser, action) => {\n    const response = {\n      success: false,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.approveUser(req, res, next);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter subredditName\",\n});",
                  "err": {},
                  "uuid": "3d5f49a3-9717-4bd0-b7f5-7393040a1f81",
                  "parentUUID": "20d57fdf-e0b0-491f-817b-752874b43049",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3rd test fail",
                  "fullTitle": "Subreddit Controller Test approveUser Test 3rd test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"approve\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  approveUser: async (userId, subredditName, approvedUser, action) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.approveUser(req, res, next);\n// console.log(res.status(400).json)\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({});",
                  "err": {},
                  "uuid": "453043a8-6aed-4445-8cb3-82501e334e31",
                  "parentUUID": "20d57fdf-e0b0-491f-817b-752874b43049",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4th test fail",
                  "fullTitle": "Subreddit Controller Test approveUser Test 4th test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  approveUser: async (userId, subredditName, approvedUser, action) => {\n    const response = {\n      success: false,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.approveUser(req, res, next);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Missing required parameter approvedUser\",\n});",
                  "err": {},
                  "uuid": "5c97b876-e443-43df-97dd-34aa0b9e9bc9",
                  "parentUUID": "20d57fdf-e0b0-491f-817b-752874b43049",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5th test fail",
                  "fullTitle": "Subreddit Controller Test approveUser Test 5th test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"approve\",\n    userName: \"tot\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  approveUser: async (userId, subredditName, approvedUser, action) => {\n    const response = {\n      success: false,\n      error: subredditErrors.NOT_MODERATOR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.approveUser(req, res, next);\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status(401).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"you are not moderator to preform this action\",\n});",
                  "err": {},
                  "uuid": "0d303f5e-c376-4bda-a0a1-1489214f224c",
                  "parentUUID": "20d57fdf-e0b0-491f-817b-752874b43049",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "6th test fail",
                  "fullTitle": "Subreddit Controller Test approveUser Test 6th test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"approve\",\n    userName: \"tot\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  approveUser: async (userId, subredditName, approvedUser, action) => {\n    const response = {\n      success: false,\n      error: userErrors.USER_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.approveUser(req, res, next);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"user not found\",\n});",
                  "err": {},
                  "uuid": "6aee9493-e743-4b49-bdfc-13884e0b035b",
                  "parentUUID": "20d57fdf-e0b0-491f-817b-752874b43049",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "7th test fail",
                  "fullTitle": "Subreddit Controller Test approveUser Test 7th test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"approve\",\n    userName: \"tot\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  approveUser: async (userId, subredditName, approvedUser, action) => {\n    const response = {\n      success: false,\n      error: userErrors.MODERATOR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.approveUser(req, res, next);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage:\n    \"user is a moderator cant make this action (he is already approved by default)\",\n});",
                  "err": {},
                  "uuid": "26f250bc-e91a-4061-a178-f95f52aa0947",
                  "parentUUID": "20d57fdf-e0b0-491f-817b-752874b43049",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "8th test fail",
                  "fullTitle": "Subreddit Controller Test approveUser Test 8th test fail",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"approve\",\n    userName: \"tot\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  approveUser: async (userId, subredditName, approvedUser, action) => {\n    const response = {\n      success: false,\n      error: userErrors.ALREADY_APPROVED,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.approveUser(req, res, next);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"user is already approved before\",\n});",
                  "err": {},
                  "uuid": "26d3636f-ffc9-4fc4-9a12-22b8e1df20c5",
                  "parentUUID": "20d57fdf-e0b0-491f-817b-752874b43049",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "9th test fail",
                  "fullTitle": "Subreddit Controller Test approveUser Test 9th test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"approve\",\n    userName: \"tot\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  approveUser: async (userId, subredditName, approvedUser, action) => {\n    const response = {\n      success: false,\n      error: userErrors.NOT_APPROVED,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.approveUser(req, res, next);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"user is not approved to disapprove\",\n});",
                  "err": {},
                  "uuid": "f1e62bcd-f8e7-4d72-9690-2fba220fe6ff",
                  "parentUUID": "20d57fdf-e0b0-491f-817b-752874b43049",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "10th test fail",
                  "fullTitle": "Subreddit Controller Test approveUser Test 10th test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    action: \"approve\",\n    userName: \"tot\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  approveUser: async (userId, subredditName, approvedUser, action) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.approveUser(req, res, next);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({});",
                  "err": {},
                  "uuid": "62d56ff0-4ba4-44b4-9659-67eeb1c5fd89",
                  "parentUUID": "20d57fdf-e0b0-491f-817b-752874b43049",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "39a2102f-1a9f-41f3-b823-ca024b247db5",
                "3d5f49a3-9717-4bd0-b7f5-7393040a1f81",
                "453043a8-6aed-4445-8cb3-82501e334e31",
                "5c97b876-e443-43df-97dd-34aa0b9e9bc9",
                "0d303f5e-c376-4bda-a0a1-1489214f224c",
                "6aee9493-e743-4b49-bdfc-13884e0b035b",
                "26f250bc-e91a-4061-a178-f95f52aa0947",
                "26d3636f-ffc9-4fc4-9a12-22b8e1df20c5",
                "f1e62bcd-f8e7-4d72-9690-2fba220fe6ff",
                "62d56ff0-4ba4-44b4-9659-67eeb1c5fd89"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "c18f0601-83d8-4764-b487-c5068bf5ae48",
              "title": "approvedUsers Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Subreddit Controller Test approvedUsers Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  approved: async (subredditName, userId) => {\n    const response = {\n      success: true,\n      data: [{ _id: \"10\", userName: \"name\" }],\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.approvedUsers(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  data: [{ _id: \"10\", userName: \"name\" }],\n});",
                  "err": {},
                  "uuid": "c5c45c9b-44d2-4b13-8904-2de88ac557e7",
                  "parentUUID": "c18f0601-83d8-4764-b487-c5068bf5ae48",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2nd test fail",
                  "fullTitle": "Subreddit Controller Test approvedUsers Test 2nd test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {},\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  approved: async (subredditName, userId) => {\n    const response = {\n      success: true,\n      data: [{ _id: \"10\", userName: \"name\" }],\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.approvedUsers(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter subredditName\",\n});",
                  "err": {},
                  "uuid": "1aaea022-cd11-4d04-9099-d4f861e6ea9a",
                  "parentUUID": "c18f0601-83d8-4764-b487-c5068bf5ae48",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3rd test fail",
                  "fullTitle": "Subreddit Controller Test approvedUsers Test 3rd test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  approved: async (subredditName, userId) => {\n    const response = {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.approvedUsers(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Subreddit not found\",\n});",
                  "err": {},
                  "uuid": "5cb40298-6a48-461d-ae2e-a7829506315c",
                  "parentUUID": "c18f0601-83d8-4764-b487-c5068bf5ae48",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4th test fail",
                  "fullTitle": "Subreddit Controller Test approvedUsers Test 4th test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  approved: async (subredditName, userId) => {\n    const response = {\n      success: false,\n      error: subredditErrors.NOT_MODERATOR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.approvedUsers(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"you are not moderator to preform this action\",\n});",
                  "err": {},
                  "uuid": "66a414fd-af74-4637-bb82-2e8de827daba",
                  "parentUUID": "c18f0601-83d8-4764-b487-c5068bf5ae48",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5th test fail",
                  "fullTitle": "Subreddit Controller Test approvedUsers Test 5th test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  approved: async (subredditName, userId) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.approvedUsers(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: undefined,\n});",
                  "err": {},
                  "uuid": "80da7919-a959-4b1f-ab1f-df6386ddaca1",
                  "parentUUID": "c18f0601-83d8-4764-b487-c5068bf5ae48",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c5c45c9b-44d2-4b13-8904-2de88ac557e7",
                "1aaea022-cd11-4d04-9099-d4f861e6ea9a",
                "5cb40298-6a48-461d-ae2e-a7829506315c",
                "66a414fd-af74-4637-bb82-2e8de827daba",
                "80da7919-a959-4b1f-ab1f-df6386ddaca1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "3b39f19c-01ea-4b13-a241-8899b62f9b4c",
              "title": "reels Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Subreddit Controller Test reels Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    topics: \"All\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  reels: async (topic, query) => {\n    const response = {\n      success: true,\n      data: [{ _id: \"10\", type: \"video\" }],\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.reels(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  data: [{ _id: \"10\", type: \"video\" }],\n});",
                  "err": {},
                  "uuid": "f3877a3f-77b9-4a9d-9304-a974fa834867",
                  "parentUUID": "3b39f19c-01ea-4b13-a241-8899b62f9b4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2nd test fail",
                  "fullTitle": "Subreddit Controller Test reels Test 2nd test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {},\n};\nconst UserService = {};\nconst subredditService = {\n  reels: async (topic, query) => {\n    const response = {};\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.reels(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter topic\",\n});",
                  "err": {},
                  "uuid": "6a986304-47b4-4cb3-846a-eadfd58702a0",
                  "parentUUID": "3b39f19c-01ea-4b13-a241-8899b62f9b4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3rd test fail",
                  "fullTitle": "Subreddit Controller Test reels Test 3rd test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    topics: \"All\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  reels: async (topic, query) => {\n    const response = {\n      success: false,\n      error: mongoErrors.NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.reels(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  data: [],\n});",
                  "err": {},
                  "uuid": "d6a13916-81c9-4501-a7c9-a5ef5767cff7",
                  "parentUUID": "3b39f19c-01ea-4b13-a241-8899b62f9b4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4th test fail",
                  "fullTitle": "Subreddit Controller Test reels Test 4th test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    topics: \"All\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  reels: async (topic, query) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.reels(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: undefined,\n});",
                  "err": {},
                  "uuid": "9b3fbe4b-ed10-4473-8e40-31fff0722fac",
                  "parentUUID": "3b39f19c-01ea-4b13-a241-8899b62f9b4c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f3877a3f-77b9-4a9d-9304-a974fa834867",
                "6a986304-47b4-4cb3-846a-eadfd58702a0",
                "d6a13916-81c9-4501-a7c9-a5ef5767cff7",
                "9b3fbe4b-ed10-4473-8e40-31fff0722fac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "92607d6e-c34c-448b-b654-e7c59d6ba6cc",
              "title": "traffic Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Subreddit Controller Test traffic Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    type: \"year\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  traffic: async (subredditName, userId, type) => {\n    const response = {\n      success: true,\n      data: [{ _id: 2022, numOfUsers: 20000 }],\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.traffic(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  data: [{ _id: 2022, numOfUsers: 20000 }],\n});",
                  "err": {},
                  "uuid": "d495ad89-c672-4797-afec-c62b694e4c2c",
                  "parentUUID": "92607d6e-c34c-448b-b654-e7c59d6ba6cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2nd test fail",
                  "fullTitle": "Subreddit Controller Test traffic Test 2nd test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    type: \"year\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  traffic: async (subredditName, userId, type) => {\n    const response = {};\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.traffic(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter topic\",\n});",
                  "err": {},
                  "uuid": "c392f9cd-9018-4dde-976b-b6ddc140f110",
                  "parentUUID": "92607d6e-c34c-448b-b654-e7c59d6ba6cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3rd test fail",
                  "fullTitle": "Subreddit Controller Test traffic Test 3rd test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    type: \"year\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  traffic: async (subredditName, userId, type) => {\n    const response = {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.traffic(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Subreddit not found\",\n});",
                  "err": {},
                  "uuid": "48b9bc86-0ae8-4a9f-8545-a9e3e1136f11",
                  "parentUUID": "92607d6e-c34c-448b-b654-e7c59d6ba6cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4th test fail",
                  "fullTitle": "Subreddit Controller Test traffic Test 4th test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    type: \"year\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  traffic: async (subredditName, userId, type) => {\n    const response = {\n      success: false,\n      error: subredditErrors.NOT_MODERATOR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.traffic(req, res);\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status(401).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"you are not moderator to preform this request\",\n});",
                  "err": {},
                  "uuid": "b5d62140-5293-4acd-9384-03195a43cd6e",
                  "parentUUID": "92607d6e-c34c-448b-b654-e7c59d6ba6cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5th test fail",
                  "fullTitle": "Subreddit Controller Test traffic Test 5th test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    type: \"year\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  traffic: async (subredditName, userId, type) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.traffic(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: undefined,\n});",
                  "err": {},
                  "uuid": "76cda90d-428a-4d2a-bb9b-0db934e74e39",
                  "parentUUID": "92607d6e-c34c-448b-b654-e7c59d6ba6cc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d495ad89-c672-4797-afec-c62b694e4c2c",
                "c392f9cd-9018-4dde-976b-b6ddc140f110",
                "48b9bc86-0ae8-4a9f-8545-a9e3e1136f11",
                "b5d62140-5293-4acd-9384-03195a43cd6e",
                "76cda90d-428a-4d2a-bb9b-0db934e74e39"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "f4c8d30b-7dfd-4836-ba9e-8b4ff067d2fd",
              "title": "pendingInvetations Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Subreddit Controller Test pendingInvetations Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  invitations: async (subredditName, userId) => {\n    const response = {\n      success: true,\n      data: [{ user: {}, inviteDate: \"22/12/2022\" }],\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.pendingInvetations(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  data: [{ user: {}, inviteDate: \"22/12/2022\" }],\n});",
                  "err": {},
                  "uuid": "fa2835b1-00c4-450e-b546-691f3d1c7c44",
                  "parentUUID": "f4c8d30b-7dfd-4836-ba9e-8b4ff067d2fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2nd test fail",
                  "fullTitle": "Subreddit Controller Test pendingInvetations Test 2nd test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {},\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  invitations: async (subredditName, userId) => {\n    const response = {};\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.pendingInvetations(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter subredditName\",\n});",
                  "err": {},
                  "uuid": "63ef1a58-f6d1-4bca-b08f-c755f0eab7e6",
                  "parentUUID": "f4c8d30b-7dfd-4836-ba9e-8b4ff067d2fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3rd test fail",
                  "fullTitle": "Subreddit Controller Test pendingInvetations Test 3rd test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  invitations: async (subredditName, userId) => {\n    const response = {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.pendingInvetations(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Subreddit not found\",\n});",
                  "err": {},
                  "uuid": "1a354449-13a7-4578-b317-38becbe3d981",
                  "parentUUID": "f4c8d30b-7dfd-4836-ba9e-8b4ff067d2fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4th test fail",
                  "fullTitle": "Subreddit Controller Test pendingInvetations Test 4th test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  invitations: async (subredditName, userId) => {\n    const response = {\n      success: false,\n      error: subredditErrors.NOT_MODERATOR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.pendingInvetations(req, res);\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status(401).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"you are not moderator to preform this action\",\n});",
                  "err": {},
                  "uuid": "b1d625a3-5ec2-4514-b1a1-7607eb40cf69",
                  "parentUUID": "f4c8d30b-7dfd-4836-ba9e-8b4ff067d2fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5th test fail",
                  "fullTitle": "Subreddit Controller Test pendingInvetations Test 5th test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  invitations: async (subredditName, userId) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.pendingInvetations(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: undefined,\n});",
                  "err": {},
                  "uuid": "6d764364-ab3f-4923-9499-ab2eefbc352a",
                  "parentUUID": "f4c8d30b-7dfd-4836-ba9e-8b4ff067d2fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fa2835b1-00c4-450e-b546-691f3d1c7c44",
                "63ef1a58-f6d1-4bca-b08f-c755f0eab7e6",
                "1a354449-13a7-4578-b317-38becbe3d981",
                "b1d625a3-5ec2-4514-b1a1-7607eb40cf69",
                "6d764364-ab3f-4923-9499-ab2eefbc352a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "06b71918-a30e-4c57-973e-a03474d03b54",
              "title": "deletemoderator Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "1st test success",
                  "fullTitle": "Subreddit Controller Test deletemoderator Test 1st test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    moderatorName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  deleteMod: async (subredditName, userId, modName) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.deletemoderator(req, res, next);\nexpect(res.status).to.have.been.calledWith(204);\nexpect(res.status(204).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "fa99b1db-704f-41fc-9ded-0abf4c8541d0",
                  "parentUUID": "06b71918-a30e-4c57-973e-a03474d03b54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2nd test fail",
                  "fullTitle": "Subreddit Controller Test deletemoderator Test 2nd test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    moderatorName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  deleteMod: async (subredditName, userId, modName) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.deletemoderator(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter subredditName\",\n});",
                  "err": {},
                  "uuid": "fc775829-64bf-40ee-9425-a5b3d6d3630e",
                  "parentUUID": "06b71918-a30e-4c57-973e-a03474d03b54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "test fail",
                  "fullTitle": "Subreddit Controller Test deletemoderator Test test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    moderatorName: \"khaled\",\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  deleteMod: async (subredditName, userId, modName) => {\n    const response = {\n      success: false,\n      error: subredditErrors.CANNOT_DELETE,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.deletemoderator(req, res);\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status(401).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"canot delete mod higher than you in mod tree\",\n});",
                  "err": {},
                  "uuid": "e136d939-136a-46ca-b786-9363f7add85a",
                  "parentUUID": "06b71918-a30e-4c57-973e-a03474d03b54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3rd test fail",
                  "fullTitle": "Subreddit Controller Test deletemoderator Test 3rd test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    permissions: {\n      all: true,\n      access: true,\n      config: true,\n      flair: true,\n      posts: true,\n    },\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  deleteMod: async (subredditName, userId, modName) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.deletemoderator(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter moderatorName\",\n});",
                  "err": {},
                  "uuid": "6c648df0-9f2a-478b-9484-a55865d0a847",
                  "parentUUID": "06b71918-a30e-4c57-973e-a03474d03b54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4th test fail",
                  "fullTitle": "Subreddit Controller Test deletemoderator Test 4th test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    moderatorName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    permissions: {\n      all: true,\n      access: true,\n      config: true,\n      flair: true,\n      posts: true,\n    },\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  deleteMod: async (subredditName, userId, modName) => {\n    const response = {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.deletemoderator(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Subreddit not found\",\n});",
                  "err": {},
                  "uuid": "9c43a929-f0a8-45ca-83ff-d3b464443cfa",
                  "parentUUID": "06b71918-a30e-4c57-973e-a03474d03b54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5th test fail",
                  "fullTitle": "Subreddit Controller Test deletemoderator Test 5th test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    moderatorName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    permissions: {\n      all: true,\n      access: true,\n      config: true,\n      flair: true,\n      posts: true,\n    },\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  deleteMod: async (subredditName, userId, modName) => {\n    const response = {\n      success: false,\n      error: subredditErrors.NOT_MODERATOR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.deletemoderator(req, res);\nexpect(res.status).to.have.been.calledWith(401);\nexpect(res.status(401).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"you are not moderator to preform this action\",\n});",
                  "err": {},
                  "uuid": "bef99288-08a1-4fc7-ba68-6c45c5ce08dd",
                  "parentUUID": "06b71918-a30e-4c57-973e-a03474d03b54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "6th test fail",
                  "fullTitle": "Subreddit Controller Test deletemoderator Test 6th test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    moderatorName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    permissions: {\n      all: true,\n      access: true,\n      config: true,\n      flair: true,\n      posts: true,\n    },\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  deleteMod: async (subredditName, userId, modName, data) => {\n    const response = {\n      success: false,\n      error: userErrors.USER_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.deletemoderator(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"user not found\",\n});",
                  "err": {},
                  "uuid": "fc9f7ccf-a249-4996-9e50-95226b1bba8b",
                  "parentUUID": "06b71918-a30e-4c57-973e-a03474d03b54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "7th test fail",
                  "fullTitle": "Subreddit Controller Test deletemoderator Test 7th test fail",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    moderatorName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    permissions: {\n      all: true,\n      access: true,\n      config: true,\n      flair: true,\n      posts: true,\n    },\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  deleteMod: async (subredditName, userId, modName, data) => {\n    const response = {\n      success: false,\n      error: userErrors.Not_MODERATOR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.deletemoderator(req, res);\nexpect(res.status).to.have.been.calledWith(204);\nexpect(res.status(204).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"user is not a moderator\",\n});",
                  "err": {},
                  "uuid": "38542fff-fafb-4267-872f-7d7d2b2afda6",
                  "parentUUID": "06b71918-a30e-4c57-973e-a03474d03b54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "8th test fail",
                  "fullTitle": "Subreddit Controller Test deletemoderator Test 8th test fail",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    moderatorName: \"khaled\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {\n    permissions: {\n      all: true,\n      access: true,\n      config: true,\n      flair: true,\n      posts: true,\n    },\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  deleteMod: async (subredditName, userId, modName, data) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.deletemoderator(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: undefined,\n});",
                  "err": {},
                  "uuid": "01fe391a-72ed-4642-8f6a-160a291f2cb3",
                  "parentUUID": "06b71918-a30e-4c57-973e-a03474d03b54",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fa99b1db-704f-41fc-9ded-0abf4c8541d0",
                "fc775829-64bf-40ee-9425-a5b3d6d3630e",
                "e136d939-136a-46ca-b786-9363f7add85a",
                "6c648df0-9f2a-478b-9484-a55865d0a847",
                "9c43a929-f0a8-45ca-83ff-d3b464443cfa",
                "bef99288-08a1-4fc7-ba68-6c45c5ce08dd",
                "fc9f7ccf-a249-4996-9e50-95226b1bba8b",
                "38542fff-fafb-4267-872f-7d7d2b2afda6",
                "01fe391a-72ed-4642-8f6a-160a291f2cb3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "566fa20f-1d33-42ca-b476-fd6e7fd2d317",
              "title": "getModerators Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Subreddit Controller Test getModerators Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  mods: async (subredditName) => {\n    const response = {\n      success: true,\n      data: { user: { _id: \"10\" }, morTime: \"22/2/2020\" },\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.getModerators(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  data: { user: { _id: \"10\" }, morTime: \"22/2/2020\" },\n});",
                  "err": {},
                  "uuid": "1b7a5f12-5b32-4c05-a008-8bfd556c6f47",
                  "parentUUID": "566fa20f-1d33-42ca-b476-fd6e7fd2d317",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2nd test fail",
                  "fullTitle": "Subreddit Controller Test getModerators Test 2nd test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {},\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  mods: async (subredditName) => {\n    const response = {\n      success: true,\n      data: { user: { _id: \"10\" }, morTime: \"22/2/2020\" },\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.getModerators(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Missing required parameter subredditName\",\n});",
                  "err": {},
                  "uuid": "4f3e19fa-039c-4453-b10e-68aaddfb57e7",
                  "parentUUID": "566fa20f-1d33-42ca-b476-fd6e7fd2d317",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3rd test fail",
                  "fullTitle": "Subreddit Controller Test getModerators Test 3rd test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  mods: async (subredditName) => {\n    const response = {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.getModerators(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Subreddit not found\",\n});",
                  "err": {},
                  "uuid": "34d25f1e-a564-4401-a3b9-d65c5b03f837",
                  "parentUUID": "566fa20f-1d33-42ca-b476-fd6e7fd2d317",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4th test success",
                  "fullTitle": "Subreddit Controller Test getModerators Test 4th test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n};\nconst UserService = {};\nconst subredditService = {\n  mods: async (subredditName) => {\n    const response = {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\n// console.log(subredditController);\nawait subredditController.getModerators(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: undefined,\n});",
                  "err": {},
                  "uuid": "03af3a90-91e2-45ad-83d0-93c2c3e23f40",
                  "parentUUID": "566fa20f-1d33-42ca-b476-fd6e7fd2d317",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b7a5f12-5b32-4c05-a008-8bfd556c6f47",
                "4f3e19fa-039c-4453-b10e-68aaddfb57e7",
                "34d25f1e-a564-4401-a3b9-d65c5b03f837",
                "03af3a90-91e2-45ad-83d0-93c2c3e23f40"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "05c37179-6fe2-4470-8fdf-56ae2fb85c29",
              "title": "updateFlair Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\subredditController.js",
              "file": "\\test\\controllers\\subredditController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "Subreddit Controller Test updateFlair Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    flairId: \"10\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  updateFlair: async (subredditName, flairId, data, userId) => {\n    const response = {\n      success: true,\n      data: { _id: \"10\" },\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\nawait subredditController.updateFlair(req, res);\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"OK\",\n  data: { _id: \"10\" },\n});",
                  "err": {},
                  "uuid": "0ca6a50f-d7b7-4582-9ea8-1ddef5dce4f9",
                  "parentUUID": "05c37179-6fe2-4470-8fdf-56ae2fb85c29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2nd test fail",
                  "fullTitle": "Subreddit Controller Test updateFlair Test 2nd test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  updateFlair: async (subredditName, flairId, data, userId) => {\n    const response = {};\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\nawait subredditController.updateFlair(req, res);\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"Missing required parameter\",\n});",
                  "err": {},
                  "uuid": "4c7180c5-1215-4d19-8559-5f447be3e88b",
                  "parentUUID": "05c37179-6fe2-4470-8fdf-56ae2fb85c29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3rd test fail",
                  "fullTitle": "Subreddit Controller Test updateFlair Test 3rd test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    flairId: \"10\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  updateFlair: async (subredditName, flairId, data, userId) => {\n    const response = {\n      success: false,\n      error: subredditErrors.NOT_MODERATOR,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\nawait subredditController.updateFlair(req, res);\nexpect(res.status).to.have.been.calledWith(403);\nexpect(res.status(403).json).to.have.been.calledWith({\n  status: \"Forbidden\",\n  message: \"Not a subreddit moderator\",\n});",
                  "err": {},
                  "uuid": "8e95a220-195e-4666-ab23-072610a0aefd",
                  "parentUUID": "05c37179-6fe2-4470-8fdf-56ae2fb85c29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "4th test fail",
                  "fullTitle": "Subreddit Controller Test updateFlair Test 4th test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    flairId: \"10\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  updateFlair: async (subredditName, flairId, data, userId) => {\n    const response = {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\nawait subredditController.updateFlair(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"Not Found\",\n  message: \"Subreddit not found\",\n});",
                  "err": {},
                  "uuid": "5b732ae2-9e0a-417c-9c73-640e400c8075",
                  "parentUUID": "05c37179-6fe2-4470-8fdf-56ae2fb85c29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "5th test fail",
                  "fullTitle": "Subreddit Controller Test updateFlair Test 5th test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {\n    subredditName: \"Subreddit name\",\n    flairId: \"10\",\n  },\n  user: {\n    _id: \"10\",\n    userName: \"khaled hesham\",\n  },\n  body: {},\n};\nconst UserService = {};\nconst subredditService = {\n  updateFlair: async (subredditName, flairId, data, userId) => {\n    const response = {\n      success: false,\n      error: subredditErrors.FLAIR_NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst subredditController = new SubredditController({\n  subredditService,\n  UserService,\n});\nawait subredditController.updateFlair(req, res);\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"Not Found\",\n  message: \"Flair not found\",\n});",
                  "err": {},
                  "uuid": "53b2292d-8824-491d-8092-0d5b6d3af54f",
                  "parentUUID": "05c37179-6fe2-4470-8fdf-56ae2fb85c29",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ca6a50f-d7b7-4582-9ea8-1ddef5dce4f9",
                "4c7180c5-1215-4d19-8559-5f447be3e88b",
                "8e95a220-195e-4666-ab23-072610a0aefd",
                "5b732ae2-9e0a-417c-9c73-640e400c8075",
                "53b2292d-8824-491d-8092-0d5b6d3af54f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "e29959a7-b726-483f-86d7-34e322cc2d3f",
          "title": "User Controller Test",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\userController.js",
          "file": "\\test\\controllers\\userController.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f960c15a-9a65-463a-8e6f-f60aee4f83d6",
              "title": "get me Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\userController.js",
              "file": "\\test\\controllers\\userController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "User Controller Test get me Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n    userName: \"ahmed\",\n    email: \"ahmed@gmail.com\",\n    profilePicture: \"\",\n    profileBackground: \"\",\n    canbeFollowed: true,\n    lastUpdatedPassword: \"\",\n    followersCount: 0,\n    friendsCount: 0,\n    accountActivated: false,\n    gender: \"male\",\n    displayName: \"ahmed\",\n    postKarma: 1,\n    commentKarma: 1,\n    joinDate: \"\",\n    description: \"\",\n    adultContent: false,\n    nsfw: false,\n    country: \"egypt\",\n    socialLinks: [],\n    emailVerified: true,\n  },\n};\nconst userController = new UserController({});\nawait userController.getMe(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  user: {\n    id: \"1\",\n    userName: \"ahmed\",\n    email: \"ahmed@gmail.com\",\n    profilePicture: \"\",\n    profileBackground: \"\",\n    canbeFollowed: true,\n    lastUpdatedPassword: \"\",\n    followersCount: 0,\n    friendsCount: 0,\n    accountActivated: false,\n    gender: \"male\",\n    displayName: \"ahmed\",\n    postKarma: 1,\n    commentKarma: 1,\n    createdAt: \"\",\n    description: \"\",\n    adultContent: false,\n    nsfw: false,\n    country: \"egypt\",\n    socialLinks: [],\n    emailVerified: true,\n  },\n});",
                  "err": {},
                  "uuid": "af434fd9-4afe-48d8-bb91-1188a230ac28",
                  "parentUUID": "f960c15a-9a65-463a-8e6f-f60aee4f83d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "af434fd9-4afe-48d8-bb91-1188a230ac28"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "3c6a05d7-cf0c-49a8-ab11-c87f3491c135",
              "title": "get preferences Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\userController.js",
              "file": "\\test\\controllers\\userController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "User Controller Test get preferences Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n    email: \"ahmedAgmail.com\",\n    userName: \"ahmed\",\n    canbeFollowed: true,\n    nsfw: false,\n    gender: \"male\",\n    adultContent: false,\n    autoplayMedia: true,\n    displayName: \"Ahmed Sabry\",\n    profilePicture: \"icon.png\",\n    profileBackground: \"icon.png\",\n    description: \"\",\n    country: \"egypt\",\n    socialLinks: [],\n    emailVerified: true,\n  },\n};\nconst UserService = {\n  getPrefs: (user) => {\n    let response = {\n      canbeFollowed: true,\n      nsfw: false,\n      gender: \"male\",\n      adultContent: false,\n      autoplayMedia: true,\n      displayName: \"Ahmed Sabry\",\n      profilePicture: \"icon.png\",\n      profileBackground: \"icon.png\",\n      description: \"\",\n      country: \"egypt\",\n      socialLinks: [],\n      emailVerified: true,\n    };\n    return response;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.getPrefs(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  prefs: {\n    canbeFollowed: true,\n    nsfw: false,\n    gender: \"male\",\n    adultContent: false,\n    autoplayMedia: true,\n    displayName: \"Ahmed Sabry\",\n    profilePicture: \"icon.png\",\n    profileBackground: \"icon.png\",\n    description: \"\",\n    country: \"egypt\",\n    socialLinks: [],\n    emailVerified: true,\n  },\n});",
                  "err": {},
                  "uuid": "bef67510-e3f4-4431-9ebe-854dff333977",
                  "parentUUID": "3c6a05d7-cf0c-49a8-ab11-c87f3491c135",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bef67510-e3f4-4431-9ebe-854dff333977"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "a5bebdd5-8c51-491c-8139-1c8e147bf78f",
              "title": "update preferences Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\userController.js",
              "file": "\\test\\controllers\\userController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "User Controller Test update preferences Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n    email: \"ahmedAgmail.com\",\n    userName: \"ahmed\",\n    canbeFollowed: true,\n    nsfw: false,\n    gender: \"male\",\n    adultContent: false,\n    autoplayMedia: true,\n    displayName: \"Ahmed Sabry\",\n    profilePicture: \"icon.png\",\n    profileBackground: \"icon.png\",\n    description: \"\",\n    country: \"egypt\",\n    socialLinks: [],\n  },\n};\nconst UserService = {\n  updatePrefs: (user) => {\n    let response = {\n      canbeFollowed: false,\n      nsfw: false,\n      gender: \"male\",\n      adultContent: false,\n      autoplayMedia: true,\n      displayName: \"Ahmed Sabry\",\n      profilePicture: \"icon.png\",\n      profileBackground: \"icon.png\",\n      description: \"\",\n      country: \"egypt\",\n      socialLinks: [],\n    };\n    return response;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.updatePrefs(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  prefs: {\n    canbeFollowed: false,\n    nsfw: false,\n    gender: \"male\",\n    adultContent: false,\n    autoplayMedia: true,\n    displayName: \"Ahmed Sabry\",\n    profilePicture: \"icon.png\",\n    profileBackground: \"icon.png\",\n    description: \"\",\n    country: \"egypt\",\n    socialLinks: [],\n  },\n});",
                  "err": {},
                  "uuid": "0c066348-6009-4485-9ecb-78a98781601d",
                  "parentUUID": "a5bebdd5-8c51-491c-8139-1c8e147bf78f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c066348-6009-4485-9ecb-78a98781601d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "5e1917e6-8ad0-42d5-9800-e5722e621634",
              "title": "about user Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\userController.js",
              "file": "\\test\\controllers\\userController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "User Controller Test about user Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n    meUserRelationship: [\n      { userId: \"1\", status: \"followed\" },\n      { userId: \"2\", status: \"followed\" },\n      { userId: \"3\", status: \"followed\" },\n    ],\n    userMeRelationship: [\n      { userId: \"1\", status: \"none\" },\n      { userId: \"2\", status: \"none\" },\n      { userId: \"3\", status: \"none\" },\n    ],\n  },\n  params: {\n    userName: \"name\",\n  },\n};\nconst UserService = {\n  getUserByName: (user) => {\n    let response = {\n      success: true,\n      data: {\n        _id: \"2\",\n        userName: \"mohamed\",\n        profilePicture: \"\",\n        profileBackground: \"\",\n        canbeFollowed: true,\n        followersCount: 0,\n        friendsCount: 0,\n        gender: \"male\",\n        displayName: \"mohamed\",\n        postKarma: 1,\n        commentKarma: 2,\n        description: \"\",\n        joinDate: \"\",\n        nsfw: false,\n        autoplayMedia: false,\n        adultContent: false,\n        adultContent: false,\n        country: \"egypt\",\n        socialLinks: [],\n      },\n    };\n    return response;\n  },\n  about: (me, user) => {\n    let searchUser = {\n      _id: \"2\",\n      userName: \"mohamed\",\n      profilePicture: \"\",\n      profileBackground: \"\",\n      canbeFollowed: true,\n      followersCount: 0,\n      friendsCount: 0,\n      gender: \"male\",\n      displayName: \"mohamed\",\n      postKarma: 1,\n      commentKarma: 2,\n      description: \"\",\n      createdAt: \"\",\n      nsfw: false,\n      autoplayMedia: false,\n      adultContent: false,\n      adultContent: false,\n      country: \"egypt\",\n      socialLinks: [],\n      isFollowed: true,\n      isBlocked: false,\n    };\n    return searchUser;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.about(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  user: {\n    _id: \"2\",\n    userName: \"mohamed\",\n    profilePicture: \"\",\n    profileBackground: \"\",\n    canbeFollowed: true,\n    followersCount: 0,\n    friendsCount: 0,\n    gender: \"male\",\n    displayName: \"mohamed\",\n    postKarma: 1,\n    commentKarma: 2,\n    description: \"\",\n    createdAt: \"\",\n    nsfw: false,\n    autoplayMedia: false,\n    adultContent: false,\n    country: \"egypt\",\n    isFollowed: true,\n    isBlocked: false,\n    socialLinks: [],\n  },\n});",
                  "err": {},
                  "uuid": "3bbb9cd2-7aee-4a70-8e41-9add11d20e46",
                  "parentUUID": "5e1917e6-8ad0-42d5-9800-e5722e621634",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test fail username not found",
                  "fullTitle": "User Controller Test about user Test second test fail username not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n    meUserRelationship: [\n      { userId: \"1\", status: \"followed\" },\n      { userId: \"2\", status: \"followed\" },\n      { userId: \"3\", status: \"followed\" },\n    ],\n    userMeRelationship: [\n      { userId: \"1\", status: \"none\" },\n      { userId: \"2\", status: \"none\" },\n      { userId: \"3\", status: \"none\" },\n    ],\n  },\n  params: {\n    userName: \"name\",\n  },\n};\nconst UserService = {\n  getUserByName: (user) => {\n    let response = {\n      success: false,\n      error: userErrors.USER_NOT_FOUND,\n      msg: \"User Not Found\",\n    };\n    return response;\n  },\n  about: (me, user) => {\n    let searchUser = {\n      _id: \"2\",\n      userName: \"mohamed\",\n      profilePicture: \"\",\n      profileBackground: \"\",\n      canbeFollowed: true,\n      followersCount: 0,\n      friendsCount: 0,\n      gender: \"male\",\n      displayName: \"mohamed\",\n      postKarma: 1,\n      commentKarma: 2,\n      description: \"\",\n      createdAt: \"\",\n      nsfw: false,\n      autoplayMedia: false,\n      adultContent: false,\n      adultContent: false,\n      country: \"egypt\",\n      socialLinks: [],\n      isFollowed: true,\n      isBlocked: false,\n    };\n    return searchUser;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.about(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"User Not Found\",\n});",
                  "err": {},
                  "uuid": "e9185b7c-bd49-4d39-a0ed-a82d9380dd74",
                  "parentUUID": "5e1917e6-8ad0-42d5-9800-e5722e621634",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test not followed",
                  "fullTitle": "User Controller Test about user Test thrid test not followed",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    _id: \"1\",\n    meUserRelationship: [\n      { userId: \"1\", status: \"followed\" },\n      { userId: \"2\", status: \"followed\" },\n      { userId: \"3\", status: \"followed\" },\n    ],\n    userMeRelationship: [\n      { userId: \"1\", status: \"none\" },\n      { userId: \"2\", status: \"none\" },\n      { userId: \"3\", status: \"none\" },\n    ],\n  },\n  params: {\n    userName: \"name\",\n  },\n};\nconst UserService = {\n  getUserByName: (user) => {\n    let response = {\n      success: true,\n      data: {\n        _id: \"6\",\n        userName: \"mohamed\",\n        profilePicture: \"\",\n        profileBackground: \"\",\n        canbeFollowed: true,\n        followersCount: 0,\n        friendsCount: 0,\n        gender: \"male\",\n        displayName: \"mohamed\",\n        postKarma: 1,\n        commentKarma: 2,\n        description: \"\",\n        joinDate: \"\",\n        nsfw: false,\n        autoplayMedia: false,\n        adultContent: false,\n        country: \"egypt\",\n        socialLinks: [],\n      },\n    };\n    return response;\n  },\n  about: (me, user) => {\n    let searchUser = {\n      _id: \"6\",\n      userName: \"mohamed\",\n      profilePicture: \"\",\n      profileBackground: \"\",\n      canbeFollowed: true,\n      followersCount: 0,\n      friendsCount: 0,\n      gender: \"male\",\n      displayName: \"mohamed\",\n      postKarma: 1,\n      commentKarma: 2,\n      description: \"\",\n      createdAt: \"\",\n      nsfw: false,\n      autoplayMedia: false,\n      adultContent: false,\n      adultContent: false,\n      country: \"egypt\",\n      socialLinks: [],\n      isFollowed: false,\n      isBlocked: false,\n    };\n    return searchUser;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.about(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  user: {\n    _id: \"6\",\n    userName: \"mohamed\",\n    profilePicture: \"\",\n    profileBackground: \"\",\n    canbeFollowed: true,\n    followersCount: 0,\n    friendsCount: 0,\n    gender: \"male\",\n    displayName: \"mohamed\",\n    postKarma: 1,\n    commentKarma: 2,\n    description: \"\",\n    createdAt: \"\",\n    nsfw: false,\n    autoplayMedia: false,\n    adultContent: false,\n    country: \"egypt\",\n    isFollowed: false,\n    isBlocked: false,\n    socialLinks: [],\n  },\n});",
                  "err": {},
                  "uuid": "27f36bfe-27d8-4686-9c4a-776f5624cb24",
                  "parentUUID": "5e1917e6-8ad0-42d5-9800-e5722e621634",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test success",
                  "fullTitle": "User Controller Test about user Test fourth test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  params: {},\n};\nconst UserService = {};\nconst userController = new UserController({ UserService });\nawait userController.about(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Provide userName \",\n});",
                  "err": {},
                  "uuid": "6d32387c-1e90-41ce-a7c0-cc52c549e2bb",
                  "parentUUID": "5e1917e6-8ad0-42d5-9800-e5722e621634",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3bbb9cd2-7aee-4a70-8e41-9add11d20e46",
                "e9185b7c-bd49-4d39-a0ed-a82d9380dd74",
                "27f36bfe-27d8-4686-9c4a-776f5624cb24",
                "6d32387c-1e90-41ce-a7c0-cc52c549e2bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "a4303cef-8afb-46e5-8335-ef36d1fa9c54",
              "title": "UsernameAvailable Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\userController.js",
              "file": "\\test\\controllers\\userController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "available",
                  "fullTitle": "User Controller Test UsernameAvailable Test available",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "UserService.isAvailable = async (userName) => true;\nawait userController.usernameAvailable(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"success\",\n  available: true,\n});",
                  "err": {},
                  "uuid": "97c7557a-779a-48ed-a85b-bfc9fd1601f1",
                  "parentUUID": "a4303cef-8afb-46e5-8335-ef36d1fa9c54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "unavailable",
                  "fullTitle": "User Controller Test UsernameAvailable Test unavailable",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "UserService.isAvailable = async (userName) => false;\nawait userController.usernameAvailable(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"success\",\n  available: false,\n});",
                  "err": {},
                  "uuid": "ff80d041-6868-4482-8bc7-13346cf26cb4",
                  "parentUUID": "a4303cef-8afb-46e5-8335-ef36d1fa9c54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid request",
                  "fullTitle": "User Controller Test UsernameAvailable Test Invalid request",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "delete req.query;\nawait userController.usernameAvailable(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status().json).to.have.been.calledWith({\n  status: \"fail\",\n  message: \"userName query paramater is required\",\n});",
                  "err": {},
                  "uuid": "5cc82716-6d33-4f6b-9aa7-46953735addf",
                  "parentUUID": "a4303cef-8afb-46e5-8335-ef36d1fa9c54",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "97c7557a-779a-48ed-a85b-bfc9fd1601f1",
                "ff80d041-6868-4482-8bc7-13346cf26cb4",
                "5cc82716-6d33-4f6b-9aa7-46953735addf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "83aa71a3-29d5-436b-b40e-80e8450699a4",
              "title": "getSocialLinks Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\userController.js",
              "file": "\\test\\controllers\\userController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "User Controller Test getSocialLinks Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {};\nconst UserService = {\n  getSocialLinks: () => {\n    let socialLinks = [\n      {\n        _id: \"1\",\n        check: \"https://facebook.com/\",\n        placeholderLink: \"https://facebook.com\",\n        baseLink: \"https://facebook.com/\",\n        type: \"facebook\",\n      },\n    ];\n    return socialLinks;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.getSocialLinks(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  socialLinks: [\n    {\n      _id: \"1\",\n      check: \"https://facebook.com/\",\n      placeholderLink: \"https://facebook.com\",\n      baseLink: \"https://facebook.com/\",\n      type: \"facebook\",\n    },\n  ],\n});",
                  "err": {},
                  "uuid": "7c8a4513-e4b4-42dd-b43f-6feb4238a8cc",
                  "parentUUID": "83aa71a3-29d5-436b-b40e-80e8450699a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c8a4513-e4b4-42dd-b43f-6feb4238a8cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "6c31c7cf-97db-4745-9477-7a85732ad5f9",
              "title": "addSocialLink Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\userController.js",
              "file": "\\test\\controllers\\userController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "User Controller Test addSocialLink Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    displayText: \"\",\n    userLink: \"\",\n    socialId: \"\",\n  },\n};\nconst UserService = {\n  createSocialLinks: (me, displayText, userLink, socialId) => {\n    let response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.addSocialLink(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(201);\nexpect(res.status(201).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "d21d3efe-cb92-4c61-b398-ea0712e7bce5",
                  "parentUUID": "6c31c7cf-97db-4745-9477-7a85732ad5f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test bad request",
                  "fullTitle": "User Controller Test addSocialLink Test second test bad request",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    displayText: \"\",\n    userLink: \"\",\n  },\n};\nconst UserService = {\n  createSocialLinks: (me, displayText, userLink, socialId) => {\n    let response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.addSocialLink(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Provide displayText , userLink and socialId \",\n});",
                  "err": {},
                  "uuid": "2a50755e-3b5c-4586-a4d7-0d549477a9f1",
                  "parentUUID": "6c31c7cf-97db-4745-9477-7a85732ad5f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test bad request",
                  "fullTitle": "User Controller Test addSocialLink Test thrid test bad request",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    displayText: \"\",\n    userLink: \"\",\n    socialId: \"\",\n  },\n};\nconst UserService = {\n  createSocialLinks: (me, displayText, userLink, socialId) => {\n    let response = {\n      success: false,\n      msg: \"error\",\n      error: 8,\n    };\n    return response;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.addSocialLink(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"error\",\n});",
                  "err": {},
                  "uuid": "31c02756-f6e3-4463-bda1-7fb6d623e98e",
                  "parentUUID": "6c31c7cf-97db-4745-9477-7a85732ad5f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test not found",
                  "fullTitle": "User Controller Test addSocialLink Test fourth test not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    displayText: \"\",\n    userLink: \"\",\n    socialId: \"\",\n  },\n};\nconst UserService = {\n  createSocialLinks: (me, displayText, userLink, socialId) => {\n    let response = {\n      success: false,\n      msg: \"error\",\n      error: 9,\n    };\n    return response;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.addSocialLink(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"error\",\n});",
                  "err": {},
                  "uuid": "dd8d4c07-cd11-4329-b20f-ad29906903ed",
                  "parentUUID": "6c31c7cf-97db-4745-9477-7a85732ad5f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d21d3efe-cb92-4c61-b398-ea0712e7bce5",
                "2a50755e-3b5c-4586-a4d7-0d549477a9f1",
                "31c02756-f6e3-4463-bda1-7fb6d623e98e",
                "dd8d4c07-cd11-4329-b20f-ad29906903ed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "49749359-a2ff-4af3-807a-e440b433b773",
              "title": "updateSocialLink Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\userController.js",
              "file": "\\test\\controllers\\userController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "User Controller Test updateSocialLink Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    displayText: \"\",\n    userLink: \"\",\n  },\n  user: {},\n  params: {\n    id: \"1\",\n  },\n};\nconst UserService = {\n  updateSocialLinks: () => {\n    let response = {\n      success: true,\n      socialLinks: [\n        {\n          _id: \"1\",\n          check: \"https://facebook.com/\",\n          placeholderLink: \"https://facebook.com\",\n          baseLink: \"https://facebook.com/\",\n          type: \"facebook\",\n        },\n      ],\n    };\n    return response;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.updateSocialLink(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  socialLinks: [\n    {\n      _id: \"1\",\n      check: \"https://facebook.com/\",\n      placeholderLink: \"https://facebook.com\",\n      baseLink: \"https://facebook.com/\",\n      type: \"facebook\",\n    },\n  ],\n});",
                  "err": {},
                  "uuid": "5ce303e6-9364-4a75-8ed8-374a3fd2d264",
                  "parentUUID": "49749359-a2ff-4af3-807a-e440b433b773",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test fail",
                  "fullTitle": "User Controller Test updateSocialLink Test second test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {},\n  user: {},\n  params: {\n    id: \"1\",\n  },\n};\nconst UserService = {\n  updateSocialLinks: () => {\n    let response = {\n      success: true,\n      socialLinks: [\n        {\n          _id: \"1\",\n          check: \"https://facebook.com/\",\n          placeholderLink: \"https://facebook.com\",\n          baseLink: \"https://facebook.com/\",\n          type: \"facebook\",\n        },\n      ],\n    };\n    return response;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.updateSocialLink(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Provide displayText or userLink.\",\n});",
                  "err": {},
                  "uuid": "c0edc233-ff35-44b1-be26-46a2b8faba5b",
                  "parentUUID": "49749359-a2ff-4af3-807a-e440b433b773",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test fail",
                  "fullTitle": "User Controller Test updateSocialLink Test thrid test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  body: {\n    displayText: \"\",\n    userLink: \"\",\n  },\n  user: {},\n  params: {\n    id: \"1\",\n  },\n};\nconst UserService = {\n  updateSocialLinks: () => {\n    let response = {\n      success: false,\n    };\n    return response;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.updateSocialLink(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"socialLink id not found\",\n});",
                  "err": {},
                  "uuid": "e4329fc6-57dd-4f34-a352-e2dde4c97896",
                  "parentUUID": "49749359-a2ff-4af3-807a-e440b433b773",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5ce303e6-9364-4a75-8ed8-374a3fd2d264",
                "c0edc233-ff35-44b1-be26-46a2b8faba5b",
                "e4329fc6-57dd-4f34-a352-e2dde4c97896"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "748e176e-98de-4862-8eb6-c176dd1198ff",
              "title": "deleteSocialLink Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\userController.js",
              "file": "\\test\\controllers\\userController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "User Controller Test deleteSocialLink Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {},\n  params: {\n    id: \"1\",\n  },\n};\nconst UserService = {\n  deleteSocialLinks: (me, id) => {\n    let response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.deleteSocialLink(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(204);\nexpect(res.status(204).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "3e88a721-406e-4761-b58b-916617c445b3",
                  "parentUUID": "748e176e-98de-4862-8eb6-c176dd1198ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test fail",
                  "fullTitle": "User Controller Test deleteSocialLink Test second test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {},\n  params: {\n    id: \"1\",\n  },\n};\nconst UserService = {\n  deleteSocialLinks: () => {\n    let response = {\n      success: false,\n    };\n    return response;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.deleteSocialLink(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Invalid Social id\",\n});",
                  "err": {},
                  "uuid": "c4d6fe1b-dafe-49df-84e8-736766069ead",
                  "parentUUID": "748e176e-98de-4862-8eb6-c176dd1198ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3e88a721-406e-4761-b58b-916617c445b3",
                "c4d6fe1b-dafe-49df-84e8-736766069ead"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "d6b1d6f1-b447-4d40-ab72-2979736ebc73",
              "title": "blockUser Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\userController.js",
              "file": "\\test\\controllers\\userController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "User Controller Test blockUser Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"2\",\n    test: true,\n  },\n  params: {\n    userName: \"1\",\n  },\n};\nconst UserService = {\n  getUserByName: async (data) => {\n    let response = {\n      success: true,\n      data: {\n        test: true,\n      },\n    };\n    return response;\n  },\n  checkBlockStatus: async (me, data) => {\n    if (!me.test) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  blockUser: async (me, data) => {\n    return true;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.blockUser(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "3fc13b07-029e-4185-b36c-7fdecedfb957",
                  "parentUUID": "d6b1d6f1-b447-4d40-ab72-2979736ebc73",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test fail",
                  "fullTitle": "User Controller Test blockUser Test second test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"2\",\n    test: true,\n  },\n  params: {\n    userName: \"1\",\n  },\n};\nconst UserService = {\n  getUserByName: async (data) => {\n    let response = {\n      success: true,\n      data: {\n        test: true,\n      },\n    };\n    return response;\n  },\n  checkBlockStatus: async (me, data) => {\n    if (me.test) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  blockUser: async (me, data) => {\n    return true;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.blockUser(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(405);\nexpect(res.status(405).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Method Not Allowed\",\n});",
                  "err": {},
                  "uuid": "0856ffef-7b74-467c-a4ad-c086e3ad2f6d",
                  "parentUUID": "d6b1d6f1-b447-4d40-ab72-2979736ebc73",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test fail",
                  "fullTitle": "User Controller Test blockUser Test thrid test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"2\",\n    test: false,\n  },\n  params: {\n    userName: \"1\",\n  },\n};\nconst UserService = {\n  getUserByName: async (data) => {\n    let response = {\n      success: true,\n      data: {\n        test: true,\n      },\n    };\n    return response;\n  },\n  checkBlockStatus: async (me, data) => {\n    if (me.test) {\n      return true;\n    }\n    return false;\n  },\n  blockUser: async (me, data) => {\n    return true;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.blockUser(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(304);\nexpect(res.status(304).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "0ccca421-5734-4768-9b25-4ad5e9f0cf50",
                  "parentUUID": "d6b1d6f1-b447-4d40-ab72-2979736ebc73",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test fail",
                  "fullTitle": "User Controller Test blockUser Test fourth test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"2\",\n    test: true,\n  },\n  params: {\n    userName: \"1\",\n  },\n};\nconst UserService = {\n  getUserByName: async (data) => {\n    let response = {\n      success: false,\n      data: {\n        test: true,\n      },\n    };\n    return response;\n  },\n  checkBlockStatus: async (me, data) => {\n    if (me.test) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  blockUser: async (me, data) => {\n    return true;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.blockUser(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"User Not Found\",\n});",
                  "err": {},
                  "uuid": "5d79a4d7-faaf-434f-9eac-95c6351fa5b9",
                  "parentUUID": "d6b1d6f1-b447-4d40-ab72-2979736ebc73",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fifth test fail",
                  "fullTitle": "User Controller Test blockUser Test fifth test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"2\",\n    test: true,\n  },\n  params: {\n    userName: \"2\",\n  },\n};\nconst UserService = {\n  getUserByName: async (data) => {\n    let response = {\n      success: false,\n      data: {\n        test: true,\n      },\n    };\n    return response;\n  },\n  checkBlockStatus: async (me, data) => {\n    if (me.test) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  blockUser: async (me, data) => {\n    return true;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.blockUser(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Try Blocking yourself\",\n});",
                  "err": {},
                  "uuid": "96498643-7ec6-48f0-8b4f-77ff54f76439",
                  "parentUUID": "d6b1d6f1-b447-4d40-ab72-2979736ebc73",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3fc13b07-029e-4185-b36c-7fdecedfb957",
                "0856ffef-7b74-467c-a4ad-c086e3ad2f6d",
                "0ccca421-5734-4768-9b25-4ad5e9f0cf50",
                "5d79a4d7-faaf-434f-9eac-95c6351fa5b9",
                "96498643-7ec6-48f0-8b4f-77ff54f76439"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "f4d2220d-a021-4841-a672-265da6dc27d0",
              "title": "unBlockUser Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\userController.js",
              "file": "\\test\\controllers\\userController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "User Controller Test unBlockUser Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"2\",\n    test: true,\n  },\n  params: {\n    userName: \"1\",\n  },\n};\nconst UserService = {\n  getUserByName: async (data) => {\n    let response = {\n      success: true,\n      data: {\n        test: true,\n      },\n    };\n    return response;\n  },\n  checkBlockStatus: async (me, data) => {\n    if (!me.test) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  unBlockUser: async (me, data) => {\n    return true;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.unBlockUser(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "bfbf54e6-dc5f-41f9-a8c8-d1f2af8502b5",
                  "parentUUID": "f4d2220d-a021-4841-a672-265da6dc27d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test fail",
                  "fullTitle": "User Controller Test unBlockUser Test second test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"2\",\n    test: true,\n  },\n  params: {\n    userName: \"1\",\n  },\n};\nconst UserService = {\n  getUserByName: async (data) => {\n    let response = {\n      success: true,\n      data: {\n        test: true,\n      },\n    };\n    return response;\n  },\n  checkBlockStatus: async (me, data) => {\n    if (me.test) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  unBlockUser: async (me, data) => {\n    return true;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.unBlockUser(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(405);\nexpect(res.status(405).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Method Not Allowed\",\n});",
                  "err": {},
                  "uuid": "3d3b299c-9679-40db-8ade-3ac3b36009f7",
                  "parentUUID": "f4d2220d-a021-4841-a672-265da6dc27d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test fail",
                  "fullTitle": "User Controller Test unBlockUser Test thrid test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"2\",\n    test: false,\n  },\n  params: {\n    userName: \"1\",\n  },\n};\nconst UserService = {\n  getUserByName: async (data) => {\n    let response = {\n      success: true,\n      data: {\n        test: true,\n      },\n    };\n    return response;\n  },\n  checkBlockStatus: async (me, data) => {\n    if (me.test) {\n      return true;\n    }\n    return false;\n  },\n  unBlockUser: async (me, data) => {\n    return true;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.unBlockUser(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(304);\nexpect(res.status(304).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "a3bd2d3c-d982-44a9-88b7-0c394fc3b850",
                  "parentUUID": "f4d2220d-a021-4841-a672-265da6dc27d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test fail",
                  "fullTitle": "User Controller Test unBlockUser Test fourth test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"2\",\n    test: true,\n  },\n  params: {\n    userName: \"1\",\n  },\n};\nconst UserService = {\n  getUserByName: async (data) => {\n    let response = {\n      success: false,\n      data: {\n        test: true,\n      },\n    };\n    return response;\n  },\n  checkBlockStatus: async (me, data) => {\n    if (me.test) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  unBlockUser: async (me, data) => {\n    return true;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.unBlockUser(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"User Not Found\",\n});",
                  "err": {},
                  "uuid": "eda8c9ff-46cf-46db-8be6-969b01b4abf5",
                  "parentUUID": "f4d2220d-a021-4841-a672-265da6dc27d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fifth test fail",
                  "fullTitle": "User Controller Test unBlockUser Test fifth test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"2\",\n    test: true,\n  },\n  params: {\n    userName: \"2\",\n  },\n};\nconst UserService = {\n  getUserByName: async (data) => {\n    let response = {\n      success: false,\n      data: {\n        test: true,\n      },\n    };\n    return response;\n  },\n  checkBlockStatus: async (me, data) => {\n    if (me.test) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  unBlockUser: async (me, data) => {\n    return true;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.unBlockUser(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Try Blocking yourself\",\n});",
                  "err": {},
                  "uuid": "0eab0b4b-2e28-4e6f-bf6b-3008cc0840fb",
                  "parentUUID": "f4d2220d-a021-4841-a672-265da6dc27d0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bfbf54e6-dc5f-41f9-a8c8-d1f2af8502b5",
                "3d3b299c-9679-40db-8ade-3ac3b36009f7",
                "a3bd2d3c-d982-44a9-88b7-0c394fc3b850",
                "eda8c9ff-46cf-46db-8be6-969b01b4abf5",
                "0eab0b4b-2e28-4e6f-bf6b-3008cc0840fb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "d7a3c70c-8cd3-4c49-97ab-67f6912b52e9",
              "title": "followUser Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\userController.js",
              "file": "\\test\\controllers\\userController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "User Controller Test followUser Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"2\",\n    test: true,\n  },\n  params: {\n    userName: \"1\",\n  },\n};\nconst UserService = {\n  getUserByName: async (data) => {\n    let response = {\n      success: true,\n      data: {\n        test: true,\n      },\n    };\n    return response;\n  },\n  checkBlockStatus: async (me, data) => {\n    if (!me.test) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  followUser: async (me, data) => {\n    return false;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.followUser(req, res, () => {});\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "a6630b26-54bd-45fb-b7cd-1e36f423696b",
                  "parentUUID": "d7a3c70c-8cd3-4c49-97ab-67f6912b52e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test fail",
                  "fullTitle": "User Controller Test followUser Test second test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"2\",\n    test: true,\n  },\n  params: {\n    userName: \"1\",\n  },\n};\nconst UserService = {\n  getUserByName: async (data) => {\n    let response = {\n      success: true,\n      data: {\n        test: true,\n      },\n    };\n    return response;\n  },\n  checkBlockStatus: async (me, data) => {\n    if (me.test) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  followUser: async (me, data) => {\n    return true;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.followUser(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(405);\nexpect(res.status(405).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Method Not Allowed\",\n});",
                  "err": {},
                  "uuid": "871ab249-e8f3-4585-a20a-bd1f63efe1a8",
                  "parentUUID": "d7a3c70c-8cd3-4c49-97ab-67f6912b52e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test fail",
                  "fullTitle": "User Controller Test followUser Test thrid test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"2\",\n    test: false,\n  },\n  params: {\n    userName: \"1\",\n  },\n};\nconst UserService = {\n  getUserByName: async (data) => {\n    let response = {\n      success: true,\n      data: {\n        test: true,\n      },\n    };\n    return response;\n  },\n  checkBlockStatus: async (me, data) => {\n    if (!me.test) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  followUser: async (me, data) => {\n    return true;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.followUser(req, res, () => {});\nexpect(res.status).to.have.been.calledWith(304);\nexpect(res.status(304).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "c8b26bbc-0cf2-489b-aa7e-892b4d658cdf",
                  "parentUUID": "d7a3c70c-8cd3-4c49-97ab-67f6912b52e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test fail",
                  "fullTitle": "User Controller Test followUser Test fourth test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"2\",\n    test: true,\n  },\n  params: {\n    userName: \"1\",\n  },\n};\nconst UserService = {\n  getUserByName: async (data) => {\n    let response = {\n      success: false,\n      data: {\n        test: true,\n      },\n    };\n    return response;\n  },\n  checkBlockStatus: async (me, data) => {\n    if (me.test) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  followUser: async (me, data) => {\n    return true;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.followUser(req, res, () => {});\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"User Not Found\",\n});",
                  "err": {},
                  "uuid": "e2bff4f3-5aa7-422e-97d2-39eccb118e9b",
                  "parentUUID": "d7a3c70c-8cd3-4c49-97ab-67f6912b52e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fifth test fail",
                  "fullTitle": "User Controller Test followUser Test fifth test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"2\",\n    test: true,\n  },\n  params: {\n    userName: \"2\",\n  },\n};\nconst UserService = {\n  getUserByName: async (data) => {\n    let response = {\n      success: false,\n      data: {\n        test: true,\n      },\n    };\n    return response;\n  },\n  checkBlockStatus: async (me, data) => {\n    if (me.test) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  followUser: async (me, data) => {\n    return true;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.followUser(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Try Unfollowing yourself\",\n});",
                  "err": {},
                  "uuid": "b1a7b927-4535-4d6c-a13a-b20023d99284",
                  "parentUUID": "d7a3c70c-8cd3-4c49-97ab-67f6912b52e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a6630b26-54bd-45fb-b7cd-1e36f423696b",
                "871ab249-e8f3-4585-a20a-bd1f63efe1a8",
                "c8b26bbc-0cf2-489b-aa7e-892b4d658cdf",
                "e2bff4f3-5aa7-422e-97d2-39eccb118e9b",
                "b1a7b927-4535-4d6c-a13a-b20023d99284"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "3c158359-6a03-4ca4-8a61-ac5de504707b",
              "title": "unfollowUser Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\userController.js",
              "file": "\\test\\controllers\\userController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "User Controller Test unfollowUser Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"2\",\n    test: true,\n  },\n  params: {\n    userName: \"1\",\n  },\n};\nconst UserService = {\n  getUserByName: async (data) => {\n    let response = {\n      success: true,\n      data: {\n        test: true,\n      },\n    };\n    return response;\n  },\n  checkBlockStatus: async (me, data) => {\n    if (!me.test) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  unfollowUser: async (me, data) => {\n    return false;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.unfollowUser(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "95fdd52c-4714-4661-9cad-2d26aff99633",
                  "parentUUID": "3c158359-6a03-4ca4-8a61-ac5de504707b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test fail",
                  "fullTitle": "User Controller Test unfollowUser Test second test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"2\",\n    test: true,\n  },\n  params: {\n    userName: \"1\",\n  },\n};\nconst UserService = {\n  getUserByName: async (data) => {\n    let response = {\n      success: true,\n      data: {\n        test: true,\n      },\n    };\n    return response;\n  },\n  checkBlockStatus: async (me, data) => {\n    if (me.test) {\n      return true;\n    } else {\n      return true;\n    }\n  },\n  unfollowUser: async (me, data) => {\n    return true;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.unfollowUser(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(405);\nexpect(res.status(405).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Method Not Allowed\",\n});",
                  "err": {},
                  "uuid": "db98039c-e88a-43a7-8639-656753c4518e",
                  "parentUUID": "3c158359-6a03-4ca4-8a61-ac5de504707b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test fail",
                  "fullTitle": "User Controller Test unfollowUser Test thrid test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"2\",\n    test: false,\n  },\n  params: {\n    userName: \"1\",\n  },\n};\nconst UserService = {\n  getUserByName: async (data) => {\n    let response = {\n      success: true,\n      data: {\n        test: true,\n      },\n    };\n    return response;\n  },\n  checkBlockStatus: async (me, data) => {\n    if (!me.test) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  unfollowUser: async (me, data) => {\n    return true;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.unfollowUser(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(304);\nexpect(res.status(304).json).to.have.been.calledWith({\n  status: \"success\",\n});",
                  "err": {},
                  "uuid": "81e43661-8a21-4e90-b45a-70373ef8af12",
                  "parentUUID": "3c158359-6a03-4ca4-8a61-ac5de504707b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test fail",
                  "fullTitle": "User Controller Test unfollowUser Test fourth test fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"2\",\n    test: true,\n  },\n  params: {\n    userName: \"1\",\n  },\n};\nconst UserService = {\n  getUserByName: async (data) => {\n    let response = {\n      success: false,\n      data: {\n        test: true,\n      },\n    };\n    return response;\n  },\n  checkBlockStatus: async (me, data) => {\n    if (me.test) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  unfollowUser: async (me, data) => {\n    return true;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.unfollowUser(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(404);\nexpect(res.status(404).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"User Not Found\",\n});",
                  "err": {},
                  "uuid": "d5e02b1d-cab2-4074-a206-ce6f1bfed78f",
                  "parentUUID": "3c158359-6a03-4ca4-8a61-ac5de504707b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fifth test fail",
                  "fullTitle": "User Controller Test unfollowUser Test fifth test fail",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"2\",\n    test: true,\n  },\n  params: {\n    userName: \"2\",\n  },\n};\nconst UserService = {\n  getUserByName: async (data) => {\n    let response = {\n      success: false,\n      data: {\n        test: true,\n      },\n    };\n    return response;\n  },\n  checkBlockStatus: async (me, data) => {\n    if (me.test) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  unfollowUser: async (me, data) => {\n    return true;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.unfollowUser(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(400);\nexpect(res.status(400).json).to.have.been.calledWith({\n  status: \"fail\",\n  errorMessage: \"Try Unfollowing yourself\",\n});",
                  "err": {},
                  "uuid": "baa63cd3-b5cd-4a3f-a9f4-5ba6b521b281",
                  "parentUUID": "3c158359-6a03-4ca4-8a61-ac5de504707b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "95fdd52c-4714-4661-9cad-2d26aff99633",
                "db98039c-e88a-43a7-8639-656753c4518e",
                "81e43661-8a21-4e90-b45a-70373ef8af12",
                "d5e02b1d-cab2-4074-a206-ce6f1bfed78f",
                "baa63cd3-b5cd-4a3f-a9f4-5ba6b521b281"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "6cc98f05-97ef-40d4-bdd4-d47bf9205a03",
              "title": "blockedUsers Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\userController.js",
              "file": "\\test\\controllers\\userController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "User Controller Test blockedUsers Test first test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"2\",\n    test: true,\n  },\n};\nconst UserService = {\n  getBlockedUsers: async (data) => {\n    let response = [];\n    return response;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.blockedUsers(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  blocked: [],\n});",
                  "err": {},
                  "uuid": "25f784d7-03af-44ad-932f-4bc9233719c2",
                  "parentUUID": "6cc98f05-97ef-40d4-bdd4-d47bf9205a03",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "25f784d7-03af-44ad-932f-4bc9233719c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "abcfd77d-27fd-4d8f-ae3b-5f2f454e306b",
              "title": "myFollowers Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\controllers\\userController.js",
              "file": "\\test\\controllers\\userController.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test success",
                  "fullTitle": "User Controller Test myFollowers Test first test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const req = {\n  user: {\n    userName: \"2\",\n    test: true,\n  },\n};\nconst UserService = {\n  getFollowers: async (data) => {\n    let response = [];\n    return response;\n  },\n};\nconst userController = new UserController({ UserService });\nawait userController.myFollowers(req, res, \"\");\nexpect(res.status).to.have.been.calledWith(200);\nexpect(res.status(200).json).to.have.been.calledWith({\n  status: \"success\",\n  followers: [],\n});",
                  "err": {},
                  "uuid": "e15f03fb-2f58-44fe-b9cb-ae702af0547d",
                  "parentUUID": "abcfd77d-27fd-4d8f-ae3b-5f2f454e306b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e15f03fb-2f58-44fe-b9cb-ae702af0547d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "6cc16f0a-0bad-413c-a9eb-d70270d29f09",
          "title": "Comment service test",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\commentService.js",
          "file": "\\test\\services\\commentService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0251855a-3b87-443b-9b90-52b72d5ba821",
              "title": "create comment",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\commentService.js",
              "file": "\\test\\services\\commentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "successful comment create",
                  "fullTitle": "Comment service test create comment successful comment create",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "comment = {\n  parent: \"636f647c888b41426fc6abdd\",\n  parentType: \"Comment\",\n  text: \"comment text\",\n};\nconst { success, data } = await commentServices.createComment(comment);\nexpect(success).to.equal(true);\ncomment.post = \"456c5fccf267fc3a463b35e4\";\nexpect(data).to.eql(comment);",
                  "err": {},
                  "uuid": "5dd24807-b8e3-49ba-a1e3-9a199ccf28ed",
                  "parentUUID": "0251855a-3b87-443b-9b90-52b72d5ba821",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "error in data access layer",
                  "fullTitle": "Comment service test create comment error in data access layer",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "CommentRepository.createOne = async (id, fields) => {\n  return { success: false };\n};\ncomment = {\n  parent: \"636f647c888b41426fc6abdd\",\n  parentType: \"Comment\",\n  text: \"comment text\",\n};\nconst { success, error } = await commentServices.createComment(comment);\nexpect(success).to.equal(false);\nexpect(error).to.equal(commentErrors.MONGO_ERR);",
                  "err": {},
                  "uuid": "1f7da8cb-05bc-4e98-8d6f-993f707d3c39",
                  "parentUUID": "0251855a-3b87-443b-9b90-52b72d5ba821",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid parent",
                  "fullTitle": "Comment service test create comment Invalid parent",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "CommentRepository.findById = async (id, fields) => {\n  return { success: false };\n};\ncomment = {\n  parent: \"636f647c888b41426fc6abdd\",\n  parentType: \"Comment\",\n  text: \"comment text\",\n};\nconst { success, error } = await commentServices.createComment(comment);\nexpect(success).to.equal(false);\nexpect(error).to.equal(commentErrors.INVALID_PARENT);",
                  "err": {},
                  "uuid": "81268c18-674d-47d0-b5bc-11e344b0653d",
                  "parentUUID": "0251855a-3b87-443b-9b90-52b72d5ba821",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5dd24807-b8e3-49ba-a1e3-9a199ccf28ed",
                "1f7da8cb-05bc-4e98-8d6f-993f707d3c39",
                "81268c18-674d-47d0-b5bc-11e344b0653d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "7f4508c7-5b87-40bd-adbb-3f06ac56144f",
              "title": "Testing update comment",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\commentService.js",
              "file": "\\test\\services\\commentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "successful comment update",
                  "fullTitle": "Comment service test Testing update comment successful comment update",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { success, data: updatedData } =\n  await commentServices.updateComment(id, data, userId);\nexpect(success).to.equal(true);\nexpect(updatedData.text).to.equal(\"updated comment text\");",
                  "err": {},
                  "uuid": "59e668a4-4d2f-439d-8050-ace9b95ed062",
                  "parentUUID": "7f4508c7-5b87-40bd-adbb-3f06ac56144f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "unathorized user",
                  "fullTitle": "Comment service test Testing update comment unathorized user",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userId = \"578a5fccf267fc3a463b35e\";\nconst { success, error } = await commentServices.updateComment(\n  id,\n  data,\n  userId\n);\nexpect(success).to.equal(false);\nexpect(error).to.equal(commentErrors.NOT_AUTHOR);",
                  "err": {},
                  "uuid": "0d4c8844-ceba-415d-8720-8910617850d3",
                  "parentUUID": "7f4508c7-5b87-40bd-adbb-3f06ac56144f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "comment not found",
                  "fullTitle": "Comment service test Testing update comment comment not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "CommentRepository.findById = async (id, fields) => {\n  return { success: false };\n};\nconst { success, error } = await commentServices.updateComment(\n  id,\n  data,\n  userId\n);\nexpect(success).to.equal(false);\nexpect(error).to.equal(commentErrors.COMMENT_NOT_FOUND);",
                  "err": {},
                  "uuid": "0a774420-03ad-496d-bb0a-4ce30f53d72d",
                  "parentUUID": "7f4508c7-5b87-40bd-adbb-3f06ac56144f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "59e668a4-4d2f-439d-8050-ace9b95ed062",
                "0d4c8844-ceba-415d-8720-8910617850d3",
                "0a774420-03ad-496d-bb0a-4ce30f53d72d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "f7bbadf8-0799-4eb9-b5d8-0e49c9fa1dc5",
              "title": "Testing delete comment",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\commentService.js",
              "file": "\\test\\services\\commentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "successful comment delete(parent is comment)",
                  "fullTitle": "Comment service test Testing delete comment successful comment delete(parent is comment)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { success } = await commentServices.deleteComment(id, userId);\nexpect(success).to.equal(true);",
                  "err": {},
                  "uuid": "cffee553-bfa6-4e09-93f4-8345bff702d8",
                  "parentUUID": "f7bbadf8-0799-4eb9-b5d8-0e49c9fa1dc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "successful comment delete(parent is post)",
                  "fullTitle": "Comment service test Testing delete comment successful comment delete(parent is post)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { success } = await commentServices.deleteComment(id, userId);\nexpect(success).to.equal(true);",
                  "err": {},
                  "uuid": "5d52b9a1-75c1-4476-8c77-ac0f2a546540",
                  "parentUUID": "f7bbadf8-0799-4eb9-b5d8-0e49c9fa1dc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "unathorized user",
                  "fullTitle": "Comment service test Testing delete comment unathorized user",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userId = \"578a5fccf267fc3a463b35e8\";\nconst { success, error } = await commentServices.deleteComment(\n  id,\n  userId\n);\nexpect(success).to.equal(false);\nexpect(error).to.equal(commentErrors.NOT_AUTHOR);",
                  "err": {},
                  "uuid": "8a2f4390-3609-4cb1-98e6-b7f4544a427c",
                  "parentUUID": "f7bbadf8-0799-4eb9-b5d8-0e49c9fa1dc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "comment not found",
                  "fullTitle": "Comment service test Testing delete comment comment not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "CommentRepository.exists = async (id, fields) => {\n  return { success: false };\n};\nconst { success, error } = await commentServices.deleteComment(\n  id,\n  userId\n);\nexpect(success).to.equal(false);\nexpect(error).to.equal(commentErrors.COMMENT_NOT_FOUND);",
                  "err": {},
                  "uuid": "d19278fb-a565-41b5-8b0d-47d08c4e885e",
                  "parentUUID": "f7bbadf8-0799-4eb9-b5d8-0e49c9fa1dc5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cffee553-bfa6-4e09-93f4-8345bff702d8",
                "5d52b9a1-75c1-4476-8c77-ac0f2a546540",
                "8a2f4390-3609-4cb1-98e6-b7f4544a427c",
                "d19278fb-a565-41b5-8b0d-47d08c4e885e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "cf6ffaf0-27bb-4d53-acd0-fe13476ca4b9",
              "title": "Testing hasValidParent function",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\commentService.js",
              "file": "\\test\\services\\commentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valid parent(Comment)",
                  "fullTitle": "Comment service test Testing hasValidParent function valid parent(Comment)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const comment = {\n  parent: \"636f647c888b41426fc6abdd\",\n  parentType: \"Comment\",\n  text: \"comment text\",\n};\nconst valid = await commentServices.hasValidParent(comment);\nexpect(valid.success).to.equal(true);\n//expect(comment.post).to.equal(\"456c5fccf267fc3a463b35e4\");",
                  "err": {},
                  "uuid": "55aaf888-037e-4aa8-985d-e6861a3c2b3d",
                  "parentUUID": "cf6ffaf0-27bb-4d53-acd0-fe13476ca4b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "valid parent(post)",
                  "fullTitle": "Comment service test Testing hasValidParent function valid parent(post)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const comment = {\n  parent: \"636f647c888b41426fc6abdd\",\n  parentType: \"Post\",\n  text: \"comment text\",\n};\nconst valid = await commentServices.hasValidParent(comment);\nexpect(valid.success).to.equal(true);\n//expect(comment.post).to.equal(\"123p5fccf267fc3a463b35e4\");",
                  "err": {},
                  "uuid": "86ce448d-c937-48b6-9ea9-85893afd8064",
                  "parentUUID": "cf6ffaf0-27bb-4d53-acd0-fe13476ca4b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid parent(Comment)",
                  "fullTitle": "Comment service test Testing hasValidParent function invalid parent(Comment)",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const comment = {\n  parent: \"636f647c888b41426fc6abdd\",\n  parentType: \"Comment\",\n  text: \"comment text\",\n};\nCommentRepository.findById = async (id, fields) => {\n  return { success: false };\n};\nconst valid = await commentServices.hasValidParent(comment);\nexpect(valid.success).to.equal(false);",
                  "err": {},
                  "uuid": "49a814f0-b5d2-4750-a491-377958ceed6c",
                  "parentUUID": "cf6ffaf0-27bb-4d53-acd0-fe13476ca4b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid parent(Post)",
                  "fullTitle": "Comment service test Testing hasValidParent function invalid parent(Post)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const comment = {\n  parent: \"636f647c888b41426fc6abdd\",\n  parentType: \"Post\",\n  text: \"comment text\",\n};\nPostRepository.findById = async (id, fields) => {\n  return { success: false };\n};\nconst valid = await commentServices.hasValidParent(comment);\nexpect(valid.success).to.equal(false);",
                  "err": {},
                  "uuid": "3288139c-5ab0-4366-bacb-866ad1a4244b",
                  "parentUUID": "cf6ffaf0-27bb-4d53-acd0-fe13476ca4b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "55aaf888-037e-4aa8-985d-e6861a3c2b3d",
                "86ce448d-c937-48b6-9ea9-85893afd8064",
                "49a814f0-b5d2-4750-a491-377958ceed6c",
                "3288139c-5ab0-4366-bacb-866ad1a4244b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "7107368f-bda6-4a20-b718-bcbe07b344d9",
              "title": "get users comments",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\commentService.js",
              "file": "\\test\\services\\commentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test ",
                  "fullTitle": "Comment service test get users comments first test ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const CommentRepository = {\n  getUserComments: async () => {\n    return {\n      doc: [\n        {\n          _id: \"1\",\n          mentions: [],\n          parent: \"1\",\n          parentType: \"Post\",\n          text: \"1\",\n          votes: \"1\",\n          repliesCount: 0,\n          createdAt: \"\",\n          isDeleted: \"1\",\n          sortOnHot: 5,\n          author: {\n            _id: \"1\",\n            userName: \"ahmed\",\n          },\n          post: {\n            _id: \"1\",\n            author: {\n              _id: \"1\",\n              userName: \"ahmed\",\n            },\n            ownerType: \"User\",\n            owner: {\n              _id: \"1\",\n              userName: \"ahmed\",\n              profilePicture: \"users/default.png\",\n            },\n          },\n        },\n        {\n          _id: \"2\",\n          mentions: [],\n          parent: \"1\",\n          parentType: \"Post\",\n          text: \"1\",\n          votes: \"1\",\n          repliesCount: 0,\n          createdAt: \"\",\n          isDeleted: \"1\",\n          sortOnHot: 5,\n          author: {\n            _id: \"1\",\n            userName: \"ahmed\",\n          },\n          post: {\n            _id: \"1\",\n            author: {\n              _id: \"1\",\n              userName: \"ahmed\",\n            },\n            ownerType: \"User\",\n            owner: {\n              _id: \"1\",\n              userName: \"ahmed\",\n              profilePicture: \"users/default.png\",\n            },\n          },\n        },\n        {\n          _id: \"3\",\n          mentions: [],\n          parent: \"1\",\n          parentType: \"Post\",\n          text: \"1\",\n          votes: \"1\",\n          repliesCount: 0,\n          createdAt: \"\",\n          isDeleted: \"1\",\n          sortOnHot: 5,\n          author: {\n            _id: \"1\",\n            userName: \"ahmed\",\n          },\n          post: {\n            _id: \"1\",\n            author: {\n              _id: \"1\",\n              userName: \"ahmed\",\n            },\n            ownerType: \"User\",\n            owner: {\n              _id: \"1\",\n              userName: \"ahmed\",\n              profilePicture: \"users/default.png\",\n            },\n          },\n        },\n      ],\n    };\n  },\n};\nconst user = {\n  voteComment: [\n    { comments: \"1\", commentVoteStatus: \"1\" },\n    { comments: \"2\", commentVoteStatus: \"-1\" },\n  ],\n  savedComments: [\n    {\n      savedComment: \"1\",\n    },\n    {\n      savedComment: \"3\",\n    },\n  ],\n};\nconst PostRepository = {};\nconst commentServices = new CommentService({\n  CommentRepository,\n  PostRepository,\n});\nconst comments = await commentServices.getUserComments(\"1\", user, \"\");\nexpect(comments.length).to.equal(1);",
                  "err": {},
                  "uuid": "fbe7ef32-8828-4683-8aca-a1924b6e7d4b",
                  "parentUUID": "7107368f-bda6-4a20-b718-bcbe07b344d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test ",
                  "fullTitle": "Comment service test get users comments second test ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const CommentRepository = {\n  getUserComments: async () => {\n    return {\n      doc: [\n        {\n          _id: \"1\",\n          mentions: [],\n          parent: \"1\",\n          parentType: \"Post\",\n          text: \"1\",\n          votes: \"1\",\n          repliesCount: 0,\n          createdAt: \"\",\n          isDeleted: \"1\",\n          sortOnHot: 5,\n          author: {\n            _id: \"1\",\n            userName: \"ahmed\",\n          },\n          post: {\n            _id: \"1\",\n            author: {\n              _id: \"1\",\n              userName: \"ahmed\",\n            },\n            ownerType: \"User\",\n            owner: {\n              _id: \"1\",\n              userName: \"ahmed\",\n              profilePicture: \"users/default.png\",\n            },\n          },\n        },\n        {\n          _id: \"2\",\n          mentions: [],\n          parent: \"1\",\n          parentType: \"Post\",\n          text: \"1\",\n          votes: \"1\",\n          repliesCount: 0,\n          createdAt: \"\",\n          isDeleted: \"1\",\n          sortOnHot: 5,\n          author: {\n            _id: \"1\",\n            userName: \"ahmed\",\n          },\n          post: {\n            _id: \"2\",\n            author: {\n              _id: \"1\",\n              userName: \"ahmed\",\n            },\n            ownerType: \"User\",\n            owner: {\n              _id: \"1\",\n              userName: \"ahmed\",\n              profilePicture: \"users/default.png\",\n            },\n          },\n        },\n        {\n          _id: \"3\",\n          mentions: [],\n          parent: \"1\",\n          parentType: \"Post\",\n          text: \"1\",\n          votes: \"1\",\n          repliesCount: 0,\n          createdAt: \"\",\n          isDeleted: \"1\",\n          sortOnHot: 5,\n          author: {\n            _id: \"1\",\n            userName: \"ahmed\",\n          },\n          post: {\n            _id: \"1\",\n            author: {\n              _id: \"1\",\n              userName: \"ahmed\",\n            },\n            ownerType: \"Subreddit\",\n            owner: {\n              _id: \"1\",\n              fixedName: \"ahmed\",\n              icon: \"users/default.png\",\n            },\n          },\n        },\n      ],\n    };\n  },\n};\nconst user = {\n  voteComment: [\n    { comments: \"1\", commentVoteStatus: \"1\" },\n    { comments: \"2\", commentVoteStatus: \"-1\" },\n  ],\n  savedComments: [\n    {\n      savedComment: \"1\",\n    },\n    {\n      savedComment: \"3\",\n    },\n  ],\n};\nconst PostRepository = {};\nconst commentServices = new CommentService({\n  CommentRepository,\n  PostRepository,\n});\nconst comments = await commentServices.getUserComments(\"1\", user, \"\");\nexpect(comments.length).to.equal(3);",
                  "err": {},
                  "uuid": "91a73b16-424d-46af-9f28-896eddcc4458",
                  "parentUUID": "7107368f-bda6-4a20-b718-bcbe07b344d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fbe7ef32-8828-4683-8aca-a1924b6e7d4b",
                "91a73b16-424d-46af-9f28-896eddcc4458"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "873fd5b9-7213-406b-ac9a-a81ae55f10a6",
              "title": "addVote function ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\commentService.js",
              "file": "\\test\\services\\commentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test ",
                  "fullTitle": "Comment service test addVote function  first test ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let user = {\n  voteComment: [\n    {\n      comments: \"1\",\n      commentVoteStatus: 1,\n    },\n    {\n      comments: \"2\",\n      commentVoteStatus: -1,\n    },\n    {\n      comments: \"4\",\n      commentVoteStatus: -1,\n    },\n  ],\n  save: async () => {},\n};\nlet author = {\n  commentKarma: 0,\n  save: async () => {},\n};\nconst CommentRepository = {\n  updateVotesCount: async (data) => {\n    return { success: true };\n  },\n};\nconst CommentServices = new CommentService({ CommentRepository });\nconst result = await CommentServices.addVote(user, \"2\", 1, 0, author);\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "dd79a43a-857a-4a09-b0f8-fdb7369824bb",
                  "parentUUID": "873fd5b9-7213-406b-ac9a-a81ae55f10a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test",
                  "fullTitle": "Comment service test addVote function  second test",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let user = {\n  voteComment: [\n    {\n      comments: \"1\",\n      commentVoteStatus: 1,\n    },\n    {\n      comments: \"2\",\n      commentVoteStatus: -1,\n    },\n    {\n      comments: \"4\",\n      commentVoteStatus: -1,\n    },\n  ],\n  save: async () => {},\n};\nlet author = {\n  commentKarma: 0,\n  save: async () => {},\n};\nconst CommentRepository = {\n  updateVotesCount: async (data) => {\n    return { success: true };\n  },\n};\nconst CommentServices = new CommentService({ CommentRepository });\nconst result = await CommentServices.addVote(user, \"5\", 1, 0, author);\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "14634083-c9d2-49a6-ac02-856278b6ebc9",
                  "parentUUID": "873fd5b9-7213-406b-ac9a-a81ae55f10a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test ",
                  "fullTitle": "Comment service test addVote function  thrid test ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let user = {\n  voteComment: [\n    {\n      comments: \"1\",\n      commentVoteStatus: 1,\n    },\n    {\n      comments: \"2\",\n      commentVoteStatus: -1,\n    },\n    {\n      comments: \"4\",\n      commentVoteStatus: -1,\n    },\n  ],\n  save: async () => {},\n};\nlet author = {\n  commentKarma: 0,\n  save: async () => {},\n};\nconst CommentRepository = {\n  updateVotesCount: async (data) => {\n    return { success: true };\n  },\n};\nconst CommentServices = new CommentService({ CommentRepository });\nconst result = await CommentServices.addVote(user, \"2\", -1, 0, author);\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "cb0666bd-4eae-430d-8405-3b9a7ee72fe5",
                  "parentUUID": "873fd5b9-7213-406b-ac9a-a81ae55f10a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test ",
                  "fullTitle": "Comment service test addVote function  fourth test ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let user = {\n  voteComment: [\n    {\n      comments: \"1\",\n      commentVoteStatus: 1,\n    },\n    {\n      comments: \"2\",\n      commentVoteStatus: -1,\n    },\n    {\n      comments: \"4\",\n      commentVoteStatus: -1,\n    },\n  ],\n  save: async () => {},\n};\nlet author = {\n  commentKarma: 0,\n  save: async () => {},\n};\nconst CommentRepository = {\n  updateVotesCount: async (data) => {\n    return { success: true };\n  },\n};\nconst CommentServices = new CommentService({ CommentRepository });\nconst result = await CommentServices.addVote(user, \"1\", 0, 0, author);\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "6fa552d6-a6c7-406f-8b51-8d5a00d0631b",
                  "parentUUID": "873fd5b9-7213-406b-ac9a-a81ae55f10a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fifth test ",
                  "fullTitle": "Comment service test addVote function  fifth test ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let user = {\n  voteComment: [\n    {\n      comments: \"1\",\n      commentVoteStatus: 1,\n    },\n    {\n      comments: \"2\",\n      commentVoteStatus: 0,\n    },\n    {\n      comments: \"4\",\n      commentVoteStatus: -1,\n    },\n  ],\n  save: async () => {},\n};\nlet author = {\n  commentKarma: 0,\n  save: async () => {},\n};\nconst CommentRepository = {\n  updateVotesCount: async (data) => {\n    return { success: true };\n  },\n};\nconst CommentServices = new CommentService({ CommentRepository });\nconst result = await CommentServices.addVote(user, \"2\", 1, 0, author);\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "3e3126bb-863f-413f-b949-921d919e0097",
                  "parentUUID": "873fd5b9-7213-406b-ac9a-a81ae55f10a6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dd79a43a-857a-4a09-b0f8-fdb7369824bb",
                "14634083-c9d2-49a6-ac02-856278b6ebc9",
                "cb0666bd-4eae-430d-8405-3b9a7ee72fe5",
                "6fa552d6-a6c7-406f-8b51-8d5a00d0631b",
                "3e3126bb-863f-413f-b949-921d919e0097"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "245a556f-b48b-4be0-a022-9963d6a3b097",
              "title": "saveComment function ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\commentService.js",
              "file": "\\test\\services\\commentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test ",
                  "fullTitle": "Comment service test saveComment function  first test ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let user = {\n  savedComments: [\n    {\n      savedComment: \"1\",\n    },\n    {\n      savedComment: \"2\",\n    },\n    {\n      savedComment: \"4\",\n    },\n  ],\n  save: async () => {},\n};\nconst CommentServices = new CommentService({});\nconst result = await CommentServices.saveComment(user, \"1\");\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "47828fec-959e-486d-be23-c6da24d9c65f",
                  "parentUUID": "245a556f-b48b-4be0-a022-9963d6a3b097",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test ",
                  "fullTitle": "Comment service test saveComment function  second test ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let user = {\n  savedComments: [\n    {\n      savedComment: \"1\",\n    },\n    {\n      savedComment: \"2\",\n    },\n    {\n      savedComment: \"4\",\n    },\n  ],\n  save: async () => {},\n};\nconst CommentServices = new CommentService({});\nconst result = await CommentServices.saveComment(user, \"3\");\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "7a192697-7628-4aaf-81fe-73d6a288de17",
                  "parentUUID": "245a556f-b48b-4be0-a022-9963d6a3b097",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "47828fec-959e-486d-be23-c6da24d9c65f",
                "7a192697-7628-4aaf-81fe-73d6a288de17"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "11a7d206-113d-4403-acbe-fc24965c86f3",
              "title": "unSaveComment function ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\commentService.js",
              "file": "\\test\\services\\commentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test ",
                  "fullTitle": "Comment service test unSaveComment function  first test ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Array.prototype.pull = function (elem) {\n  var i = this.indexOf(elem);\n  if (i === -1)\n    //w  w w  . j a  v a  2s .  c  o  m\n    return;\n  return this.splice(i, 1);\n};\nlet user = {\n  savedComments: [\n    {\n      savedComment: \"1\",\n    },\n    {\n      savedComment: \"2\",\n    },\n    {\n      savedComment: \"4\",\n    },\n  ],\n  save: async () => {},\n};\nconst CommentServices = new CommentService({});\nconst result = await CommentServices.unSaveComment(user, \"1\");\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "a7062a5c-e9ae-4589-b414-3e3a7ea0a1e2",
                  "parentUUID": "11a7d206-113d-4403-acbe-fc24965c86f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test ",
                  "fullTitle": "Comment service test unSaveComment function  second test ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let user = {\n  savedComments: [\n    {\n      savedComment: \"1\",\n    },\n    {\n      savedComment: \"2\",\n    },\n    {\n      savedComment: \"4\",\n    },\n  ],\n  save: async () => {},\n};\nconst CommentServices = new CommentService({});\nconst result = await CommentServices.unSaveComment(user, \"3\");\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "3d970235-da14-4987-b879-1b13388c938b",
                  "parentUUID": "11a7d206-113d-4403-acbe-fc24965c86f3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a7062a5c-e9ae-4589-b414-3e3a7ea0a1e2",
                "3d970235-da14-4987-b879-1b13388c938b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "ea1eba70-eac6-4d76-9f80-7b6fe0aac55e",
              "title": "findCommentById function ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\commentService.js",
              "file": "\\test\\services\\commentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test ",
                  "fullTitle": "Comment service test findCommentById function  first test ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const CommentRepository = {\n  getCommentwithAuthor: async (data) => {\n    return { success: true, doc: [] };\n  },\n};\nconst CommentServices = new CommentService({ CommentRepository });\nconst result = await CommentServices.findCommentById(\"1\");\nexpect(result.success).to.equal(true);",
                  "err": {},
                  "uuid": "f85f0ed6-d314-4256-80ca-ed290af1f51a",
                  "parentUUID": "ea1eba70-eac6-4d76-9f80-7b6fe0aac55e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test ",
                  "fullTitle": "Comment service test findCommentById function  second test ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const CommentRepository = {\n  getCommentwithAuthor: async (data) => {\n    return { success: false, doc: [] };\n  },\n};\nconst CommentServices = new CommentService({ CommentRepository });\nconst result = await CommentServices.findCommentById(\"1\");\nexpect(result.success).to.equal(false);",
                  "err": {},
                  "uuid": "ac06bd9d-dae6-4319-9250-b5c9efa7e2b6",
                  "parentUUID": "ea1eba70-eac6-4d76-9f80-7b6fe0aac55e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f85f0ed6-d314-4256-80ca-ed290af1f51a",
                "ac06bd9d-dae6-4319-9250-b5c9efa7e2b6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "847866f0-8d8e-46fc-b9aa-37c7b88d3bcc",
              "title": "setVoteStatus function ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\commentService.js",
              "file": "\\test\\services\\commentService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test ",
                  "fullTitle": "Comment service test setVoteStatus function  first test ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let saved = [\n  {\n    savedComment: {\n      _id: \"1\",\n      post:{\n        _id:\"1\",\n        title:\"\",\n        author:{\n          _id:\"1\",\n          userName:\"ahmed\",\n          profilePicture:\"icon.png\"\n        },\n        ownerType:\"User\",\n        owner:{\n          _id:\"1\",\n          userName:\"ahmed\",\n          profilePicture:\"icon.png\"\n        },\n        text:\"\",\n        nsfw:\"\",\n        flairId:\"\",\n      },\n      commentVoteStatus: 1,\n      owner: {\n        _id: \"1\",\n        userName: \"ahmed\",\n        profilePicture: \"users/default.png\",\n      },\n      ownerType: \"User\",\n      author: {\n        _id: \"1\",\n        userName: \"ahmed\",\n      },\n    },\n  },\n  {\n    savedComment: {\n      _id: \"2\",\n      commentVoteStatus: 1,\n      owner: {\n        _id: \"1\",\n        fixedName: \"ahmed\",\n        icon: \"subreddits/default.png\",\n      },\n      ownerType: \"Subreddit\",\n      author: {\n        _id: \"1\",\n        userName: \"ahmed\",\n      },\n      post:{\n        _id:\"1\",\n        title:\"\",\n        author:{\n          _id:\"1\",\n          userName:\"ahmed\",\n          profilePicture:\"icon.png\"\n        },\n        ownerType:\"Subreddit\",\n        owner:{\n          _id:\"1\",\n          fixedName:\"ahmed\",\n          icon:\"icon.png\"\n        },\n        text:\"\",\n        nsfw:\"\",\n        flairId:\"\",\n      },\n    },\n  },\n  {\n    savedComment: {\n      _id: \"3\",\n      commentVoteStatus: 1,\n      owner: {\n        _id: \"1\",\n        fixedName: \"ahmed\",\n        icon: \"subreddits/default.png\",\n      },\n      ownerType: \"Subreddit\",\n      author: {\n        _id: \"1\",\n        userName: \"ahmed\",\n      },\n      post:{\n        _id:\"2\",\n        title:\"\",\n        author:{\n          _id:\"1\",\n          userName:\"ahmed\",\n          profilePicture:\"icon.png\"\n        },\n        ownerType:\"Subreddit\",\n        owner:{\n          _id:\"1\",\n          fixedName:\"ahmed\",\n          icon:\"icon.png\"\n        },\n        text:\"\",\n        nsfw:\"\",\n        flairId:\"\",\n      },\n    },\n  },\n];\nlet user = {\n  voteComment: [\n    {\n      comments: \"1\",\n      commentVoteStatus: 1,\n    },\n    {\n      comments: \"2\",\n      commentVoteStatus: -1,\n    },\n    {\n      comments: \"4\",\n      commentVoteStatus: -1,\n    },\n  ],\n};\nconst result = CommentServices.setVoteStatus(user, saved);\nexpect(result.length).to.equal(2);",
                  "err": {},
                  "uuid": "01058a40-d23a-4225-9708-a4c24d62d88c",
                  "parentUUID": "847866f0-8d8e-46fc-b9aa-37c7b88d3bcc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01058a40-d23a-4225-9708-a4c24d62d88c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "72e6d321-d9a6-4a2f-a063-e555e81ef660",
          "title": "get subreddit flair",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\flairService.js",
          "file": "\\test\\services\\flairService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1) test success",
              "fullTitle": "get subreddit flair 1) test success",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const SubredditRepository = {\n  getSubredditFlairs: async(subredditName) => {\n    const response = {\n      success: true,\n      doc: \n        [{\n        _id:mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n        text: \"first flair\",\n        __v: 0\n      }]\n      \n      \n    };\n    \n    return response;\n  },\n};\nconst on = {};\nconst subredditServiceObj = new SubredditService({  SubredditRepository,on, on});\nconst subredditName = \" \";\nconst flairId= mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\");\nconst result = await subredditServiceObj.getFlair(subredditName,flairId);\nexpect(result.success).to.equal(true);\nexpect(result.data.text).to.equal( \"first flair\");",
              "err": {},
              "uuid": "caa67312-9f4e-4a62-93a3-9f1d63d4fecb",
              "parentUUID": "72e6d321-d9a6-4a2f-a063-e555e81ef660",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2) test subreddit not found",
              "fullTitle": "get subreddit flair 2) test subreddit not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const SubredditRepository = {\n  getSubredditFlairs: async(subredditName) => {\n    const response = {\n       success: false, error: mongoErrors.NOT_FOUND\n    };\n    \n    return response;\n  },\n};\nconst on = {};\nconst subredditServiceObj = new SubredditService({  SubredditRepository,on, on});\n const subredditName = \" \";\n const flairId=\"\"\nconst result = await subredditServiceObj.getFlair(subredditName,flairId);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal( subredditErrors.SUBREDDIT_NOT_FOUND);",
              "err": {},
              "uuid": "9b25641f-4557-4a8a-b2f3-c51983267eae",
              "parentUUID": "72e6d321-d9a6-4a2f-a063-e555e81ef660",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3) test flair not found",
              "fullTitle": "get subreddit flair 3) test flair not found",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const SubredditRepository = {\n  getSubredditFlairs: async(subredditName) => {\n    const response = {\n      success: true,\n      doc: \n        [{\n        _id:mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n        text: \"first flair\",\n        __v: 0\n      }]\n      \n      \n    };\n    \n    return response;\n  },\n};\nconst on = {};\nconst subredditServiceObj = new SubredditService({  SubredditRepository,on, on});\nconst subredditName = \" \";\nconst flairId= mongoose.Types.ObjectId(\"636e901bbc48533bd1113880\");\nconst result = await subredditServiceObj.getFlair(subredditName,flairId);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal( subredditErrors.FLAIR_NOT_FOUND);",
              "err": {},
              "uuid": "0b493c20-97ac-4164-9a77-ed348e68f0d0",
              "parentUUID": "72e6d321-d9a6-4a2f-a063-e555e81ef660",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "caa67312-9f4e-4a62-93a3-9f1d63d4fecb",
            "9b25641f-4557-4a8a-b2f3-c51983267eae",
            "0b493c20-97ac-4164-9a77-ed348e68f0d0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "cff5b6e5-77ba-4e68-b4ec-aeed4af15d66",
          "title": "update subreddit flairs",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\flairService.js",
          "file": "\\test\\services\\flairService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1) test success",
              "fullTitle": "update subreddit flairs 1) test success",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const FlairRepository = {\n  updateFlair: async(userData,data) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"636e901bbc485bd111dd3880\",\n        text: \"first flair\",\n        __v: 0\n      }\n    };\n    \n    return response;\n  },\n};\nconst on = {};\nlet subredditServiceObj = new SubredditService({ on, FlairRepository, on});\nconst subredditName = \" \";\nsubredditServiceObj.checkSubreddit = async (subredditName) => {\n  const resp = {\n    success: true,\n    doc: {\n      _id: \"12345\",\n      fixedName: \"Nonlegit\",\n      moderators: [{\n        id: \"12345\"\n      }]\n    }\n  };\n  return resp;\n};\nsubredditServiceObj.checkModerator = (subreddit,userID) => {\n  const resp = {\n    success: true,\n    doc: {\n      _id: \"12345\",\n      fixedName: \"Nonlegit\",\n      moderators: [{\n        id: \"12345\"\n      }]\n    }\n  };\n  return resp;\n};\nsubredditServiceObj.checkFlair=(subreddit,flairID) => {\n  const resp = {\n    success: true,\n    doc: {\n      _id: \"12345\",\n      fixedName: \"Nonlegit\",\n      moderators: [{\n        id: \"12345\"\n      }]\n    }\n  };\n  \n  return resp;\n};\nconst result = await subredditServiceObj.updateFlair(subredditName);\nexpect(result.success).to.equal(true);\nexpect(result.data.text).to.equal( \"first flair\");",
              "err": {},
              "uuid": "f633380a-2751-4f55-9eae-0a4b97afb088",
              "parentUUID": "cff5b6e5-77ba-4e68-b4ec-aeed4af15d66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2) test subreddit not found ",
              "fullTitle": "update subreddit flairs 2) test subreddit not found ",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const FlairRepository = {\n  updateFlair: async(userData,data) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"636e901bbc485bd111dd3880\",\n        text: \"first flair\",\n        __v: 0\n      }\n    };\n    \n    return response;\n  },\n};\nconst on = {};\nlet subredditServiceObj = new SubredditService({ on, FlairRepository, on});\nconst subredditName = \" \";\nsubredditServiceObj.checkSubreddit = async (subredditName) => {\n  const resp = {\n    success: false,\n    error:subredditErrors.SUBREDDIT_NOT_FOUND\n  };\n  return resp;\n};\nsubredditServiceObj.checkModerator = (subreddit,userID) => {\n  const resp = {\n    success: true,\n    doc: {\n      _id: \"12345\",\n      fixedName: \"Nonlegit\",\n      moderators: [{\n        id: \"12345\"\n      }]\n    }\n  };\n  return resp;\n};\nsubredditServiceObj.checkFlair=(subreddit,flairID) => {\n  const resp = {\n    success: true,\n    doc: {\n      _id: \"12345\",\n      fixedName: \"Nonlegit\",\n      moderators: [{\n        id: \"12345\"\n      }]\n    }\n  };\n  \n  return resp;\n};\nconst result = await subredditServiceObj.updateFlair(subredditName);\nexpect(result.success).to.equal(false);",
              "err": {},
              "uuid": "a087a339-0311-44fb-9f49-816ce12f54fc",
              "parentUUID": "cff5b6e5-77ba-4e68-b4ec-aeed4af15d66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3) test not moderator",
              "fullTitle": "update subreddit flairs 3) test not moderator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const FlairRepository = {\n  updateFlair: async(userData,data) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"636e901bbc485bd111dd3880\",\n        text: \"first flair\",\n        __v: 0\n      }\n    };\n    \n    return response;\n  },\n};\n    \n    \nconst on = {};\nlet subredditServiceObj = new SubredditService({ on, FlairRepository, on});\nconst subredditName = \" \";\nsubredditServiceObj.checkSubreddit = async (subredditName) => {\n  const resp = {\n    success: true,\n     doc: {\n        _id: \"636e901bbc485bd111dd3880\",\n        text: \"first flair\",\n        __v: 0\n      }\n  };\n  return resp;\n};\nsubredditServiceObj.checkModerator = (subreddit,userID) => {\n  const resp = {\n     success: false, error: subredditErrors.NOT_MODERATOR\n  };\n  return resp;\n};\nsubredditServiceObj.checkFlair=(subreddit,flairID) => {\n  const resp = {\n    success: true,\n    doc: {\n      _id: \"12345\",\n      fixedName: \"Nonlegit\",\n      moderators: [{\n        id: \"12345\"\n      }]\n    }\n  };\n  \n  return resp;\n};\nconst result = await subredditServiceObj.updateFlair(subredditName);\nexpect(result.success).to.equal(false);",
              "err": {},
              "uuid": "cc6e559d-749d-441e-8fd3-7ef2cddcfc4e",
              "parentUUID": "cff5b6e5-77ba-4e68-b4ec-aeed4af15d66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "4) test not subreddit flair",
              "fullTitle": "update subreddit flairs 4) test not subreddit flair",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const FlairRepository = {\n  updateFlair: async(userData,data) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"636e901bbc485bd111dd3880\",\n        text: \"first flair\",\n        __v: 0\n      }\n    };\n    \n    return response;\n  },\n};\n    \n    \nconst on = {};\nlet subredditServiceObj = new SubredditService({ on, FlairRepository, on});\nconst subredditName = \" \";\nsubredditServiceObj.checkSubreddit = async (subredditName) => {\n  const resp = {\n    success: true,\n     doc: {\n        _id: \"636e901bbc485bd111dd3880\",\n        text: \"first flair\",\n        __v: 0\n      }\n  };\n  return resp;\n};\nsubredditServiceObj.checkModerator = (subreddit,userID) => {\n  const resp = {\n     success: true,\n     doc: {\n        _id: \"636e901bbc485bd111dd3880\",\n        text: \"first flair\",\n        __v: 0\n      }\n  };\n  return resp;\n};\nsubredditServiceObj.checkFlair=(subreddit,flairID) => {\n  const resp = {\n  success: false, error: subredditErrors.FLAIR_NOT_FOUND\n  };\n  \n  return resp;\n};\nconst result = await subredditServiceObj.updateFlair(subredditName);\nexpect(result.success).to.equal(false);",
              "err": {},
              "uuid": "c53549b6-1e2c-4d8a-9135-972237236a05",
              "parentUUID": "cff5b6e5-77ba-4e68-b4ec-aeed4af15d66",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f633380a-2751-4f55-9eae-0a4b97afb088",
            "a087a339-0311-44fb-9f49-816ce12f54fc",
            "cc6e559d-749d-441e-8fd3-7ef2cddcfc4e",
            "c53549b6-1e2c-4d8a-9135-972237236a05"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "4d96c356-ab2a-4e52-b9ed-328cd2f8fd00",
          "title": "delete subreddit flair",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\flairService.js",
          "file": "\\test\\services\\flairService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1) test success",
              "fullTitle": "delete subreddit flair 1) test success",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const SubredditRepository = {\n  removeFlairFromSubreddit: async(userData,data) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"636e901bbc485bd111dd3880\",\n        text: \"first flair\",\n        __v: 0\n      }\n    };\n    \n    return response;\n  },\n};\nconst on = {};\nlet subredditServiceObj = new SubredditService({  SubredditRepository,on, on});\nconst subredditName = \" \";\nsubredditServiceObj.checkSubreddit = async (subredditName) => {\n  const resp = {\n    success: true,\n    doc: {\n      _id: \"12345\",\n      fixedName: \"Nonlegit\",\n      moderators: [{\n        id: \"12345\"\n      }]\n    }\n  };\n  return resp;\n};\nsubredditServiceObj.checkModerator = (subreddit,userID) => {\n  const resp = {\n    success: true,\n    doc: {\n      _id: \"12345\",\n      fixedName: \"Nonlegit\",\n      moderators: [{\n        id: \"12345\"\n      }]\n    }\n  };\n  return resp;\n};\nsubredditServiceObj.checkFlair=(subreddit,flairID) => {\n  const resp = {\n    success: true,\n    doc: {\n      _id: \"12345\",\n      fixedName: \"Nonlegit\",\n      moderators: [{\n        id: \"12345\"\n      }]\n    }\n  };\n  \n  return resp;\n};\nconst result = await subredditServiceObj.deleteFlair(subredditName);\nexpect(result.success).to.equal(true);",
              "err": {},
              "uuid": "876250f8-09bc-4c62-b5f8-a9b7fd44ca96",
              "parentUUID": "4d96c356-ab2a-4e52-b9ed-328cd2f8fd00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2) test subreddit not found ",
              "fullTitle": "delete subreddit flair 2) test subreddit not found ",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const  SubredditRepository = {\n  removeFlairFromSubreddit: async(userData,data) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"636e901bbc485bd111dd3880\",\n        text: \"first flair\",\n        __v: 0\n      }\n    };\n    \n    return response;\n  },\n};\nconst on = {};\nlet subredditServiceObj = new SubredditService({  SubredditRepository,on,  on});\nconst subredditName = \" \";\nsubredditServiceObj.checkSubreddit = async (subredditName) => {\n  const resp = {\n    success: false,\n    error:subredditErrors.SUBREDDIT_NOT_FOUND\n  };\n  return resp;\n};\nsubredditServiceObj.checkModerator = (subreddit,userID) => {\n  const resp = {\n    success: true,\n    doc: {\n      _id: \"12345\",\n      fixedName: \"Nonlegit\",\n      moderators: [{\n        id: \"12345\"\n      }]\n    }\n  };\n  return resp;\n};\nsubredditServiceObj.checkFlair=(subreddit,flairID) => {\n  const resp = {\n    success: true,\n    doc: {\n      _id: \"12345\",\n      fixedName: \"Nonlegit\",\n      moderators: [{\n        id: \"12345\"\n      }]\n    }\n  };\n  \n  return resp;\n};\nconst result = await subredditServiceObj.deleteFlair(subredditName);\nexpect(result.success).to.equal(false);",
              "err": {},
              "uuid": "bd3c02ab-1550-4008-ae68-3bf6ba36edfc",
              "parentUUID": "4d96c356-ab2a-4e52-b9ed-328cd2f8fd00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3) test not moderator",
              "fullTitle": "delete subreddit flair 3) test not moderator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const  SubredditRepository = {\n  removeFlairFromSubreddit: async(userData,data) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"636e901bbc485bd111dd3880\",\n        text: \"first flair\",\n        __v: 0\n      }\n    };\n    \n    return response;\n  },\n};\n    \n    \nconst on = {};\nlet subredditServiceObj = new SubredditService({  SubredditRepository,on, on});\nconst subredditName = \" \";\nsubredditServiceObj.checkSubreddit = async (subredditName) => {\n  const resp = {\n    success: true,\n     doc: {\n        _id: \"636e901bbc485bd111dd3880\",\n        text: \"first flair\",\n        __v: 0\n      }\n  };\n  return resp;\n};\nsubredditServiceObj.checkModerator = (subreddit,userID) => {\n  const resp = {\n     success: false, error: subredditErrors.NOT_MODERATOR\n  };\n  return resp;\n};\nsubredditServiceObj.checkFlair=(subreddit,flairID) => {\n  const resp = {\n    success: true,\n    doc: {\n      _id: \"12345\",\n      fixedName: \"Nonlegit\",\n      moderators: [{\n        id: \"12345\"\n      }]\n    }\n  };\n  \n  return resp;\n};\nconst result = await subredditServiceObj.deleteFlair(subredditName);\nexpect(result.success).to.equal(false);",
              "err": {},
              "uuid": "a73b8a2c-acfe-4e13-9fb1-deaad5ab77fd",
              "parentUUID": "4d96c356-ab2a-4e52-b9ed-328cd2f8fd00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "4) test not subreddit flair",
              "fullTitle": "delete subreddit flair 4) test not subreddit flair",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const  SubredditRepository = {\n  updateFlair: async(userData,data) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"636e901bbc485bd111dd3880\",\n        text: \"first flair\",\n        __v: 0\n      }\n    };\n    \n    return response;\n  },\n};\n    \n    \nconst on = {};\nlet subredditServiceObj = new SubredditService({  SubredditRepository,on, on});\nconst subredditName = \" \";\nsubredditServiceObj.checkSubreddit = async (subredditName) => {\n  const resp = {\n    success: true,\n     doc: {\n        _id: \"636e901bbc485bd111dd3880\",\n        text: \"first flair\",\n        __v: 0\n      }\n  };\n  return resp;\n};\nsubredditServiceObj.checkModerator = (subreddit,userID) => {\n  const resp = {\n     success: true,\n     doc: {\n        _id: \"636e901bbc485bd111dd3880\",\n        text: \"first flair\",\n        __v: 0\n      }\n  };\n  return resp;\n};\nsubredditServiceObj.checkFlair=(subreddit,flairID) => {\n  const resp = {\n  success: false, error: subredditErrors.FLAIR_NOT_FOUND\n  };\n  \n  return resp;\n};\nconst result = await subredditServiceObj.deleteFlair(subredditName);\nexpect(result.success).to.equal(false);",
              "err": {},
              "uuid": "f0782f39-f03e-4acc-8571-5e25b1b2ac33",
              "parentUUID": "4d96c356-ab2a-4e52-b9ed-328cd2f8fd00",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "876250f8-09bc-4c62-b5f8-a9b7fd44ca96",
            "bd3c02ab-1550-4008-ae68-3bf6ba36edfc",
            "a73b8a2c-acfe-4e13-9fb1-deaad5ab77fd",
            "f0782f39-f03e-4acc-8571-5e25b1b2ac33"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "b522a810-f3bc-44de-ba1d-f01974e3070a",
          "title": "get subreddit flairs",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\flairService.js",
          "file": "\\test\\services\\flairService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1) test success",
              "fullTitle": "get subreddit flairs 1) test success",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const SubredditRepository = {\n  getSubredditFlairs: async(subredditName) => {\n    const response = {\n      success: true,\n      doc: [{\n        _id: \"636e901bbc485bd111dd3880\",\n        text: \"first flair\",\n        __v: 0\n      }]\n      \n      \n    };\n    \n    return response;\n  },\n};\nconst on = {};\nconst subredditServiceObj = new SubredditService({  SubredditRepository,on, on});\nconst subredditName = \" \";\n\nconst result = await subredditServiceObj.getFlairs(subredditName);\nexpect(result.success).to.equal(true);\nexpect(result.data[0].text).to.equal( \"first flair\");",
              "err": {},
              "uuid": "8b80eda7-77b4-4047-a57e-dbb6e725b6fd",
              "parentUUID": "b522a810-f3bc-44de-ba1d-f01974e3070a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2) test subreddit not found",
              "fullTitle": "get subreddit flairs 2) test subreddit not found",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const SubredditRepository = {\n  getSubredditFlairs: async(subredditName) => {\n    const response = {\n       success: false, error: mongoErrors.NOT_FOUND\n    };\n    \n    return response;\n  },\n};\nconst on = {};\nconst subredditServiceObj = new SubredditService({  SubredditRepository,on, on});\nconst subredditName = \" \";\nconst result = await subredditServiceObj.getFlairs(subredditName);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal( subredditErrors.SUBREDDIT_NOT_FOUND);",
              "err": {},
              "uuid": "ee3a5dba-8c2e-4855-9d3b-d108438ab820",
              "parentUUID": "b522a810-f3bc-44de-ba1d-f01974e3070a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8b80eda7-77b4-4047-a57e-dbb6e725b6fd",
            "ee3a5dba-8c2e-4855-9d3b-d108438ab820"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "b8ed6e5c-5331-40d3-95fb-52ba45b5f17b",
          "title": "create moderator message",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\messageService.js",
          "file": "\\test\\services\\messageService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1) test success",
              "fullTitle": "create moderator message 1) test success",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const MessageRepository = {\n  modMessage: async(msg) => {\n    const response = {\n      success: true,\n      doc: \n        {\n        text: \"first message\",\n        __v: 0\n      }       \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst messageServiceObj = new MessageService({  MessageRepository,on});\nconst result = await messageServiceObj.modMessage();\nexpect(result.success).to.equal(true);\nexpect(result.data.text).to.equal( \"first message\");",
              "err": {},
              "uuid": "23abd312-5992-4bd1-af21-36a61b746e5c",
              "parentUUID": "b8ed6e5c-5331-40d3-95fb-52ba45b5f17b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2) test fail",
              "fullTitle": "create moderator message 2) test fail",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const MessageRepository = {\n  modMessage: async(msg) => {\n    const response = {\n        success: false, \n      error:mongoErrors.UNKOWN  \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst messageServiceObj = new MessageService({  MessageRepository,on});\nconst result = await messageServiceObj.modMessage();\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal( mongoErrors.UNKOWN );",
              "err": {},
              "uuid": "64b810ce-1807-41c9-b7d4-a2600eca626c",
              "parentUUID": "b8ed6e5c-5331-40d3-95fb-52ba45b5f17b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "23abd312-5992-4bd1-af21-36a61b746e5c",
            "64b810ce-1807-41c9-b7d4-a2600eca626c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "83f1c3aa-2f0f-4aac-b4c4-57da8b8f7abd",
          "title": "create reply message",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\messageService.js",
          "file": "\\test\\services\\messageService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1) test success",
              "fullTitle": "create reply message 1) test success",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const MessageRepository = {\n  createReplyMessage: async(msg) => {\n    const response = {\n      success: true,\n      doc: \n        {\n        text: \"first message\",\n        __v: 0\n      }       \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst messageServiceObj = new MessageService({  MessageRepository,on});\nconst result = await messageServiceObj.createReplyMessage();\nexpect(result.success).to.equal(true);\nexpect(result.data.text).to.equal( \"first message\");",
              "err": {},
              "uuid": "b67c4dd1-fc54-4782-9d68-97f3680f51e1",
              "parentUUID": "83f1c3aa-2f0f-4aac-b4c4-57da8b8f7abd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b67c4dd1-fc54-4782-9d68-97f3680f51e1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "5071f00f-c5fe-4386-b434-069a7bc37e18",
          "title": "get sent message",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\messageService.js",
          "file": "\\test\\services\\messageService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1) test success",
              "fullTitle": "get sent message 1) test success",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const MessageRepository = {\n  getSentMessage: async(msg) => {\n    const response = {\n      success: true,\n      doc: \n        [{\n        text: \"first message\",\n        __v: 0\n      }  ]     \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst messageServiceObj = new MessageService({  MessageRepository,on});\nconst result = await messageServiceObj.getSentMessage();\nexpect(result.success).to.equal(true);\nexpect(result.data[0].text).to.equal( \"first message\");",
              "err": {},
              "uuid": "ce1b4177-2f8d-4b0f-b8aa-e3103990f124",
              "parentUUID": "5071f00f-c5fe-4386-b434-069a7bc37e18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2) test fail",
              "fullTitle": "get sent message 2) test fail",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const MessageRepository = {\n  getSentMessage: async(msg) => {\n    const response = {\n        success: false, \n      error:mongoErrors.UNKOWN  \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst messageServiceObj = new MessageService({  MessageRepository,on});\nconst result = await messageServiceObj.getSentMessage();\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal( mongoErrors.UNKOWN );",
              "err": {},
              "uuid": "40891060-d950-4cc1-ae94-92ec669351c7",
              "parentUUID": "5071f00f-c5fe-4386-b434-069a7bc37e18",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ce1b4177-2f8d-4b0f-b8aa-e3103990f124",
            "40891060-d950-4cc1-ae94-92ec669351c7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "6e920e55-5094-4c9f-9f6a-b770c6efe6eb",
          "title": "get inbox message",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\messageService.js",
          "file": "\\test\\services\\messageService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1) test success",
              "fullTitle": "get inbox message 1) test success",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const MessageRepository = {\n  getMessages: async(msg) => {\n    const response = {\n      success: true,\n      doc: \n        [{\n        text: \"first message\",\n        __v: 0\n      }  ]     \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst messageServiceObj = new MessageService({  MessageRepository,on});\nconst result = await messageServiceObj.getMessages();\nexpect(result.success).to.equal(true);\nexpect(result.data[0].text).to.equal( \"first message\");",
              "err": {},
              "uuid": "16490824-83f2-4203-9858-37b299519d39",
              "parentUUID": "6e920e55-5094-4c9f-9f6a-b770c6efe6eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2) test fail",
              "fullTitle": "get inbox message 2) test fail",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const MessageRepository = {\n  getMessages: async(msg) => {\n    const response = {\n        success: false, \n      error:mongoErrors.UNKOWN  \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst messageServiceObj = new MessageService({  MessageRepository,on});\nconst result = await messageServiceObj.getMessages();\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal( mongoErrors.UNKOWN );",
              "err": {},
              "uuid": "ca59cfb5-163f-4fc3-81f9-2a18e1dea482",
              "parentUUID": "6e920e55-5094-4c9f-9f6a-b770c6efe6eb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "16490824-83f2-4203-9858-37b299519d39",
            "ca59cfb5-163f-4fc3-81f9-2a18e1dea482"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "81c0b87d-3165-426a-95d3-f930079d136f",
          "title": "get all message",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\messageService.js",
          "file": "\\test\\services\\messageService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1) test success",
              "fullTitle": "get all message 1) test success",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const MessageRepository = {\n  getAllMessages: async(msg) => {\n    const response = {\n      success: true,\n      doc: \n        [{\n        text: \"first message\",\n        __v: 0\n      }  ]     \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst messageServiceObj = new MessageService({  MessageRepository,on});\nconst result = await messageServiceObj.getAllMessages();\nexpect(result.success).to.equal(true);\nexpect(result.data[0].text).to.equal( \"first message\");",
              "err": {},
              "uuid": "d6ff964b-f87d-4d2d-86c9-eefc1c9960b0",
              "parentUUID": "81c0b87d-3165-426a-95d3-f930079d136f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2) test fail",
              "fullTitle": "get all message 2) test fail",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const MessageRepository = {\n  getAllMessages: async(msg) => {\n    const response = {\n        success: false, \n      error:mongoErrors.UNKOWN  \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst messageServiceObj = new MessageService({  MessageRepository,on});\nconst result = await messageServiceObj.getAllMessages();\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal( mongoErrors.UNKOWN );",
              "err": {},
              "uuid": "2f20d086-1d47-4ba9-b87b-e596e8d500c6",
              "parentUUID": "81c0b87d-3165-426a-95d3-f930079d136f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d6ff964b-f87d-4d2d-86c9-eefc1c9960b0",
            "2f20d086-1d47-4ba9-b87b-e596e8d500c6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "e34f3e34-f3cc-4ae8-830a-20eb75346ab9",
          "title": "get unread message",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\messageService.js",
          "file": "\\test\\services\\messageService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1) test success",
              "fullTitle": "get unread message 1) test success",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const MessageRepository = {\n  getUnreadMessage: async(msg) => {\n    const response = {\n      success: true,\n      doc: \n        [{\n        text: \"first message\",\n        __v: 0\n      }  ]     \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst messageServiceObj = new MessageService({  MessageRepository,on});\nconst result = await messageServiceObj.getUnreadMessage();\nexpect(result.success).to.equal(true);\nexpect(result.data[0].text).to.equal( \"first message\");",
              "err": {},
              "uuid": "6b6bf231-d9e0-4cf3-9674-7e2aaeb97f20",
              "parentUUID": "e34f3e34-f3cc-4ae8-830a-20eb75346ab9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2) test fail",
              "fullTitle": "get unread message 2) test fail",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const MessageRepository = {\n  getUnreadMessage: async(msg) => {\n    const response = {\n        success: false, \n      error:mongoErrors.UNKOWN  \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst messageServiceObj = new MessageService({  MessageRepository,on});\nconst result = await messageServiceObj.getUnreadMessage();\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal( mongoErrors.UNKOWN );",
              "err": {},
              "uuid": "318664cf-1b77-417f-9610-6ef13b88bd37",
              "parentUUID": "e34f3e34-f3cc-4ae8-830a-20eb75346ab9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6b6bf231-d9e0-4cf3-9674-7e2aaeb97f20",
            "318664cf-1b77-417f-9610-6ef13b88bd37"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "cc2913b4-c9c6-4fea-b644-02f31468b94c",
          "title": "get post replies message",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\messageService.js",
          "file": "\\test\\services\\messageService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1) test success",
              "fullTitle": "get post replies message 1) test success",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const MessageRepository = {\n  getPostReplies: async(msg) => {\n    const response = {\n      success: true,\n      doc: \n        [{\n        text: \"first message\",\n        __v: 0\n      }  ]     \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst messageServiceObj = new MessageService({  MessageRepository,on});\nconst result = await messageServiceObj.getPostReplies();\nexpect(result.success).to.equal(true);\nexpect(result.data[0].text).to.equal( \"first message\");",
              "err": {},
              "uuid": "e1d0d569-c6b1-4a15-bd2b-866087cfc53f",
              "parentUUID": "cc2913b4-c9c6-4fea-b644-02f31468b94c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2) test fail",
              "fullTitle": "get post replies message 2) test fail",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const MessageRepository = {\n  getPostReplies: async(msg) => {\n    const response = {\n        success: false, \n      error:mongoErrors.UNKOWN  \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst messageServiceObj = new MessageService({  MessageRepository,on});\nconst result = await messageServiceObj.getPostReplies();\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal( mongoErrors.UNKOWN );",
              "err": {},
              "uuid": "93326303-8c39-47bb-9f77-2bf3222dae20",
              "parentUUID": "cc2913b4-c9c6-4fea-b644-02f31468b94c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e1d0d569-c6b1-4a15-bd2b-866087cfc53f",
            "93326303-8c39-47bb-9f77-2bf3222dae20"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "8160f8c3-d4fa-478a-844e-b8ed55c6c2c3",
          "title": "mark all as read",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\messageService.js",
          "file": "\\test\\services\\messageService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1) test success",
              "fullTitle": "mark all as read 1) test success",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const MessageRepository = {\n  markAllAsRead: async(msg) => {\n    const response = {\n      success: true    \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst messageServiceObj = new MessageService({  MessageRepository,on});\nconst result = await messageServiceObj.markAllAsRead();\nexpect(result.success).to.equal(true);",
              "err": {},
              "uuid": "4a30556c-4b04-4ada-b120-5bff0c188824",
              "parentUUID": "8160f8c3-d4fa-478a-844e-b8ed55c6c2c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2) test fail",
              "fullTitle": "mark all as read 2) test fail",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const MessageRepository = {\n  markAllAsRead: async(msg) => {\n    const response = {\n      success: false    \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst messageServiceObj = new MessageService({  MessageRepository,on});\nconst result = await messageServiceObj.markAllAsRead();\nexpect(result.success).to.equal(false);",
              "err": {},
              "uuid": "b7d26fb5-8c79-43e9-abd3-3f7aed9dbad1",
              "parentUUID": "8160f8c3-d4fa-478a-844e-b8ed55c6c2c3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4a30556c-4b04-4ada-b120-5bff0c188824",
            "b7d26fb5-8c79-43e9-abd3-3f7aed9dbad1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "9c329086-f886-4560-927e-4b27a93f3763",
          "title": "delete message",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\messageService.js",
          "file": "\\test\\services\\messageService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1) test success",
              "fullTitle": "delete message 1) test success",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const MessageRepository = {\n  deleteMessage: async(msg) => {\n    const response = {\n      success: true    \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst messageServiceObj = new MessageService({  MessageRepository,on});\nconst result = await messageServiceObj.deleteMessage();\nexpect(result.success).to.equal(true);",
              "err": {},
              "uuid": "43986cde-a13e-48e0-800a-336b062559b6",
              "parentUUID": "9c329086-f886-4560-927e-4b27a93f3763",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2) test fail",
              "fullTitle": "delete message 2) test fail",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const MessageRepository = {\n  deleteMessage: async(msg) => {\n    const response = {\n        success: false, \n      \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst messageServiceObj = new MessageService({  MessageRepository,on});\nconst result = await messageServiceObj.deleteMessage();\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(messageErrors.MESSAGE_NOT_FOUND);",
              "err": {},
              "uuid": "6627811a-987a-4792-9e66-9e68ec65a61e",
              "parentUUID": "9c329086-f886-4560-927e-4b27a93f3763",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "43986cde-a13e-48e0-800a-336b062559b6",
            "6627811a-987a-4792-9e66-9e68ec65a61e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "cce42176-73ee-46e8-a866-a17943f18711",
          "title": "create message",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\messageService.js",
          "file": "\\test\\services\\messageService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1) test success",
              "fullTitle": "create message 1) test success",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const message = { to: \"\" };\n      const MessageRepository = {\n        createMessage: async(msg) => {\n const response = {\n   success: true    \n };         \n return response;\n        },\n        };\nconst UserRepository = {\n        findByName: async(msg) => {\n const response = {\n     success: true,\n    doc:{_id:\" \"}    \n };         \n return response;\n        },\n        };\n\n      const on = {};\n      const messageServiceObj = new MessageService({  MessageRepository,UserRepository});\n      const result = await messageServiceObj.createMessage(on,message);\n      expect(result.success).to.equal(true);",
              "err": {},
              "uuid": "b1b82925-b328-418e-871e-86587264e62c",
              "parentUUID": "cce42176-73ee-46e8-a866-a17943f18711",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2) test fail",
              "fullTitle": "create message 2) test fail",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const message = { to: \"\" };\n      const MessageRepository = {\ncreateMessage: async(msg) => {\n  const response = {\n      success: false, \n    \n  };         \n  return response;\n},\n };\n   const UserRepository = {\nfindByName: async(msg) => {\n  const response = {\n      success: true,\n    doc:{_id:\" \"}  \n  };         \n  return response;\n},\n};\n\n      const on = {};\n      const messageServiceObj = new MessageService({  MessageRepository,UserRepository});\n      const result = await messageServiceObj.createMessage(on,message);\n      expect(result.success).to.equal(false);",
              "err": {},
              "uuid": "b3a2fb9b-a5d4-40fa-bcf3-14b0c6cabf97",
              "parentUUID": "cce42176-73ee-46e8-a866-a17943f18711",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3) test fail user not existed",
              "fullTitle": "create message 3) test fail user not existed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const message = { to: \"\" };\n      const MessageRepository = {\ncreateMessage: async(msg) => {\n  const response = {\n      success: false, \n    \n  };         \n  return response;\n},\n };\n   const UserRepository = {\nfindByName: async(msg) => {\n  const response = {\n      success: false\n  };         \n  return response;\n},\n};\n\n      const on = {};\n      const messageServiceObj = new MessageService({  MessageRepository,UserRepository});\n      const result = await messageServiceObj.createMessage(on,message);\n      expect(result.success).to.equal(false);",
              "err": {},
              "uuid": "637053ae-b7a0-4d7d-94f7-7f93e25e3252",
              "parentUUID": "cce42176-73ee-46e8-a866-a17943f18711",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b1b82925-b328-418e-871e-86587264e62c",
            "b3a2fb9b-a5d4-40fa-bcf3-14b0c6cabf97",
            "637053ae-b7a0-4d7d-94f7-7f93e25e3252"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "3d2a1ee4-25d7-4700-9a87-56156d1953eb",
          "title": "create reply",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\messageService.js",
          "file": "\\test\\services\\messageService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1) test success",
              "fullTitle": "create reply 1) test success",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userId =mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\");\n      const MessageRepository = {\nreply: async(msg) => {\n  const response = {\n    success: true    \n  };         \n  return response;\n  },\n  findById: async(msg) => {\n  const response = {\n      success: true,\n      doc: {\n          to: { _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\")},\n          from:{_id:mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),}\n      }    \n  };         \n  return response;\n},\n};\n\n\n      const on = {};\n      const messageServiceObj = new MessageService({  MessageRepository,on});\n      const result = await messageServiceObj.reply(userId);\n      expect(result.success).to.equal(true);",
              "err": {},
              "uuid": "83d62e94-c783-4cf5-8172-b234ba2bbfa5",
              "parentUUID": "3d2a1ee4-25d7-4700-9a87-56156d1953eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2) test message does not exist",
              "fullTitle": "create reply 2) test message does not exist",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userId =mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\");\n      const MessageRepository = {\n\n  findById: async(msg) => {\n  const response = {\n      success: false,\n       \n  };         \n  return response;\n},\n};\n\n\n      const on = {};\n      const messageServiceObj = new MessageService({  MessageRepository,on});\n      const result = await messageServiceObj.reply(userId);\n      expect(result.success).to.equal(false);",
              "err": {},
              "uuid": "bdbd477c-b529-4c4e-94f5-5a71c1d374c9",
              "parentUUID": "3d2a1ee4-25d7-4700-9a87-56156d1953eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3) test fail",
              "fullTitle": "create reply 3) test fail",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userId =mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\");\n      const MessageRepository = {\nreply: async(msg) => {\n  const response = {\n      success: false,\n    error:  mongoErrors.UNKOWN\n  };         \n  return response;\n  },\n  findById: async(msg) => {\n  const response = {\n      success: true,\n      doc: {\n          to: { _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\")},\n          from:{_id:mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),}\n      }    \n  };         \n  return response;\n},\n};\n\n\n      const on = {};\n      const messageServiceObj = new MessageService({  MessageRepository,on});\n      const result = await messageServiceObj.reply(userId);\n      expect(result.success).to.equal(false);",
              "err": {},
              "uuid": "4c2971d5-dfc5-48b8-ae8a-ea9eab4b6005",
              "parentUUID": "3d2a1ee4-25d7-4700-9a87-56156d1953eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "4) test success",
              "fullTitle": "create reply 4) test success",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userId =mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\");\n      const MessageRepository = {\nreply: async(msg) => {\n  const response = {\n    success: true    \n  };         \n  return response;\n  },\n  findById: async(msg) => {\n  const response = {\n      success: true,\n      doc: {\n         to: { _id: mongoose.Types.ObjectId(\"636e901bbc485bd101dd3880\")},\n          from:{_id:mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),}\n      }    \n  };         \n  return response;\n},\n};\n\n\n      const on = {};\n      const messageServiceObj = new MessageService({  MessageRepository,on});\n      const result = await messageServiceObj.reply(userId);\n      expect(result.success).to.equal(true);",
              "err": {},
              "uuid": "3555e07a-92a4-4a46-98d1-4ba4962c7fdf",
              "parentUUID": "3d2a1ee4-25d7-4700-9a87-56156d1953eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "5) test success",
              "fullTitle": "create reply 5) test success",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userId =mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\");\n      const MessageRepository = {\nreply: async(msg) => {\n  const response = {\n    success: true    \n  };         \n  return response;\n  },\n  findById: async(msg) => {\n  const response = {\n      success: true,\n      doc: {\n          to: { _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\")},\n          from:{_id:mongoose.Types.ObjectId(\"636e901bbc485bd111dd3280\"),}\n      }    \n  };         \n  return response;\n},\n};\n\n\n      const on = {};\n      const messageServiceObj = new MessageService({  MessageRepository,on});\n      const result = await messageServiceObj.reply(userId);\n      expect(result.success).to.equal(true);",
              "err": {},
              "uuid": "ffe98306-a32d-4a3c-b7be-8e18add4e375",
              "parentUUID": "3d2a1ee4-25d7-4700-9a87-56156d1953eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "1) test success",
              "fullTitle": "create reply 1) test success",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userId =mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\");\n      const MessageRepository = {\nreply: async(msg) => {\n  const response = {\n    success: true    \n  };         \n  return response;\n  },\n  findById: async(msg) => {\n  const response = {\n      success: true,\n      doc: {\n          to: { _id: mongoose.Types.ObjectId(\"636e901bbc485bd111d03880\")},\n          from:{_id:mongoose.Types.ObjectId(\"636e901bbc485bd111d03880\"),}\n      }    \n  };         \n  return response;\n},\n};\n\n\n      const on = {};\n      const messageServiceObj = new MessageService({  MessageRepository,on});\n      const result = await messageServiceObj.reply(userId);\n      expect(result.success).to.equal(false);",
              "err": {},
              "uuid": "1a5320c4-a431-493b-a6ac-d115e2bbdf08",
              "parentUUID": "3d2a1ee4-25d7-4700-9a87-56156d1953eb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "83d62e94-c783-4cf5-8172-b234ba2bbfa5",
            "bdbd477c-b529-4c4e-94f5-5a71c1d374c9",
            "4c2971d5-dfc5-48b8-ae8a-ea9eab4b6005",
            "3555e07a-92a4-4a46-98d1-4ba4962c7fdf",
            "ffe98306-a32d-4a3c-b7be-8e18add4e375",
            "1a5320c4-a431-493b-a6ac-d115e2bbdf08"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "067b942b-ed02-452d-b7a9-f8f758145aeb",
          "title": "add reply notification",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\notificationService.js",
          "file": "\\test\\services\\notificationService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1) test success",
              "fullTitle": "add reply notification 1) test success",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const NotificationRepository = {\n  addReplyNotification: async(msg) => {\n    const response = {\n      success: true,\n      doc: \n        {\n        text: \"first message\",\n        __v: 0\n      }       \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst notificationServiceObj = new NotificationService({  NotificationRepository,on});\nconst result = await notificationServiceObj.addReplyNotification();\nexpect(result.success).to.equal(true);\nexpect(result.data.text).to.equal( \"first message\");",
              "err": {},
              "uuid": "68755783-7b5a-418d-b8ab-83030e2a533e",
              "parentUUID": "067b942b-ed02-452d-b7a9-f8f758145aeb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2) test fail",
              "fullTitle": "add reply notification 2) test fail",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const NotificationRepository = {\n  addReplyNotification: async(msg) => {\n    const response = {\n        success: false, \n      error:mongoErrors.UNKOWN  \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst notificationServiceObj = new NotificationService({  NotificationRepository,on});\nconst result = await notificationServiceObj.addReplyNotification();\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal( mongoErrors.UNKOWN );",
              "err": {},
              "uuid": "4600c560-67c9-410e-97fa-08b978926948",
              "parentUUID": "067b942b-ed02-452d-b7a9-f8f758145aeb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "68755783-7b5a-418d-b8ab-83030e2a533e",
            "4600c560-67c9-410e-97fa-08b978926948"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "cca42dfa-0021-4f4d-975f-cebf35b9ccb1",
          "title": "send mentions",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\notificationService.js",
          "file": "\\test\\services\\notificationService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1) test success",
              "fullTitle": "send mentions 1) test success",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const NotificationRepository = {\n  sendMentions: async(msg) => {\n    const response = {\n      success: true,\n      doc: \n        {\n        text: \"first message\",\n        __v: 0\n      }       \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst notificationServiceObj = new NotificationService({  NotificationRepository,on});\nconst result = await notificationServiceObj.sendMentions();\nexpect(result.success).to.equal(true);\nexpect(result.data.text).to.equal( \"first message\");",
              "err": {},
              "uuid": "47ba20be-7b02-438a-ae76-a82e3b5f3874",
              "parentUUID": "cca42dfa-0021-4f4d-975f-cebf35b9ccb1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2) test fail",
              "fullTitle": "send mentions 2) test fail",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const NotificationRepository = {\n  sendMentions: async(msg) => {\n    const response = {\n        success: false, \n      error:mongoErrors.UNKOWN  \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst notificationServiceObj = new NotificationService({  NotificationRepository,on});\nconst result = await notificationServiceObj.sendMentions();\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal( mongoErrors.UNKOWN );",
              "err": {},
              "uuid": "6e555c8b-e436-408f-8993-4827f1498997",
              "parentUUID": "cca42dfa-0021-4f4d-975f-cebf35b9ccb1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "47ba20be-7b02-438a-ae76-a82e3b5f3874",
            "6e555c8b-e436-408f-8993-4827f1498997"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "740f9360-bada-4688-a47a-ace850541bc0",
          "title": "add follow notification",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\notificationService.js",
          "file": "\\test\\services\\notificationService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1) test success",
              "fullTitle": "add follow notification 1) test success",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const NotificationRepository = {\n  addFollowNotification: async(msg) => {\n    const response = {\n      success: true,\n      doc: \n        {\n        text: \"first message\",\n        __v: 0\n      }       \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst notificationServiceObj = new NotificationService({  NotificationRepository,on});\nconst result = await notificationServiceObj.addFollowNotification();\nexpect(result.success).to.equal(true);\nexpect(result.data.text).to.equal( \"first message\");",
              "err": {},
              "uuid": "241b8d08-26c8-4b36-bd20-c34e202291ea",
              "parentUUID": "740f9360-bada-4688-a47a-ace850541bc0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2) test fail",
              "fullTitle": "add follow notification 2) test fail",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const NotificationRepository = {\n  addFollowNotification: async(msg) => {\n    const response = {\n        success: false, \n      error:mongoErrors.UNKOWN  \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst notificationServiceObj = new NotificationService({  NotificationRepository,on});\nconst result = await notificationServiceObj.addFollowNotification();\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal( mongoErrors.UNKOWN );",
              "err": {},
              "uuid": "5f6dd7e2-2cb0-474c-b60a-8c784abed72e",
              "parentUUID": "740f9360-bada-4688-a47a-ace850541bc0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "241b8d08-26c8-4b36-bd20-c34e202291ea",
            "5f6dd7e2-2cb0-474c-b60a-8c784abed72e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "8fb60078-7dfc-4332-9bbe-63e91797c632",
          "title": "get firebase token",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\notificationService.js",
          "file": "\\test\\services\\notificationService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1) test success",
              "fullTitle": "get firebase token 1) test success",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const UserRepository = {\n  getFirebaseToken: async(msg) => {\n    const response = {\n      success: true,\n      doc: \n        {\n        text: \"first message\",\n        __v: 0\n      }       \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst notificationServiceObj = new NotificationService({  on,UserRepository});\nconst result = await notificationServiceObj.getFirebaseToken();\nexpect(result.success).to.equal(true);\nexpect(result.data.text).to.equal( \"first message\");",
              "err": {},
              "uuid": "badd8ce6-b0c3-4fa7-83a5-808e5dd2d3f9",
              "parentUUID": "8fb60078-7dfc-4332-9bbe-63e91797c632",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2) test fail",
              "fullTitle": "get firebase token 2) test fail",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const UserRepository = {\n  getFirebaseToken: async(msg) => {\n    const response = {\n        success: false, \n      error:mongoErrors.UNKOWN  \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst notificationServiceObj = new NotificationService({  on,UserRepository});\nconst result = await notificationServiceObj.getFirebaseToken();\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal( mongoErrors.UNKOWN );",
              "err": {},
              "uuid": "ebfdeeac-61d6-4f55-bbb0-00835cf127e2",
              "parentUUID": "8fb60078-7dfc-4332-9bbe-63e91797c632",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "badd8ce6-b0c3-4fa7-83a5-808e5dd2d3f9",
            "ebfdeeac-61d6-4f55-bbb0-00835cf127e2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "05e1861f-f814-4426-8a5e-5f02ee695ab5",
          "title": "get all notification",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\notificationService.js",
          "file": "\\test\\services\\notificationService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1) test success",
              "fullTitle": "get all notification 1) test success",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const NotificationRepository = {\n  getAllNotifications: async(msg) => {\n    const response = {\n      success: true,\n      doc: \n        {\n        text: \"first message\",\n        __v: 0\n      }       \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst notificationServiceObj = new NotificationService({  NotificationRepository,on});\nconst result = await notificationServiceObj.getAllNotifications();\nexpect(result.success).to.equal(true);\nexpect(result.data.text).to.equal( \"first message\");",
              "err": {},
              "uuid": "9b744474-762a-466a-bd76-b560f2b816b6",
              "parentUUID": "05e1861f-f814-4426-8a5e-5f02ee695ab5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2) test fail",
              "fullTitle": "get all notification 2) test fail",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const NotificationRepository = {\n  getAllNotifications: async(msg) => {\n    const response = {\n        success: false, \n      error:mongoErrors.UNKOWN  \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst notificationServiceObj = new NotificationService({  NotificationRepository,on});\nconst result = await notificationServiceObj.getAllNotifications();\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal( mongoErrors.UNKOWN );",
              "err": {},
              "uuid": "9b9cfea8-7f94-4c2d-94df-585afb79ad0a",
              "parentUUID": "05e1861f-f814-4426-8a5e-5f02ee695ab5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9b744474-762a-466a-bd76-b560f2b816b6",
            "9b9cfea8-7f94-4c2d-94df-585afb79ad0a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "738d6fd9-a1d9-4da9-8033-e42e78db88d8",
          "title": "mark all as read",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\notificationService.js",
          "file": "\\test\\services\\notificationService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1) test success",
              "fullTitle": "mark all as read 1) test success",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const NotificationRepository = {\n  markAllNotificationsAsRead: async(msg) => {\n    const response = {\n      success: true,\n      doc: \n        {\n        text: \"first message\",\n        __v: 0\n      }       \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst notificationServiceObj = new NotificationService({  NotificationRepository,on});\nconst result = await notificationServiceObj.markAllNotificationsAsRead();\nexpect(result.success).to.equal(true);",
              "err": {},
              "uuid": "ce4bdb18-994b-4a3e-a12f-038df5028630",
              "parentUUID": "738d6fd9-a1d9-4da9-8033-e42e78db88d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2) test fail",
              "fullTitle": "mark all as read 2) test fail",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const NotificationRepository = {\n  markAllNotificationsAsRead: async(msg) => {\n    const response = {\n        success: false, \n      error:mongoErrors.UNKOWN  \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst notificationServiceObj = new NotificationService({  NotificationRepository,on});\nconst result = await notificationServiceObj.markAllNotificationsAsRead();\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal( mongoErrors.UNKOWN );",
              "err": {},
              "uuid": "9884d85a-779b-402d-bfbd-23995ff4c7d8",
              "parentUUID": "738d6fd9-a1d9-4da9-8033-e42e78db88d8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ce4bdb18-994b-4a3e-a12f-038df5028630",
            "9884d85a-779b-402d-bfbd-23995ff4c7d8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "1d3a2b28-b7b4-4db0-a85c-e60c2e7d09b9",
          "title": "mark one as read",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\notificationService.js",
          "file": "\\test\\services\\notificationService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1) test success",
              "fullTitle": "mark one as read 1) test success",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const NotificationRepository = {\n  markAllNotificationsAsRead: async(msg) => {\n    const response = {\n      success: true,\n      doc: \n        {\n        text: \"first message\",\n        __v: 0\n      }       \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst notificationServiceObj = new NotificationService({  NotificationRepository,on});\nconst result = await notificationServiceObj.markAllNotificationsAsRead();\nexpect(result.success).to.equal(true);",
              "err": {},
              "uuid": "8d6b90b9-d090-4353-9959-9d5242d58ed4",
              "parentUUID": "1d3a2b28-b7b4-4db0-a85c-e60c2e7d09b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2) test fail",
              "fullTitle": "mark one as read 2) test fail",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const NotificationRepository = {\n  markNotificationAsRead: async(msg) => {\n    const response = {\n        success: false, \n      error:mongoErrors.UNKOWN  \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst notificationServiceObj = new NotificationService({  NotificationRepository,on});\nconst result = await notificationServiceObj.markNotificationAsRead();\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal( notificationErrors.NOTIFICATION_NOT_FOUND );",
              "err": {},
              "uuid": "0a434e3e-c657-414e-9003-561e84b3c8f3",
              "parentUUID": "1d3a2b28-b7b4-4db0-a85c-e60c2e7d09b9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8d6b90b9-d090-4353-9959-9d5242d58ed4",
            "0a434e3e-c657-414e-9003-561e84b3c8f3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "ac33416b-f905-43b3-84ee-e77467b70348",
          "title": "hide notification",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\notificationService.js",
          "file": "\\test\\services\\notificationService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1) test success",
              "fullTitle": "hide notification 1) test success",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const NotificationRepository = {\n  hideNotification: async(msg) => {\n    const response = {\n      success: true,\n      doc: \n        {\n        text: \"first message\",\n        __v: 0\n      }       \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst notificationServiceObj = new NotificationService({  NotificationRepository,on});\nconst result = await notificationServiceObj.hideNotification();\nexpect(result.success).to.equal(true);",
              "err": {},
              "uuid": "b0fa70f9-8736-4888-b91b-a72b3ff55388",
              "parentUUID": "ac33416b-f905-43b3-84ee-e77467b70348",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2) test fail",
              "fullTitle": "hide notification 2) test fail",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const NotificationRepository = {\n  hideNotification: async(msg) => {\n    const response = {\n        success: false, \n      error:mongoErrors.UNKOWN  \n    };         \n    return response;\n  },\n};\nconst on = {};\nconst notificationServiceObj = new NotificationService({  NotificationRepository,on});\nconst result = await notificationServiceObj.hideNotification();\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal( notificationErrors.NOTIFICATION_NOT_FOUND );",
              "err": {},
              "uuid": "dd59c7d3-1772-4a39-8ab7-ea35b442abfe",
              "parentUUID": "ac33416b-f905-43b3-84ee-e77467b70348",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b0fa70f9-8736-4888-b91b-a72b3ff55388",
            "dd59c7d3-1772-4a39-8ab7-ea35b442abfe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "66968d2d-e6c1-4e07-a6f3-5c5c39160402",
          "title": "Post service test",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\postService.js",
          "file": "\\test\\services\\postService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "51540e99-2fe1-424a-a059-0c2642069fa4",
              "title": "create post",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\postService.js",
              "file": "\\test\\services\\postService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "successful post create in subreddit",
                  "fullTitle": "Post service test create post successful post create in subreddit",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "post = {\n  title: \"kiro post\",\n  kind: \"self\",\n  text: \"this is a post\",\n  owner: \"636d493c3ff67d626ec990d0\",\n  author: \"879d493c3ff67d626ec990e5\",\n  ownerType: \"Subreddit\",\n  flairId: \"123d493c3ff67d626ec994f7\",\n};\nconst { success, data } = await postServices.createPost(post);\nexpect(success).to.equal(true);\nexpect(data).to.eql(post);",
                  "err": {},
                  "uuid": "84a9d3dd-6d94-41fa-889f-621d448edee7",
                  "parentUUID": "51540e99-2fe1-424a-a059-0c2642069fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "successful post create in user profile",
                  "fullTitle": "Post service test create post successful post create in user profile",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "post = {\n  title: \"kiro post\",\n  kind: \"self\",\n  text: \"this is a post\",\n  author: \"879d493c3ff67d626ec990e5\",\n  ownerType: \"User\",\n  flairId: \"879d493c3ff67d626ec990e5\",\n};\nconst { success, data } = await postServices.createPost(post);\nexpect(success).to.equal(true);\nexpect(data.owner).to.equal(post.author);",
                  "err": {},
                  "uuid": "cfe6a539-e575-4c55-a7cd-19b9acd35e75",
                  "parentUUID": "51540e99-2fe1-424a-a059-0c2642069fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid kind",
                  "fullTitle": "Post service test create post invalid kind",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let post = {\n  kind: \"link\",\n  text: \"this is a post\",\n  owner: \"636d493c3ff67d626ec990d0\",\n  ownerType: \"Subreddit\",\n};\nconst { success, error } = await postServices.createPost(post);\nexpect(success).to.equal(false);\nexpect(error).to.equal(postErrors.INVALID_POST_KIND);",
                  "err": {},
                  "uuid": "5b913016-aa18-43ab-afbc-eafff68f09b7",
                  "parentUUID": "51540e99-2fe1-424a-a059-0c2642069fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid owner 1",
                  "fullTitle": "Post service test create post invalid owner 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "post = {\n  title: \"kiro post\",\n  kind: \"self\",\n  text: \"this is a post\",\n  author: \"879d493c3ff67d626ec990e5\",\n  ownerType: \"Subreddit\",\n};\nconst { success, error } = await postServices.createPost(post);\nexpect(success).to.equal(false);\nexpect(error).to.equal(postErrors.INVALID_OWNER);",
                  "err": {},
                  "uuid": "1be9c336-3a0b-4c28-8040-6b16bbbd08b2",
                  "parentUUID": "51540e99-2fe1-424a-a059-0c2642069fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid owner 2",
                  "fullTitle": "Post service test create post invalid owner 2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "post = {\n  title: \"kiro post\",\n  kind: \"self\",\n  text: \"this is a post\",\n  author: \"879d493c3ff67d626ec990e5\",\n  owner: \"259d493c3ff67d626ec990e5\",\n  ownerType: \"Not a valid owner\",\n};\nconst { success, error } = await postServices.createPost(post);\nexpect(success).to.equal(false);\nexpect(error).to.equal(postErrors.INVALID_OWNER);",
                  "err": {},
                  "uuid": "008f66ad-e668-4c95-b69a-4cea32c7fdc9",
                  "parentUUID": "51540e99-2fe1-424a-a059-0c2642069fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid post kind 1",
                  "fullTitle": "Post service test create post invalid post kind 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "post = {\n  title: \"kiro post\",\n  kind: \"image\",\n  text: \"this is a post\",\n  owner: \"636d493c3ff67d626ec990d0\",\n  author: \"879d493c3ff67d626ec990e5\",\n  ownerType: \"Subreddit\",\n  flairId: \"123d493c3ff67d626ec994f7\",\n};\nSubredditRepository.findById = async (id, fields) => {\n  return {\n    success: true,\n    doc: {\n      flairIds: [\"123d493c3ff67d626ec994f7\", \"666d493c3ff67d626ec990d1\"],\n      allowImgs: false,\n    },\n  };\n};\nconst { success, error } = await postServices.createPost(post);\nexpect(success).to.equal(false);\nexpect(error).to.equal(postErrors.INVALID_POST_KIND)",
                  "err": {},
                  "uuid": "07077259-9ce6-4af8-abfb-f4de7ff97e8f",
                  "parentUUID": "51540e99-2fe1-424a-a059-0c2642069fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid post kind 2",
                  "fullTitle": "Post service test create post invalid post kind 2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "post = {\n  title: \"kiro post\",\n  kind: \"video\",\n  text: \"this is a post\",\n  owner: \"636d493c3ff67d626ec990d0\",\n  author: \"879d493c3ff67d626ec990e5\",\n  ownerType: \"Subreddit\",\n  flairId: \"123d493c3ff67d626ec994f7\",\n};\nSubredditRepository.findById = async (id, fields) => {\n  return {\n    success: true,\n    doc: {\n      flairIds: [\"123d493c3ff67d626ec994f7\", \"666d493c3ff67d626ec990d1\"],\n      allowVideos: false,\n    },\n  };\n};\nconst { success, error } = await postServices.createPost(post);\nexpect(success).to.equal(false);\nexpect(error).to.equal(postErrors.INVALID_POST_KIND)",
                  "err": {},
                  "uuid": "319ae722-56c8-4cdd-8763-8a14f112a92e",
                  "parentUUID": "51540e99-2fe1-424a-a059-0c2642069fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid post kind 3",
                  "fullTitle": "Post service test create post invalid post kind 3",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "post = {\n  title: \"kiro post\",\n  kind: \"link\",\n  text: \"this is a post\",\n  owner: \"636d493c3ff67d626ec990d0\",\n  author: \"879d493c3ff67d626ec990e5\",\n  ownerType: \"Subreddit\",\n  flairId: \"123d493c3ff67d626ec994f7\",\n};\nSubredditRepository.findById = async (id, fields) => {\n  return {\n    success: true,\n    doc: {\n      flairIds: [\"123d493c3ff67d626ec994f7\", \"666d493c3ff67d626ec990d1\"],\n      allowLinks: false,\n    },\n  };\n};\nconst { success, error } = await postServices.createPost(post);\nexpect(success).to.equal(false);\nexpect(error).to.equal(postErrors.INVALID_POST_KIND)",
                  "err": {},
                  "uuid": "136213f1-42ff-4a37-9486-9fb63e4b50f1",
                  "parentUUID": "51540e99-2fe1-424a-a059-0c2642069fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "flair not found",
                  "fullTitle": "Post service test create post flair not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "post = {\n  title: \"kiro post\",\n  kind: \"self\",\n  text: \"this is a post\",\n  owner: \"636d493c3ff67d626ec990d0\",\n  author: \"879d493c3ff67d626ec990e5\",\n  ownerType: \"Subreddit\",\n  flairId: \"456d493c3ff67d626ec994f7\",\n};\nconst { success, error } = await postServices.createPost(post);\nexpect(success).to.equal(false);\nexpect(error).to.equal(postErrors.FLAIR_NOT_FOUND);",
                  "err": {},
                  "uuid": "1ad9b666-ebde-4510-b8fa-c157495fc1e1",
                  "parentUUID": "51540e99-2fe1-424a-a059-0c2642069fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Error in data access layer",
                  "fullTitle": "Post service test create post Error in data access layer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "post = {\n  title: \"kiro post\",\n  kind: \"self\",\n  text: \"this is a post\",\n  owner: \"636d493c3ff67d626ec990d0\",\n  author: \"879d493c3ff67d626ec990e5\",\n  ownerType: \"Subreddit\",\n  flairId: \"123d493c3ff67d626ec994f7\",\n};\nPostRepository.createOne = async (data) => {\n  return { success: false };\n};\nconst { success, error } = await postServices.createPost(post);\nexpect(success).to.equal(false);\nexpect(error).to.equal(postErrors.MONGO_ERR);",
                  "err": {},
                  "uuid": "c62fcf27-8b24-4a31-bf49-81adf903319b",
                  "parentUUID": "51540e99-2fe1-424a-a059-0c2642069fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid subreddit",
                  "fullTitle": "Post service test create post invalid subreddit",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "post = {\n  title: \"kiro post\",\n  kind: \"self\",\n  text: \"this is a post\",\n  owner: \"636d493c3ff67d626ec990d0\",\n  author: \"879d493c3ff67d626ec990e5\",\n  ownerType: \"Subreddit\",\n};\nSubredditRepository.findById = async (id, fields) => {\n  return { success: false };\n};\nconst { success, error } = await postServices.createPost(post);\nexpect(success).to.equal(false);\nexpect(error).to.equal(postErrors.SUBREDDIT_NOT_FOUND);",
                  "err": {},
                  "uuid": "310777cf-f5b4-43d8-8def-c3e5a0c889c5",
                  "parentUUID": "51540e99-2fe1-424a-a059-0c2642069fa4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "84a9d3dd-6d94-41fa-889f-621d448edee7",
                "cfe6a539-e575-4c55-a7cd-19b9acd35e75",
                "5b913016-aa18-43ab-afbc-eafff68f09b7",
                "1be9c336-3a0b-4c28-8040-6b16bbbd08b2",
                "008f66ad-e668-4c95-b69a-4cea32c7fdc9",
                "07077259-9ce6-4af8-abfb-f4de7ff97e8f",
                "319ae722-56c8-4cdd-8763-8a14f112a92e",
                "136213f1-42ff-4a37-9486-9fb63e4b50f1",
                "1ad9b666-ebde-4510-b8fa-c157495fc1e1",
                "c62fcf27-8b24-4a31-bf49-81adf903319b",
                "310777cf-f5b4-43d8-8def-c3e5a0c889c5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "f743aee1-ea10-423b-874b-f43ab808e3ec",
              "title": "Testing update post",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\postService.js",
              "file": "\\test\\services\\postService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "successful post update",
                  "fullTitle": "Post service test Testing update post successful post update",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { success, data: updatedData } = await postServices.updatePost(\n  id,\n  data,\n  userId\n);\nexpect(success).to.equal(true);\nexpect(updatedData.text).to.equal(\"updated post text\");",
                  "err": {},
                  "uuid": "91d87986-1172-43e8-8344-beef0161425e",
                  "parentUUID": "f743aee1-ea10-423b-874b-f43ab808e3ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "unathorized user",
                  "fullTitle": "Post service test Testing update post unathorized user",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userId = \"578a5fccf267fc3a463b35e\";\nconst { success, error } = await postServices.updatePost(\n  id,\n  data,\n  userId\n);\nexpect(success).to.equal(false);\nexpect(error).to.equal(postErrors.NOT_AUTHOR);",
                  "err": {},
                  "uuid": "97bb1c2f-3950-4009-b258-b3ec764647be",
                  "parentUUID": "f743aee1-ea10-423b-874b-f43ab808e3ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "post not editable",
                  "fullTitle": "Post service test Testing update post post not editable",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userId = \"578a5fccf267fc3a463b35e4\";\nPostRepository.exists = async (id, fields) => {\n  const post = {\n    author: ObjectId(\"578a5fccf267fc3a463b35e4\"),\n    kind: \"link\",\n    sharedFrom: false,\n  };\n  return { success: true, doc: post };\n};\nconst { success, error } = await postServices.updatePost(\n  id,\n  data,\n  userId\n);\nexpect(success).to.equal(false);\nexpect(error).to.equal(postErrors.NOT_EDITABLE);",
                  "err": {},
                  "uuid": "7824e8f8-7758-4499-9992-0f4c59ab8985",
                  "parentUUID": "f743aee1-ea10-423b-874b-f43ab808e3ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "post not found",
                  "fullTitle": "Post service test Testing update post post not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "PostRepository.exists = async (id, fields) => {\n  return { success: false };\n};\nconst { success, error } = await postServices.updatePost(\n  id,\n  data,\n  userId\n);\nexpect(success).to.equal(false);\nexpect(error).to.equal(postErrors.POST_NOT_FOUND);",
                  "err": {},
                  "uuid": "d4168de1-6316-4a7e-ad32-29941bf1883e",
                  "parentUUID": "f743aee1-ea10-423b-874b-f43ab808e3ec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "91d87986-1172-43e8-8344-beef0161425e",
                "97bb1c2f-3950-4009-b258-b3ec764647be",
                "7824e8f8-7758-4499-9992-0f4c59ab8985",
                "d4168de1-6316-4a7e-ad32-29941bf1883e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "623e1c4a-6535-4210-aa4e-5285d8bff211",
              "title": "Testing delete post",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\postService.js",
              "file": "\\test\\services\\postService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "successful post delete",
                  "fullTitle": "Post service test Testing delete post successful post delete",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { success } = await postServices.deletePost(id, userId);\nexpect(success).to.equal(true);",
                  "err": {},
                  "uuid": "e07829ba-3bfb-4f58-a632-3fdc445939af",
                  "parentUUID": "623e1c4a-6535-4210-aa4e-5285d8bff211",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "unathorized user",
                  "fullTitle": "Post service test Testing delete post unathorized user",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userId = \"578a5fccf267fc3a463b35e\";\nconst { success, error } = await postServices.deletePost(id, userId);\nexpect(success).to.equal(false);\nexpect(error).to.equal(postErrors.NOT_AUTHOR);",
                  "err": {},
                  "uuid": "171e3d39-7e79-4cc3-926a-0021b73e893c",
                  "parentUUID": "623e1c4a-6535-4210-aa4e-5285d8bff211",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "post not found",
                  "fullTitle": "Post service test Testing delete post post not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "PostRepository.exists = async (id, fields) => {\n  return { success: false };\n};\nconst { success, error } = await postServices.deletePost(id, userId);\nexpect(success).to.equal(false);\nexpect(error).to.equal(postErrors.POST_NOT_FOUND);",
                  "err": {},
                  "uuid": "efae27be-59b0-4470-a726-6fb39d348bda",
                  "parentUUID": "623e1c4a-6535-4210-aa4e-5285d8bff211",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e07829ba-3bfb-4f58-a632-3fdc445939af",
                "171e3d39-7e79-4cc3-926a-0021b73e893c",
                "efae27be-59b0-4470-a726-6fb39d348bda"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "4ff62108-95ff-4465-b623-d54e9b268954",
              "title": "addVote function ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\postService.js",
              "file": "\\test\\services\\postService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test ",
                  "fullTitle": "Post service test addVote function  first test ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let user = {\n  votePost: [\n    {\n      posts: \"1\",\n      postVoteStatus: 1,\n    },\n    {\n      posts: \"2\",\n      postVoteStatus: -1,\n    },\n    {\n      posts: \"4\",\n      postVoteStatus: -1,\n    },\n  ],\n  save: async () => {},\n};\nlet author = {\n  postKarma: 0,\n  save: async () => {},\n};\nconst PostRepository = {\n  updateVotesCount: async (data) => {\n    return { success: true };\n  },\n};\nconst postservices = new PostService({ PostRepository });\nconst result = await postservices.addVote(user, \"2\", 1, 0, author);\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "da759e9e-b9fb-4319-8880-1da6868ef84d",
                  "parentUUID": "4ff62108-95ff-4465-b623-d54e9b268954",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test",
                  "fullTitle": "Post service test addVote function  second test",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let user = {\n  votePost: [\n    {\n      posts: \"1\",\n      postVoteStatus: 1,\n    },\n    {\n      posts: \"2\",\n      postVoteStatus: -1,\n    },\n    {\n      posts: \"4\",\n      postVoteStatus: -1,\n    },\n  ],\n  save: async () => {},\n};\nlet author = {\n  postKarma: 0,\n  save: async () => {},\n};\nconst PostRepository = {\n  updateVotesCount: async (data) => {\n    return { success: true };\n  },\n};\nconst postservices = new PostService({ PostRepository });\nconst result = await postservices.addVote(user, \"5\", 1, 0, author);\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "99272ba7-7f1f-44e0-89be-2a34b6d08971",
                  "parentUUID": "4ff62108-95ff-4465-b623-d54e9b268954",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test ",
                  "fullTitle": "Post service test addVote function  thrid test ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let user = {\n  votePost: [\n    {\n      posts: \"1\",\n      postVoteStatus: 1,\n    },\n    {\n      posts: \"2\",\n      postVoteStatus: -1,\n    },\n    {\n      posts: \"4\",\n      postVoteStatus: -1,\n    },\n  ],\n  save: async () => {},\n};\nlet author = {\n  postKarma: 0,\n  save: async () => {},\n};\nconst PostRepository = {\n  updateVotesCount: async (data) => {\n    return { success: true };\n  },\n};\nconst postservices = new PostService({ PostRepository });\nconst result = await postservices.addVote(user, \"2\", -1, 0, author);\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "2e7f3110-5154-4fca-a9cd-0ba43118feae",
                  "parentUUID": "4ff62108-95ff-4465-b623-d54e9b268954",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fourth test ",
                  "fullTitle": "Post service test addVote function  fourth test ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let user = {\n  votePost: [\n    {\n      posts: \"1\",\n      postVoteStatus: 1,\n    },\n    {\n      posts: \"2\",\n      postVoteStatus: -1,\n    },\n    {\n      posts: \"4\",\n      postVoteStatus: -1,\n    },\n  ],\n  save: async () => {},\n};\nlet author = {\n  postKarma: 0,\n  save: async () => {},\n};\nconst PostRepository = {\n  updateVotesCount: async (data) => {\n    return { success: true };\n  },\n};\nconst postservices = new PostService({ PostRepository });\nconst result = await postservices.addVote(user, \"1\", 0, 0, author);\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "21699bc2-c6ed-4af2-8300-bac6de91d61c",
                  "parentUUID": "4ff62108-95ff-4465-b623-d54e9b268954",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fifth test ",
                  "fullTitle": "Post service test addVote function  fifth test ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let user = {\n  votePost: [\n    {\n      posts: \"1\",\n      postVoteStatus: 1,\n    },\n    {\n      posts: \"2\",\n      postVoteStatus: 0,\n    },\n    {\n      posts: \"4\",\n      postVoteStatus: -1,\n    },\n  ],\n  save: async () => {},\n};\nlet author = {\n  postKarma: 0,\n  save: async () => {},\n};\nconst PostRepository = {\n  updateVotesCount: async (data) => {\n    return { success: true };\n  },\n};\nconst postservices = new PostService({ PostRepository });\nconst result = await postservices.addVote(user, \"2\", 1, 0, author);\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "741fb10f-6dcb-47cb-96dc-ecf7b8721765",
                  "parentUUID": "4ff62108-95ff-4465-b623-d54e9b268954",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da759e9e-b9fb-4319-8880-1da6868ef84d",
                "99272ba7-7f1f-44e0-89be-2a34b6d08971",
                "2e7f3110-5154-4fca-a9cd-0ba43118feae",
                "21699bc2-c6ed-4af2-8300-bac6de91d61c",
                "741fb10f-6dcb-47cb-96dc-ecf7b8721765"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "27ebac4b-e0ec-43ea-baa5-b1518ea9ff78",
              "title": "savePost function ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\postService.js",
              "file": "\\test\\services\\postService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test ",
                  "fullTitle": "Post service test savePost function  first test ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let user = {\n  saved: [\n    {\n      savedPost: \"1\",\n    },\n    {\n      savedPost: \"2\",\n    },\n    {\n      savedPost: \"4\",\n    },\n  ],\n  save: async () => {},\n};\nconst postservices = new PostService({});\nconst result = await postservices.savePost(user, \"1\");\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "0dc8d2ad-2801-4a1e-a21a-44bcdab389bf",
                  "parentUUID": "27ebac4b-e0ec-43ea-baa5-b1518ea9ff78",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test ",
                  "fullTitle": "Post service test savePost function  second test ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let user = {\n  saved: [\n    {\n      savedPost: \"1\",\n    },\n    {\n      savedPost: \"2\",\n    },\n    {\n      savedPost: \"4\",\n    },\n  ],\n  save: async () => {},\n};\nconst postservices = new PostService({});\nconst result = await postservices.savePost(user, \"3\");\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "e1611eff-1649-45a3-8731-87a7f6ed1505",
                  "parentUUID": "27ebac4b-e0ec-43ea-baa5-b1518ea9ff78",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0dc8d2ad-2801-4a1e-a21a-44bcdab389bf",
                "e1611eff-1649-45a3-8731-87a7f6ed1505"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "95799b73-f671-4449-8abb-9b751f595e6a",
              "title": "unSavePost function ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\postService.js",
              "file": "\\test\\services\\postService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test ",
                  "fullTitle": "Post service test unSavePost function  first test ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Array.prototype.pull = function (elem) {\n  var i = this.indexOf(elem);\n  if (i === -1)\n    //w  w w  . j a  v a  2s .  c  o  m\n    return;\n  return this.splice(i, 1);\n};\nlet user = {\n  saved: [\n    {\n      savedPost: \"1\",\n    },\n    {\n      savedPost: \"2\",\n    },\n    {\n      savedPost: \"4\",\n    },\n  ],\n  save: async () => {},\n};\nconst postservices = new PostService({});\nconst result = await postservices.unSavePost(user, \"1\");\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "0f8b39e0-f1f8-405a-8d76-ef6a2721aab6",
                  "parentUUID": "95799b73-f671-4449-8abb-9b751f595e6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test ",
                  "fullTitle": "Post service test unSavePost function  second test ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let user = {\n  saved: [\n    {\n      savedPost: \"1\",\n    },\n    {\n      savedPost: \"2\",\n    },\n    {\n      savedPost: \"4\",\n    },\n  ],\n  save: async () => {},\n};\nconst postservices = new PostService({});\nconst result = await postservices.unSavePost(user, \"3\");\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "cabb5fb5-cd29-421c-b636-557cc0820c9b",
                  "parentUUID": "95799b73-f671-4449-8abb-9b751f595e6a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0f8b39e0-f1f8-405a-8d76-ef6a2721aab6",
                "cabb5fb5-cd29-421c-b636-557cc0820c9b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "abe52fc9-2736-4238-af46-5ea406f5c728",
              "title": "hidePost function ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\postService.js",
              "file": "\\test\\services\\postService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test ",
                  "fullTitle": "Post service test hidePost function  first test ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let user = {\n  hidden: [\"1\", \"2\", \"4\"],\n  save: async () => {},\n};\nconst postservices = new PostService({});\nconst result = await postservices.hidePost(user, \"1\");\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "c8fec961-9c7c-4e46-bf36-4de30a522e65",
                  "parentUUID": "abe52fc9-2736-4238-af46-5ea406f5c728",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test ",
                  "fullTitle": "Post service test hidePost function  second test ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let user = {\n  hidden: [\"1\", \"2\", \"4\"],\n  save: async () => {},\n};\nconst postservices = new PostService({});\nconst result = await postservices.hidePost(user, \"3\");\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "66a6aa49-0d1f-440d-a399-9af19414f239",
                  "parentUUID": "abe52fc9-2736-4238-af46-5ea406f5c728",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c8fec961-9c7c-4e46-bf36-4de30a522e65",
                "66a6aa49-0d1f-440d-a399-9af19414f239"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "06f3b7b9-b1dc-4773-857c-af0b426ba635",
              "title": "unHidePost function ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\postService.js",
              "file": "\\test\\services\\postService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test ",
                  "fullTitle": "Post service test unHidePost function  first test ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Array.prototype.pull = function (elem) {\n  var i = this.indexOf(elem);\n  if (i === -1)\n    //w  w w  . j a  v a  2s .  c  o  m\n    return;\n  return this.splice(i, 1);\n};\nlet user = {\n  hidden: [\"1\", \"2\", \"4\"],\n  save: async () => {},\n};\nconst postservices = new PostService({});\nconst result = await postservices.unHidePost(user, \"1\");\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "e365ecc7-97e9-4340-bd41-f0d2bafb3741",
                  "parentUUID": "06f3b7b9-b1dc-4773-857c-af0b426ba635",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test ",
                  "fullTitle": "Post service test unHidePost function  second test ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let user = {\n  hidden: [\"1\", \"2\", \"4\"],\n  save: async () => {},\n};\nconst postservices = new PostService({});\nconst result = await postservices.unHidePost(user, \"3\");\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "a93b6219-e396-4345-b82c-b56f56810bd6",
                  "parentUUID": "06f3b7b9-b1dc-4773-857c-af0b426ba635",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e365ecc7-97e9-4340-bd41-f0d2bafb3741",
                "a93b6219-e396-4345-b82c-b56f56810bd6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "90dd8bb5-334a-402b-ac4a-f49640b0bf71",
              "title": "filterPosts function ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\postService.js",
              "file": "\\test\\services\\postService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test ",
                  "fullTitle": "Post service test filterPosts function  first test ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let user = {\n  hidden: [\"1\", \"2\", \"4\"],\n  save: async () => {},\n};\nposts = [\n  {\n    _id: \"1\",\n  },\n  {\n    _id: \"2\",\n  },\n  {\n    _id: \"3\",\n  },\n];\ncomments = [\n  {\n    _id: \"1\",\n  },\n  {\n    _id: \"2\",\n  },\n  {\n    _id: \"3\",\n  },\n];\nconst postservices = new PostService({});\nconst result = await postservices.filterPosts(posts, comments);\nexpect(result.length).to.equal(0);",
                  "err": {},
                  "uuid": "bce3c0ca-9898-4bf9-a7c4-088561193769",
                  "parentUUID": "90dd8bb5-334a-402b-ac4a-f49640b0bf71",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bce3c0ca-9898-4bf9-a7c4-088561193769"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "9c1f8d03-4b3b-4de9-8e37-5c058e352e63",
              "title": "findPostById function ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\postService.js",
              "file": "\\test\\services\\postService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test ",
                  "fullTitle": "Post service test findPostById function  first test ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const PostRepository = {\n  getPostwithAuthor: async (data) => {\n    return { success: true, doc: [] };\n  },\n};\nconst postservices = new PostService({ PostRepository });\nconst result = await postservices.findPostById(\"1\");\nexpect(result.success).to.equal(true);",
                  "err": {},
                  "uuid": "480e6710-0e9d-44a2-a9aa-91ca48bf05d5",
                  "parentUUID": "9c1f8d03-4b3b-4de9-8e37-5c058e352e63",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test ",
                  "fullTitle": "Post service test findPostById function  second test ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const PostRepository = {\n  getPostwithAuthor: async (data) => {\n    return { success: false, doc: [] };\n  },\n};\nconst postservices = new PostService({ PostRepository });\nconst result = await postservices.findPostById(\"1\");\nexpect(result.success).to.equal(false);",
                  "err": {},
                  "uuid": "74d592f2-22b7-4da6-811a-16af647fbd12",
                  "parentUUID": "9c1f8d03-4b3b-4de9-8e37-5c058e352e63",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "480e6710-0e9d-44a2-a9aa-91ca48bf05d5",
                "74d592f2-22b7-4da6-811a-16af647fbd12"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "72cbc68b-6877-4898-adc7-a5da39f023b4",
              "title": "Is author or mod",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\postService.js",
              "file": "\\test\\services\\postService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "author",
                  "fullTitle": "Post service test Is author or mod author",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await postservices.isAuthOrMod(postId, userId);\nexpect(result.success).to.equal(true);",
                  "err": {},
                  "uuid": "9fd1b1ee-3d28-4292-a0ac-b480f6136acf",
                  "parentUUID": "72cbc68b-6877-4898-adc7-a5da39f023b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "moderator",
                  "fullTitle": "Post service test Is author or mod moderator",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userId = \"000a5fccf267fc3a463b35e4\";\nconst result = await postservices.isAuthOrMod(postId, userId);\nexpect(result.success).to.equal(true);",
                  "err": {},
                  "uuid": "51c11a9e-3898-4ff8-b352-ea08c3d24aa7",
                  "parentUUID": "72cbc68b-6877-4898-adc7-a5da39f023b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "not author or moderator 1",
                  "fullTitle": "Post service test Is author or mod not author or moderator 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "PostRepository.findById = async (data) => {\n  return {\n    success: true,\n    doc: {\n      author: ObjectId(\"578a5fccf267fc3a463b35e4\"),\n      owner: ObjectId(\"123a5fccf267fc3a463b35e3\"),\n      ownerType: \"User\",\n    },\n  };\n};\nconst result = await postservices.isAuthOrMod(postId, userId);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(postErrors.NOT_AUTHOR_OR_MOD);",
                  "err": {},
                  "uuid": "3a5e4d58-5e41-4de7-9d8d-9871595e4354",
                  "parentUUID": "72cbc68b-6877-4898-adc7-a5da39f023b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "not author or moderator 2",
                  "fullTitle": "Post service test Is author or mod not author or moderator 2",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "SubredditRepository.moderator = async () => {\n  return { success: false };\n};\nconst result = await postservices.isAuthOrMod(postId, userId);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(postErrors.NOT_AUTHOR_OR_MOD);",
                  "err": {},
                  "uuid": "ff400c34-5221-414e-9324-ba79cc47768a",
                  "parentUUID": "72cbc68b-6877-4898-adc7-a5da39f023b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "post not found",
                  "fullTitle": "Post service test Is author or mod post not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "PostRepository.findById = async () => {\n  return { success: false };\n};\nconst result = await postservices.isAuthOrMod(postId, userId);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(postErrors.POST_NOT_FOUND);",
                  "err": {},
                  "uuid": "65d833e0-fbde-4054-9a55-b9325a417847",
                  "parentUUID": "72cbc68b-6877-4898-adc7-a5da39f023b4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9fd1b1ee-3d28-4292-a0ac-b480f6136acf",
                "51c11a9e-3898-4ff8-b352-ea08c3d24aa7",
                "3a5e4d58-5e41-4de7-9d8d-9871595e4354",
                "ff400c34-5221-414e-9324-ba79cc47768a",
                "65d833e0-fbde-4054-9a55-b9325a417847"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "70dd081d-4215-4260-b8ad-ebff1b058370",
              "title": "Is author",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\postService.js",
              "file": "\\test\\services\\postService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "author",
                  "fullTitle": "Post service test Is author author",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await postservices.isAuth(postId, userId);\nexpect(result.success).to.equal(true);",
                  "err": {},
                  "uuid": "92acbfe9-4ebb-4f90-a4e0-ff16e6fe4f56",
                  "parentUUID": "70dd081d-4215-4260-b8ad-ebff1b058370",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "not author",
                  "fullTitle": "Post service test Is author not author",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userId = \"000a5fccf267fc3a463b35e4\";\nconst result = await postservices.isAuth(postId, userId);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(postErrors.NOT_AUTHOR);",
                  "err": {},
                  "uuid": "8e1f48ee-2859-4b52-862d-bc8f4a557ce7",
                  "parentUUID": "70dd081d-4215-4260-b8ad-ebff1b058370",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "post not found",
                  "fullTitle": "Post service test Is author post not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "PostRepository.findById = async () => {\n  return { success: false };\n};\nconst result = await postservices.isAuth(postId, userId);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(postErrors.POST_NOT_FOUND);",
                  "err": {},
                  "uuid": "06defa5c-6c44-4741-87ab-e1a34a574606",
                  "parentUUID": "70dd081d-4215-4260-b8ad-ebff1b058370",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "92acbfe9-4ebb-4f90-a4e0-ff16e6fe4f56",
                "8e1f48ee-2859-4b52-862d-bc8f4a557ce7",
                "06defa5c-6c44-4741-87ab-e1a34a574606"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "fdc09e02-137d-44c8-8734-39c0dec5fac3",
              "title": "Is mod",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\postService.js",
              "file": "\\test\\services\\postService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "moderator",
                  "fullTitle": "Post service test Is mod moderator",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await postservices.isMod(postId, userId);\nexpect(result.success).to.equal(true);",
                  "err": {},
                  "uuid": "647c91ef-96e9-4744-b508-fe8133123456",
                  "parentUUID": "fdc09e02-137d-44c8-8734-39c0dec5fac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "not moderator",
                  "fullTitle": "Post service test Is mod not moderator",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "SubredditRepository.moderator = async () => {\n  return { success: false };\n};\nconst result = await postservices.isMod(postId, userId);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(postErrors.NOT_MOD);",
                  "err": {},
                  "uuid": "93136af8-619f-4724-8709-ecac4689503b",
                  "parentUUID": "fdc09e02-137d-44c8-8734-39c0dec5fac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "not in subreddit",
                  "fullTitle": "Post service test Is mod not in subreddit",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "PostRepository.findById = async (data) => {\n  return {\n    success: true,\n    doc: {\n      owner: ObjectId(\"123a5fccf267fc3a463b35e3\"),\n      ownerType: \"User\",\n    },\n  };\n};\nconst result = await postservices.isMod(postId, userId);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(postErrors.OWNER_NOT_SUBREDDIT);",
                  "err": {},
                  "uuid": "18e4c0d6-e17a-496b-87a4-448f2b35e627",
                  "parentUUID": "fdc09e02-137d-44c8-8734-39c0dec5fac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "post not found",
                  "fullTitle": "Post service test Is mod post not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "PostRepository.findById = async () => {\n  return { success: false };\n};\nconst result = await postservices.isMod(postId, userId);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(postErrors.POST_NOT_FOUND);",
                  "err": {},
                  "uuid": "d28e1e59-0b27-4a7b-b923-9de136c8e892",
                  "parentUUID": "fdc09e02-137d-44c8-8734-39c0dec5fac3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "647c91ef-96e9-4744-b508-fe8133123456",
                "93136af8-619f-4724-8709-ecac4689503b",
                "18e4c0d6-e17a-496b-87a4-448f2b35e627",
                "d28e1e59-0b27-4a7b-b923-9de136c8e892"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "3e2ac98f-0f5b-411f-a00f-3a5e67fc13b9",
              "title": "post actions",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\postService.js",
              "file": "\\test\\services\\postService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "lock",
                  "fullTitle": "Post service test post actions lock",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "action = \"lock_comments\";\nawait postservices.postAction(postId, action);",
                  "err": {},
                  "uuid": "2b9b5854-1718-486b-941b-fbdff079e57b",
                  "parentUUID": "3e2ac98f-0f5b-411f-a00f-3a5e67fc13b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "unlock",
                  "fullTitle": "Post service test post actions unlock",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "action = \"unlock_comments\";\nawait postservices.postAction(postId, action);",
                  "err": {},
                  "uuid": "3065d4ba-763f-45cb-a92d-8e97627244b3",
                  "parentUUID": "3e2ac98f-0f5b-411f-a00f-3a5e67fc13b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "nsfw",
                  "fullTitle": "Post service test post actions nsfw",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "action = \"mark_nsfw\";\nawait postservices.postAction(postId, action);",
                  "err": {},
                  "uuid": "58605f45-4ad3-4078-891c-60877bfff1f1",
                  "parentUUID": "3e2ac98f-0f5b-411f-a00f-3a5e67fc13b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "spoiler",
                  "fullTitle": "Post service test post actions spoiler",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "action = \"spoiler\";\nawait postservices.postAction(postId, action);",
                  "err": {},
                  "uuid": "bcb363bc-2b04-4e62-9638-dc86e4807ca6",
                  "parentUUID": "3e2ac98f-0f5b-411f-a00f-3a5e67fc13b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2b9b5854-1718-486b-941b-fbdff079e57b",
                "3065d4ba-763f-45cb-a92d-8e97627244b3",
                "58605f45-4ad3-4078-891c-60877bfff1f1",
                "bcb363bc-2b04-4e62-9638-dc86e4807ca6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "63026480-3497-4d51-927a-8582b1ab8387",
              "title": "mod actions",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\postService.js",
              "file": "\\test\\services\\postService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "modAction",
                  "fullTitle": "Post service test mod actions modAction",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "action = \"lock_comments\";\nawait postservices.modAction(postId, action);",
                  "err": {},
                  "uuid": "0c6760f2-dba8-4850-8f19-7fb6cf2588bb",
                  "parentUUID": "63026480-3497-4d51-927a-8582b1ab8387",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c6760f2-dba8-4850-8f19-7fb6cf2588bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "d77601b4-8196-4c91-8789-8afa6e47e436",
              "title": "spam",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\postService.js",
              "file": "\\test\\services\\postService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "unspam success",
                  "fullTitle": "Post service test spam unspam success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "dir = -1;\nconst result = await postservices.spam(postId, userId, dir);\nexpect(result.success).to.equal(true);",
                  "err": {},
                  "uuid": "3690cbcd-59c2-456a-ad31-4d8ed1d46e73",
                  "parentUUID": "d77601b4-8196-4c91-8789-8afa6e47e436",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "spam fail",
                  "fullTitle": "Post service test spam spam fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "dir = 1;\nconst result = await postservices.spam(postId, userId, dir);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(postErrors.ACTION_ALREADY_DONE);",
                  "err": {},
                  "uuid": "56ed9e77-02ba-4f4c-9602-7f891a230bfd",
                  "parentUUID": "d77601b4-8196-4c91-8789-8afa6e47e436",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "unspam fail",
                  "fullTitle": "Post service test spam unspam fail",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "PostRepository.findById = async (data) => {\n  return {\n    success: true,\n    doc: {\n      spammedBy: [\"123a5fccf267fc3a463b35e4\"],\n      spamCount: 4,\n    },\n  };\n};\ndir = -1;\nconst result = await postservices.spam(postId, userId, dir);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(postErrors.ACTION_ALREADY_DONE);",
                  "err": {},
                  "uuid": "999ec54d-b592-42eb-a52d-28c8a7cb029c",
                  "parentUUID": "d77601b4-8196-4c91-8789-8afa6e47e436",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "spam success",
                  "fullTitle": "Post service test spam spam success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "dir = 1;\nconst result = await postservices.spam(postId, userId, dir);\nexpect(result.success).to.equal(true);",
                  "err": {},
                  "uuid": "2489a7e2-b1f6-4c21-a0a4-4dcaf1d8e7e1",
                  "parentUUID": "d77601b4-8196-4c91-8789-8afa6e47e436",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "post not found",
                  "fullTitle": "Post service test spam post not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "PostRepository.findById = async (data) => {\n  return { success: false };\n};\nconst result = await postservices.spam(postId, userId, dir);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(postErrors.POST_NOT_FOUND);",
                  "err": {},
                  "uuid": "8e07504a-c121-4832-b188-dcf3df5c3861",
                  "parentUUID": "d77601b4-8196-4c91-8789-8afa6e47e436",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3690cbcd-59c2-456a-ad31-4d8ed1d46e73",
                "56ed9e77-02ba-4f4c-9602-7f891a230bfd",
                "999ec54d-b592-42eb-a52d-28c8a7cb029c",
                "2489a7e2-b1f6-4c21-a0a4-4dcaf1d8e7e1",
                "8e07504a-c121-4832-b188-dcf3df5c3861"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "41e97f2f-30d6-4038-9294-69da03b8eb21",
              "title": "add file",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\postService.js",
              "file": "\\test\\services\\postService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "image",
                  "fullTitle": "Post service test add file image",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "kind = \"image\";\nconst result = await postservices.addFile(postId, kind, file);",
                  "err": {},
                  "uuid": "0bcb73dd-b4b5-4233-ade7-2cebb0d1cd71",
                  "parentUUID": "41e97f2f-30d6-4038-9294-69da03b8eb21",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "video",
                  "fullTitle": "Post service test add file video",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "kind = \"video\";\nconst result = await postservices.addFile(postId, kind, file);",
                  "err": {},
                  "uuid": "ea0b493a-87e2-48c8-a2f4-62e2afd3d2d9",
                  "parentUUID": "41e97f2f-30d6-4038-9294-69da03b8eb21",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0bcb73dd-b4b5-4233-ade7-2cebb0d1cd71",
                "ea0b493a-87e2-48c8-a2f4-62e2afd3d2d9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "9bffa2ee-6f92-4836-8f81-73c4413bf609",
          "title": "ser service test",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\searchService.js",
          "file": "\\test\\services\\searchService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "posts",
              "fullTitle": "ser service test posts",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "type = \"posts\";\nawait searchServices.search(q, type, page, limit, sort, time, currentUser);",
              "err": {},
              "uuid": "9cbe1443-b418-4ad0-9cea-caaa15e71bf8",
              "parentUUID": "9bffa2ee-6f92-4836-8f81-73c4413bf609",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "comments",
              "fullTitle": "ser service test comments",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "type = \"comments\";\nawait searchServices.search(q, type, page, limit, sort, time, currentUser);",
              "err": {},
              "uuid": "2b1ab009-127e-4975-8f88-42547356faef",
              "parentUUID": "9bffa2ee-6f92-4836-8f81-73c4413bf609",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "posts",
              "fullTitle": "ser service test posts",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "type = \"communities\";\nawait searchServices.search(q, type, page, limit, sort, time, currentUser);",
              "err": {},
              "uuid": "5ec376dc-9424-4518-b9b7-cd49397ec105",
              "parentUUID": "9bffa2ee-6f92-4836-8f81-73c4413bf609",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "posts",
              "fullTitle": "ser service test posts",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "type = \"people\";\nawait searchServices.search(q, type, page, limit, sort, time, currentUser);",
              "err": {},
              "uuid": "ea25b6f8-ab0c-46ac-beb0-f2f37c22348e",
              "parentUUID": "9bffa2ee-6f92-4836-8f81-73c4413bf609",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9cbe1443-b418-4ad0-9cea-caaa15e71bf8",
            "2b1ab009-127e-4975-8f88-42547356faef",
            "5ec376dc-9424-4518-b9b7-cd49397ec105",
            "ea25b6f8-ab0c-46ac-beb0-f2f37c22348e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "1fd07b9d-e226-49ad-9c58-c8a5931d781f",
          "title": "Subreddit Test",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\subredditService.js",
          "file": "\\test\\services\\subredditService.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4f6cd5a2-0464-4df2-a786-9572e66e7ad9",
              "title": "Subreddit services Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\subredditService.js",
              "file": "\\test\\services\\subredditService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "f52d22da-98cd-4189-a1ea-b3eb0b6e4f5d",
                  "title": "createSubreddit function ",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\subredditService.js",
                  "file": "\\test\\services\\subredditService.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "first test",
                      "fullTitle": "Subreddit Test Subreddit services Test createSubreddit function  first test",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  createOne: async (userData) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"10\",\n      },\n    };\n    return response;\n  },\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  subscribe: async (subredditId, userId) => {\n    return true;\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: false,\n      data: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  subscribe: async (subredditId, userId) => {\n    return true;\n  },\n  disInvite: async (userId, subredditName) => {\n    return true;\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nlet userName = \"khaled\";\nlet data = {\n  owner: userName,\n  fixedName: \"subreddit\",\n  type: \"Public\",\n  nsfw: true,\n};\nlet profilePicture = \"profile.png\";\nconst result = await subredditServices.createSubreddit(\n  data,\n  userName,\n  profilePicture\n);\nexpect(result.data._id).to.equal(\"10\");",
                      "err": {},
                      "uuid": "cb7f3d7d-203b-494b-87d4-778c23217df2",
                      "parentUUID": "f52d22da-98cd-4189-a1ea-b3eb0b6e4f5d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "second test (fail) ",
                      "fullTitle": "Subreddit Test Subreddit services Test createSubreddit function  second test (fail) ",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  createOne: async (userData) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"10\",\n      },\n    };\n    return response;\n  },\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      data: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nlet userName = \"khaled\";\nlet data = {\n  owner: userName,\n  fixedName: \"subreddit\",\n  type: \"Public\",\n  nsfw: true,\n};\nlet profilePicture = \"profile.png\";\nconst result = await subredditServices.createSubreddit(\n  data,\n  userName,\n  profilePicture\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.ALREADY_EXISTS);",
                      "err": {},
                      "uuid": "4ef2712d-e50d-48db-a389-f9ff8efa2fb0",
                      "parentUUID": "f52d22da-98cd-4189-a1ea-b3eb0b6e4f5d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Third test (fail) ",
                      "fullTitle": "Subreddit Test Subreddit services Test createSubreddit function  Third test (fail) ",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  createOne: async (userData) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"10\",\n      },\n    };\n    return response;\n  },\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return {\n      success: false,\n      msg: \"Invalid data: A subreddit name must have more or equal then 2 characters\",\n    };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: false,\n      data: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nlet userName = \"khaled\";\nlet data = {\n  owner: userName,\n  fixedName: \"s\",\n  type: \"Public\",\n  nsfw: true,\n};\nlet profilePicture = \"profile.png\";\nconst result = await subredditServices.createSubreddit(\n  data,\n  userName,\n  profilePicture\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.MONGO_ERR);\nexpect(result.msg).to.equal(\n  \"Invalid data: A subreddit name must have more or equal then 2 characters\"\n);",
                      "err": {},
                      "uuid": "4fa2c31e-44e8-4028-a879-70f356d136e0",
                      "parentUUID": "f52d22da-98cd-4189-a1ea-b3eb0b6e4f5d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "cb7f3d7d-203b-494b-87d4-778c23217df2",
                    "4ef2712d-e50d-48db-a389-f9ff8efa2fb0",
                    "4fa2c31e-44e8-4028-a879-70f356d136e0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                },
                {
                  "uuid": "45e422ff-8a2f-482f-9681-3525b663c511",
                  "title": "retrieveSubreddit function ",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\subredditService.js",
                  "file": "\\test\\services\\subredditService.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "first test",
                      "fullTitle": "Subreddit Test Subreddit services Test retrieveSubreddit function  first test",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n};\nconst SubredditRepository = {\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.retrieveSubreddit(\n  \"1\",\n  \"subreddit\",\n  true\n);\nexpect(result.data._id).to.equal(\"10\");\nexpect(result.data.fixedName).to.equal(\"subreddit\");\nexpect(result.data.nsfw).to.equal(true);",
                      "err": {},
                      "uuid": "9a6f4c83-f76a-4178-82b1-c57b071a0467",
                      "parentUUID": "45e422ff-8a2f-482f-9681-3525b663c511",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "second test (fail)",
                      "fullTitle": "Subreddit Test Subreddit services Test retrieveSubreddit function  second test (fail)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n};\nconst SubredditRepository = {\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: false,\n      error: subredditErrors.SUBREDDIT_NOT_FOUND,\n    };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.retrieveSubreddit(\n  \"1\",\n  \"subreddit\",\n  true\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.SUBREDDIT_NOT_FOUND);",
                      "err": {},
                      "uuid": "e5089d0b-532c-46b9-b256-85aeade01e42",
                      "parentUUID": "45e422ff-8a2f-482f-9681-3525b663c511",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9a6f4c83-f76a-4178-82b1-c57b071a0467",
                    "e5089d0b-532c-46b9-b256-85aeade01e42"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                },
                {
                  "uuid": "baef8f6f-45c9-4a10-ab2a-846731f5e78a",
                  "title": "deleteSubreddit function ",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\subredditService.js",
                  "file": "\\test\\services\\subredditService.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "first test",
                      "fullTitle": "Subreddit Test Subreddit services Test deleteSubreddit function  first test",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n};\nconst SubredditRepository = {\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isOwner: async (subredditName, userID) => {\n    return { success: true, doc: { fixedName: \"subreddit\" } };\n  },\n  delete: async (subredditName) => {\n    return { success: true, doc: { fixedName: \"subreddit\" } };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.deleteSubreddit(\n  \"subreddit\",\n  \"1\"\n);\nexpect(result.success).to.equal(true);",
                      "err": {},
                      "uuid": "4978ba7d-5afd-4910-a26a-5f95e9eb0ef2",
                      "parentUUID": "baef8f6f-45c9-4a10-ab2a-846731f5e78a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "second test (fail)",
                      "fullTitle": "Subreddit Test Subreddit services Test deleteSubreddit function  second test (fail)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n};\nconst SubredditRepository = {\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: false,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isOwner: async (subredditName, userID) => {\n    return { success: true, doc: { fixedName: \"subreddit\" } };\n  },\n  delete: async (subredditName) => {\n    return { success: true, doc: { fixedName: \"subreddit\" } };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.deleteSubreddit(\n  \"subreddit\",\n  \"1\"\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.SUBREDDIT_NOT_FOUND);",
                      "err": {},
                      "uuid": "2910f102-1215-4a97-878d-cc9fdc2f9d38",
                      "parentUUID": "baef8f6f-45c9-4a10-ab2a-846731f5e78a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "third test (fail)",
                      "fullTitle": "Subreddit Test Subreddit services Test deleteSubreddit function  third test (fail)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n};\nconst SubredditRepository = {\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isOwner: async (subredditName, userID) => {\n    return { success: false, error: mongoErrors.NOT_FOUND };\n  },\n  delete: async (subredditName) => {\n    return { success: false, doc: { fixedName: \"subreddit\" } };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.deleteSubreddit(\n  \"subreddit\",\n  \"1\"\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.NOT_OWNER);",
                      "err": {},
                      "uuid": "2c5ae08f-2895-4640-b79d-c232b85dddc9",
                      "parentUUID": "baef8f6f-45c9-4a10-ab2a-846731f5e78a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "fourth test (fail)",
                      "fullTitle": "Subreddit Test Subreddit services Test deleteSubreddit function  fourth test (fail)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n};\nconst SubredditRepository = {\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isOwner: async (subredditName, userID) => {\n    return { success: true, error: mongoErrors.NOT_FOUND };\n  },\n  delete: async (subredditName) => {\n    return {\n      success: false,\n      error: mongoErrors.UNKOWN,\n      msg: \"mongo error\",\n    };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.deleteSubreddit(\n  \"subreddit\",\n  \"1\"\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(mongoErrors.UNKOWN);\nexpect(result.msg).to.equal(\"mongo error\");",
                      "err": {},
                      "uuid": "302d1113-438e-4e9f-8f11-e93dba412bbc",
                      "parentUUID": "baef8f6f-45c9-4a10-ab2a-846731f5e78a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4978ba7d-5afd-4910-a26a-5f95e9eb0ef2",
                    "2910f102-1215-4a97-878d-cc9fdc2f9d38",
                    "2c5ae08f-2895-4640-b79d-c232b85dddc9",
                    "302d1113-438e-4e9f-8f11-e93dba412bbc"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                },
                {
                  "uuid": "d3df01af-abbd-469c-9e26-a81aefb29d56",
                  "title": "updateSubredit function ",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\subredditService.js",
                  "file": "\\test\\services\\subredditService.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "first test",
                      "fullTitle": "Subreddit Test Subreddit services Test updateSubredit function  first test",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n};\nconst SubredditRepository = {\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return { success: true, doc: { moderators: [{ id: \"1\" }] } };\n  },\n  update: async (subredditName, data) => {\n    return { success: true, doc: { _id: \"10\", nsfw: false } };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.updateSubreddit(\n  \"subreddit\",\n  \"1\",\n  {\n    nsfw: false,\n  }\n);\nexpect(result.success).to.equal(true);\nexpect(result.data._id).to.equal(\"10\");\nexpect(result.data.nsfw).to.equal(false);",
                      "err": {},
                      "uuid": "5f990c68-b55a-43cf-bdb4-5288860f3ae1",
                      "parentUUID": "d3df01af-abbd-469c-9e26-a81aefb29d56",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "second test (fail)",
                      "fullTitle": "Subreddit Test Subreddit services Test updateSubredit function  second test (fail)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n};\nconst SubredditRepository = {\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: false,\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return { success: true, doc: { moderators: [{ id: \"1\" }] } };\n  },\n  update: async (subredditName, data) => {\n    return { success: true, doc: { _id: \"10\", nsfw: false } };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.updateSubreddit(\n  \"subreddit\",\n  \"1\",\n  {\n    nsfw: false,\n  }\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.SUBREDDIT_NOT_FOUND);",
                      "err": {},
                      "uuid": "e3f05580-5030-44ec-bf61-a0db5de3c06f",
                      "parentUUID": "d3df01af-abbd-469c-9e26-a81aefb29d56",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "third test (fail)",
                      "fullTitle": "Subreddit Test Subreddit services Test updateSubredit function  third test (fail)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n};\nconst SubredditRepository = {\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return { success: false };\n  },\n  update: async (subredditName, data) => {\n    return { success: true, doc: { _id: \"10\", nsfw: false } };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.updateSubreddit(\n  \"subreddit2\",\n  \"1\",\n  {\n    nsfw: false,\n  }\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.NOT_MODERATOR);",
                      "err": {},
                      "uuid": "6cd7d5e9-0b00-4809-8d26-c5659fb15639",
                      "parentUUID": "d3df01af-abbd-469c-9e26-a81aefb29d56",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "fourth test (fail)",
                      "fullTitle": "Subreddit Test Subreddit services Test updateSubredit function  fourth test (fail)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n};\nconst SubredditRepository = {\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return { success: true, doc: { moderators: [{ id: \"1\" }] } };\n  },\n  update: async (subredditName, data) => {\n    return {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n      msg: \"mongo error\",\n    };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.updateSubreddit(\n  \"subreddit2\",\n  \"1\",\n  {\n    nsfw: false,\n  }\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.MONGO_ERR);\nexpect(result.msg).to.equal(\"mongo error\");",
                      "err": {},
                      "uuid": "d813b637-737a-4b8f-970b-3ff2c2e6b7d6",
                      "parentUUID": "d3df01af-abbd-469c-9e26-a81aefb29d56",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5f990c68-b55a-43cf-bdb4-5288860f3ae1",
                    "e3f05580-5030-44ec-bf61-a0db5de3c06f",
                    "6cd7d5e9-0b00-4809-8d26-c5659fb15639",
                    "d813b637-737a-4b8f-970b-3ff2c2e6b7d6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                },
                {
                  "uuid": "a268f926-ea95-493b-996c-3b3cb11a27bf",
                  "title": "subredditsIamIn function ",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\subredditService.js",
                  "file": "\\test\\services\\subredditService.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "first test",
                      "fullTitle": "Subreddit Test Subreddit services Test subredditsIamIn function  first test",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return true;\n  },\n  getSubreddits: async (userId, type) => {\n    return {\n      success: true,\n      doc: [\n        {\n          fixedName: \"subreddit\",\n          users: {\n            find: function (val) {\n              return false;\n            },\n          },\n        },\n      ],\n    };\n  },\n};\nconst SubredditRepository = {\n  getSubreddits: async (userId, type) => {\n    return {\n      success: true,\n      doc: [\n        {\n          fixedName: \"subreddit\",\n          users: {\n            find: function (val) {\n              return false;\n            },\n          },\n        },\n      ],\n    };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.subredditsIamIn(\n  \"1\",\n  \"moderator\"\n);\nexpect(result.success).to.equal(true);\nexpect(result.data[0].fixedName).to.equal(\"subreddit\");",
                      "err": {},
                      "uuid": "3b2f53ab-6f44-4e5d-af6f-00dbdda15f9a",
                      "parentUUID": "a268f926-ea95-493b-996c-3b3cb11a27bf",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "second test",
                      "fullTitle": "Subreddit Test Subreddit services Test subredditsIamIn function  second test",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return true;\n  },\n  getSubreddits: async (userId, type) => {\n    return {\n      success: true,\n      doc: [\n        {\n          subscribed: [\n            {\n              fixedName: \"subreddit\",\n            },\n          ],\n        },\n      ],\n    };\n  },\n};\nconst SubredditRepository = {\n  getSubreddits: async (userId, type) => {\n    return {\n      success: true,\n      doc: {\n        subscribed: [\n          {\n            fixedName: \"subreddit\",\n          },\n        ],\n      },\n    };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.subredditsIamIn(\n  \"1\",\n  \"subscriber\"\n);\nexpect(result.success).to.equal(true);\nexpect(result.data[0].fixedName).to.equal(\"subreddit\");",
                      "err": {},
                      "uuid": "6cdbfa5a-6af5-4766-ad5b-c39d3ea7e56d",
                      "parentUUID": "a268f926-ea95-493b-996c-3b3cb11a27bf",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "third test",
                      "fullTitle": "Subreddit Test Subreddit services Test subredditsIamIn function  third test",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return true;\n  },\n  getSubreddits: async (userId, type) => {\n    return {\n      success: true,\n      doc: [\n        {\n          fixedName: \"subreddit\",\n        },\n      ],\n    };\n  },\n};\nconst SubredditRepository = {\n  getSubreddits: async (userId, type) => {\n    return {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n      msg: \"mongo error\",\n    };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.subredditsIamIn(\n  \"1\",\n  \"moderator\"\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.MONGO_ERR);",
                      "err": {},
                      "uuid": "39fd0902-dd4f-46c2-ad94-d99182f09e12",
                      "parentUUID": "a268f926-ea95-493b-996c-3b3cb11a27bf",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "fourth test",
                      "fullTitle": "Subreddit Test Subreddit services Test subredditsIamIn function  fourth test",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return true;\n  },\n  getSubreddits: async (userId, type) => {\n    return {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n      msg: \"mongo error\",\n    };\n  },\n};\nconst SubredditRepository = {\n  getSubreddits: async (userId, type) => {\n    return {\n      success: true,\n      doc: [\n        {\n          fixedName: \"subreddit\",\n        },\n      ],\n    };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.subredditsIamIn(\n  \"1\",\n  \"subscriber\"\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.MONGO_ERR);",
                      "err": {},
                      "uuid": "83f98b98-3727-4b7b-8ac1-e2b031e5cc19",
                      "parentUUID": "a268f926-ea95-493b-996c-3b3cb11a27bf",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "fifth test",
                      "fullTitle": "Subreddit Test Subreddit services Test subredditsIamIn function  fifth test",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return true;\n  },\n  getSubreddits: async (userId, type) => {\n    return {\n      success: true,\n      doc: [\n        {\n          fixedName: \"subreddit\",\n        },\n      ],\n    };\n  },\n};\nconst SubredditRepository = {\n  getSubreddits: async (userId, type) => {\n    return {\n      success: true,\n      doc: [\n        {\n          fixedName: \"subreddit\",\n        },\n      ],\n    };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.subredditsIamIn(\"1\", \"sub\");\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.INVALID_ENUM);",
                      "err": {},
                      "uuid": "4131ab37-d674-4d96-96cf-7f0d54aa223d",
                      "parentUUID": "a268f926-ea95-493b-996c-3b3cb11a27bf",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3b2f53ab-6f44-4e5d-af6f-00dbdda15f9a",
                    "6cdbfa5a-6af5-4766-ad5b-c39d3ea7e56d",
                    "39fd0902-dd4f-46c2-ad94-d99182f09e12",
                    "83f98b98-3727-4b7b-8ac1-e2b031e5cc19",
                    "4131ab37-d674-4d96-96cf-7f0d54aa223d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                },
                {
                  "uuid": "c1c3a8aa-a370-43d5-af60-8b76f3ddb3b3",
                  "title": "subredditsModeratedBy function ",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\subredditService.js",
                  "file": "\\test\\services\\subredditService.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "first test",
                      "fullTitle": "Subreddit Test Subreddit services Test subredditsModeratedBy function  first test",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {};\nconst SubredditRepository = {\n  getSubreddits: async (userId, type) => {\n    return {\n      success: true,\n      doc: [\n        {\n          fixedName: \"subreddit\",\n        },\n      ],\n    };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.subredditsModeratedBy(\"khaled\");\nexpect(result.success).to.equal(true);\nexpect(result.data[0].fixedName).to.equal(\"subreddit\");",
                      "err": {},
                      "uuid": "66b216b6-5626-4472-9e81-2fe5b8579dbd",
                      "parentUUID": "c1c3a8aa-a370-43d5-af60-8b76f3ddb3b3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "second test",
                      "fullTitle": "Subreddit Test Subreddit services Test subredditsModeratedBy function  second test",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {};\nconst SubredditRepository = {\n  getSubreddits: async (userId, type) => {\n    return {\n      success: false,\n      error: subredditErrors.MONGO_ERR,\n      msg: \"mongo error\",\n    };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.subredditsModeratedBy(\"fathy\");\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.MONGO_ERR);",
                      "err": {},
                      "uuid": "5e423703-f611-4b19-8648-567f5fda1c00",
                      "parentUUID": "c1c3a8aa-a370-43d5-af60-8b76f3ddb3b3",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "66b216b6-5626-4472-9e81-2fe5b8579dbd",
                    "5e423703-f611-4b19-8648-567f5fda1c00"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                },
                {
                  "uuid": "914b8cfa-6a94-44cf-a8fb-15d18ee60f6c",
                  "title": "inviteMod function ",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\subredditService.js",
                  "file": "\\test\\services\\subredditService.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "first test",
                      "fullTitle": "Subreddit Test Subreddit services Test inviteMod function  first test",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\" }] },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: false,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\" }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.inviteMod(\n  \"subreddit\",\n  \"1\",\n  \"khaled\",\n  {\n    permissions: {\n      all: false,\n      access: true,\n      config: true,\n      flair: false,\n      posts: false,\n    },\n  }\n);\nexpect(result.success).to.equal(true);",
                      "err": {},
                      "uuid": "2510befd-dff7-4bd4-b68b-e46d36a07b2a",
                      "parentUUID": "914b8cfa-6a94-44cf-a8fb-15d18ee60f6c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "second test",
                      "fullTitle": "Subreddit Test Subreddit services Test inviteMod function  second test",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: false,\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\" }] },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: false,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\" }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.inviteMod(\n  \"subreddit\",\n  \"1\",\n  \"khaled\",\n  {\n    permissions: {\n      all: false,\n      access: true,\n      config: true,\n      flair: false,\n      posts: false,\n    },\n  }\n);\nexpect(result.success).to.equal(false);",
                      "err": {},
                      "uuid": "57d0afaf-ab28-4c4e-958f-b7f4aa978676",
                      "parentUUID": "914b8cfa-6a94-44cf-a8fb-15d18ee60f6c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "third test",
                      "fullTitle": "Subreddit Test Subreddit services Test inviteMod function  third test",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: false,\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: false,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\" }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.inviteMod(\n  \"subreddit\",\n  \"1\",\n  \"khaled\",\n  {\n    permissions: {\n      all: false,\n      access: true,\n      config: true,\n      flair: false,\n      posts: false,\n    },\n  }\n);\nexpect(result.success).to.equal(false);",
                      "err": {},
                      "uuid": "484710e2-9773-468f-9812-eb3b01cce301",
                      "parentUUID": "914b8cfa-6a94-44cf-a8fb-15d18ee60f6c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "fourth test",
                      "fullTitle": "Subreddit Test Subreddit services Test inviteMod function  fourth test",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: false };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\" }] },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: false,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\" }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.inviteMod(\n  \"subreddit\",\n  \"1\",\n  \"khaled\",\n  {\n    permissions: {\n      all: false,\n      access: true,\n      config: true,\n      flair: false,\n      posts: false,\n    },\n  }\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(userErrors.USER_NOT_FOUND);",
                      "err": {},
                      "uuid": "f872db30-95a2-401c-81f2-4a980a0c603b",
                      "parentUUID": "914b8cfa-6a94-44cf-a8fb-15d18ee60f6c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "fifth test",
                      "fullTitle": "Subreddit Test Subreddit services Test inviteMod function  fifth test",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\" }] },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\" }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.inviteMod(\n  \"subreddit\",\n  \"1\",\n  \"khaled\",\n  {\n    permissions: {\n      all: false,\n      access: true,\n      config: true,\n      flair: false,\n      posts: false,\n    },\n  }\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(userErrors.ALREADY_MODERATOR);",
                      "err": {},
                      "uuid": "f674e027-6b70-41fe-a4d3-450414c879f4",
                      "parentUUID": "914b8cfa-6a94-44cf-a8fb-15d18ee60f6c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "6th test",
                      "fullTitle": "Subreddit Test Subreddit services Test inviteMod function  6th test",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\" }] },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: false,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\" }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.inviteMod(\n  \"subreddit\",\n  \"1\",\n  \"khaled\",\n  {\n    permissions: {\n      all: false,\n      access: true,\n      config: true,\n      flair: false,\n      posts: false,\n    },\n  }\n);\nexpect(result.success).to.equal(true);",
                      "err": {},
                      "uuid": "8a8bd93b-604c-45af-95a2-aecb2cc73021",
                      "parentUUID": "914b8cfa-6a94-44cf-a8fb-15d18ee60f6c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2510befd-dff7-4bd4-b68b-e46d36a07b2a",
                    "57d0afaf-ab28-4c4e-958f-b7f4aa978676",
                    "484710e2-9773-468f-9812-eb3b01cce301",
                    "f872db30-95a2-401c-81f2-4a980a0c603b",
                    "f674e027-6b70-41fe-a4d3-450414c879f4",
                    "8a8bd93b-604c-45af-95a2-aecb2cc73021"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                },
                {
                  "uuid": "84881aab-ab48-498c-aa84-5178e3333b27",
                  "title": "handleInvitation function ",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\subredditService.js",
                  "file": "\\test\\services\\subredditService.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "first test",
                      "fullTitle": "Subreddit Test Subreddit services Test handleInvitation function  first test",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return {\n      success: true,\n      doc: {\n        pendingInvitations: [\n          {\n            subredditId: \"10\",\n            permissions: {\n              all: false,\n              access: true,\n              config: true,\n              flair: false,\n              posts: false,\n            },\n          },\n        ],\n      },\n    };\n  },\n  returnInvitations: async (userId) => {\n    return {\n      success: true,\n      doc: {\n        pendingInvitations: [\n          {\n            subredditId: \"10\",\n            permissions: {\n              all: false,\n              access: true,\n              config: true,\n              flair: false,\n              posts: false,\n            },\n          },\n        ],\n      },\n    };\n  },\n  updateInvitations: async (userId, invitations) => {\n    return { success: true, doc: { _id: \"1\" } };\n  },\n};\nconst SubredditRepository = {\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: {\n        _id: {\n          equals: function (val) {\n            return false;\n          },\n        },\n        fixedName: \"subreddit\",\n        nsfw: true,\n      },\n    };\n  },\n  addModerator: async () => {\n    return { success: true, doc: { fixedName: \"subreddit\" } };\n  },\n  disInvite: async () => {\n    return true;\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.handleInvitation(\n  \"1\",\n  \"khaled\",\n  \"default.png\",\n  \"subreddit\",\n  \"accept\"\n);\nexpect(result.success).to.equal(true);",
                      "err": {},
                      "uuid": "cb1c7bd8-aae5-41be-b499-02695c25dff5",
                      "parentUUID": "84881aab-ab48-498c-aa84-5178e3333b27",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "2nd test",
                      "fullTitle": "Subreddit Test Subreddit services Test handleInvitation function  2nd test",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return {\n      success: true,\n      doc: {\n        pendingInvitations: [\n          {\n            subredditId: \"10\",\n            permissions: {\n              all: false,\n              access: true,\n              config: true,\n              flair: false,\n              posts: false,\n            },\n          },\n        ],\n      },\n    };\n  },\n  returnInvitations: async (userId) => {\n    return {\n      success: true,\n      doc: {\n        pendingInvitations: [\n          {\n            subredditId: \"10\",\n            permissions: {\n              all: false,\n              access: true,\n              config: true,\n              flair: false,\n              posts: false,\n            },\n          },\n        ],\n      },\n    };\n  },\n  updateInvitations: async (userId, invitations) => {\n    return { success: true, doc: { _id: \"1\" } };\n  },\n};\nconst SubredditRepository = {\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: false,\n    };\n  },\n  addModerator: async () => {\n    return { success: true, doc: { fixedName: \"subreddit\" } };\n  },\n  disInvite: async () => {\n    return true;\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.handleInvitation(\n  \"1\",\n  \"khaled\",\n  \"default.png\",\n  \"subreddit\",\n  \"accept\"\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.SUBREDDIT_NOT_FOUND);",
                      "err": {},
                      "uuid": "6bc9eee9-b163-44a7-a2ea-def20a22ada1",
                      "parentUUID": "84881aab-ab48-498c-aa84-5178e3333b27",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "3rd test",
                      "fullTitle": "Subreddit Test Subreddit services Test handleInvitation function  3rd test",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return {\n      success: false,\n    };\n  },\n  returnInvitations: async (userId) => {\n    return {\n      success: true,\n      doc: {\n        pendingInvitations: [\n          {\n            subredditId: \"10\",\n            permissions: {\n              all: false,\n              access: true,\n              config: true,\n              flair: false,\n              posts: false,\n            },\n          },\n        ],\n      },\n    };\n  },\n  updateInvitations: async (userId, invitations) => {\n    return { success: true, doc: { _id: \"1\" } };\n  },\n};\nconst SubredditRepository = {\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: {\n        _id: {\n          equals: function (val) {\n            return false;\n          },\n        },\n        fixedName: \"subreddit\",\n        nsfw: true,\n      },\n    };\n  },\n  addModerator: async () => {\n    return { success: true, doc: { fixedName: \"subreddit\" } };\n  },\n  disInvite: async () => {\n    return true;\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.handleInvitation(\n  \"1\",\n  \"khaled\",\n  \"default.png\",\n  \"subreddit\",\n  \"accept\"\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.NO_INVITATION);",
                      "err": {},
                      "uuid": "e0791935-263d-4f95-82ca-4b168021f1e1",
                      "parentUUID": "84881aab-ab48-498c-aa84-5178e3333b27",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "4th test",
                      "fullTitle": "Subreddit Test Subreddit services Test handleInvitation function  4th test",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return {\n      success: true,\n      doc: {\n        pendingInvitations: [\n          {\n            subredditId: \"10\",\n            permissions: {\n              all: false,\n              access: true,\n              config: true,\n              flair: false,\n              posts: false,\n            },\n          },\n        ],\n      },\n    };\n  },\n  returnInvitations: async (userId) => {\n    return {\n      success: true,\n      doc: {\n        pendingInvitations: [\n          {\n            subredditId: \"10\",\n            permissions: {\n              all: false,\n              access: true,\n              config: true,\n              flair: false,\n              posts: false,\n            },\n          },\n        ],\n      },\n    };\n  },\n  updateInvitations: async (userId, invitations) => {\n    return { success: true, doc: { _id: \"1\" } };\n  },\n};\nconst SubredditRepository = {\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: {\n        _id: {\n          equals: function (val) {\n            return false;\n          },\n        },\n        fixedName: \"subreddit\",\n        nsfw: true,\n      },\n    };\n  },\n  addModerator: async () => {\n    return { success: false };\n  },\n  disInvite: async () => {\n    return true;\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.handleInvitation(\n  \"1\",\n  \"khaled\",\n  \"default.png\",\n  \"subreddit\",\n  \"accept\"\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.MONGO_ERR);",
                      "err": {},
                      "uuid": "872fb14a-26c5-42b3-a165-352930db8fa1",
                      "parentUUID": "84881aab-ab48-498c-aa84-5178e3333b27",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "cb1c7bd8-aae5-41be-b499-02695c25dff5",
                    "6bc9eee9-b163-44a7-a2ea-def20a22ada1",
                    "e0791935-263d-4f95-82ca-4b168021f1e1",
                    "872fb14a-26c5-42b3-a165-352930db8fa1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                },
                {
                  "uuid": "beb11a79-e80c-42e9-89f1-0495876da593",
                  "title": "deleteMod function ",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\subredditService.js",
                  "file": "\\test\\services\\subredditService.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "first test ",
                      "fullTitle": "Subreddit Test Subreddit services Test deleteMod function  first test ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return {\n      success: true,\n      doc: {\n        _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n        userName: \"khaled\",\n      },\n    };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return {\n      success: true,\n      doc: {\n        _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n        userName: \"khaled\",\n      },\n    };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: {\n        _id: \"10\",\n        moderators: [\n          {\n            _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            modDate: 10,\n          },\n        ],\n      },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: {\n        _id: \"10\",\n        moderators: [\n          {\n            _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            modDate: 15,\n          },\n        ],\n      },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return {\n      success: true,\n      doc: {\n        moderators: [\n          {\n            user: {\n              _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            },\n          },\n        ],\n      },\n    };\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.deleteMod(\n  \"1\",\n  \"subreddit\",\n  \"khaled\"\n);\nexpect(result.success).to.equal(true);",
                      "err": {},
                      "uuid": "b2ccdec1-ae09-4b49-8b7b-6036e7642c7d",
                      "parentUUID": "beb11a79-e80c-42e9-89f1-0495876da593",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "2nd test ",
                      "fullTitle": "Subreddit Test Subreddit services Test deleteMod function  2nd test ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: false,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 10 }] },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 15 }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return true;\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.deleteMod(\n  \"1\",\n  \"subreddit\",\n  \"khaled\"\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.SUBREDDIT_NOT_FOUND);",
                      "err": {},
                      "uuid": "ea0efd8c-dcb6-46b0-8589-5cbb7e01ac01",
                      "parentUUID": "beb11a79-e80c-42e9-89f1-0495876da593",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "3rd test ",
                      "fullTitle": "Subreddit Test Subreddit services Test deleteMod function  3rd test ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: false,\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 15 }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return true;\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.deleteMod(\n  \"1\",\n  \"subreddit\",\n  \"khaled\"\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.NOT_MODERATOR);",
                      "err": {},
                      "uuid": "d0ad2710-dacd-496e-933d-d9254a01eecd",
                      "parentUUID": "beb11a79-e80c-42e9-89f1-0495876da593",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "4th test ",
                      "fullTitle": "Subreddit Test Subreddit services Test deleteMod function  4th test ",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: false };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 10 }] },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 15 }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return true;\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.deleteMod(\n  \"1\",\n  \"subreddit\",\n  \"khaled\"\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(userErrors.USER_NOT_FOUND);",
                      "err": {},
                      "uuid": "486d3e23-2a52-444c-a747-845133860e99",
                      "parentUUID": "beb11a79-e80c-42e9-89f1-0495876da593",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "5th test ",
                      "fullTitle": "Subreddit Test Subreddit services Test deleteMod function  5th test ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 10 }] },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: false,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 15 }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return true;\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.deleteMod(\n  \"1\",\n  \"subreddit\",\n  true\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(userErrors.Not_MODERATOR);",
                      "err": {},
                      "uuid": "5f565919-b162-4e6c-b862-9106866d3036",
                      "parentUUID": "beb11a79-e80c-42e9-89f1-0495876da593",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "6th test ",
                      "fullTitle": "Subreddit Test Subreddit services Test deleteMod function  6th test ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 10 }] },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 15 }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return true;\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.retrieveSubreddit(\n  \"1\",\n  \"subreddit\",\n  true\n);\nexpect(result.success).to.equal(true);",
                      "err": {},
                      "uuid": "41155998-70f3-4490-8276-81109cba4a0a",
                      "parentUUID": "beb11a79-e80c-42e9-89f1-0495876da593",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "7th test ",
                      "fullTitle": "Subreddit Test Subreddit services Test deleteMod function  7th test ",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 30 }] },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 15 }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return true;\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: false };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.deleteMod(\n  \"1\",\n  \"subreddit\",\n  true\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.CANNOT_DELETE);",
                      "err": {},
                      "uuid": "d76a8e81-b9a3-4f5e-a8e4-d7b57bb908f9",
                      "parentUUID": "beb11a79-e80c-42e9-89f1-0495876da593",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b2ccdec1-ae09-4b49-8b7b-6036e7642c7d",
                    "ea0efd8c-dcb6-46b0-8589-5cbb7e01ac01",
                    "d0ad2710-dacd-496e-933d-d9254a01eecd",
                    "486d3e23-2a52-444c-a747-845133860e99",
                    "5f565919-b162-4e6c-b862-9106866d3036",
                    "41155998-70f3-4490-8276-81109cba4a0a",
                    "d76a8e81-b9a3-4f5e-a8e4-d7b57bb908f9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                },
                {
                  "uuid": "e37c4d98-c372-441d-8d2a-d4da5ddfda0e",
                  "title": "subredditsIamIn function ",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\subredditService.js",
                  "file": "\\test\\services\\subredditService.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "first test",
                      "fullTitle": "Subreddit Test Subreddit services Test subredditsIamIn function  first test",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n};\nconst SubredditRepository = {\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: {\n        _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n        fixedName: \"subreddit\",\n        nsfw: true,\n      },\n    };\n  },\n  getSubreddits: async (userId, type) => {\n    return {\n      success: true,\n      doc: [\n        {\n          fixedName: \"subreddit\",\n          users: [\n            {\n              _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            },\n            {\n              _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            },\n          ],\n        },\n      ],\n    };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.subredditsIamIn(\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"moderator\"\n);\nexpect(result.success).to.equal(true);",
                      "err": {},
                      "uuid": "08a9b56c-41e9-4d87-a5dd-163ca1f02851",
                      "parentUUID": "e37c4d98-c372-441d-8d2a-d4da5ddfda0e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "first test",
                      "fullTitle": "Subreddit Test Subreddit services Test subredditsIamIn function  first test",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  getSubreddits: async (userId) => {\n    return {\n      success: true,\n      doc: [\n        {\n          fixedName: \"subreddit\",\n          users: [\n            {\n              _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            },\n            {\n              _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            },\n          ],\n        },\n      ],\n    };\n  },\n};\nconst SubredditRepository = {\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: {\n        _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n        fixedName: \"subreddit\",\n        nsfw: true,\n      },\n    };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.subredditsIamIn(\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"subscriber\"\n);\nexpect(result.success).to.equal(true);",
                      "err": {},
                      "uuid": "3b6fb4a5-194a-4be0-a4b9-c51f331b46ea",
                      "parentUUID": "e37c4d98-c372-441d-8d2a-d4da5ddfda0e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "first test",
                      "fullTitle": "Subreddit Test Subreddit services Test subredditsIamIn function  first test",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  getSubreddits: async (userId) => {\n    return {\n      success: true,\n      doc: [\n        {\n          fixedName: \"subreddit\",\n          users: [\n            {\n              _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            },\n            {\n              _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            },\n          ],\n        },\n      ],\n    };\n  },\n};\nconst SubredditRepository = {\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: {\n        _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n        fixedName: \"subreddit\",\n        nsfw: true,\n      },\n    };\n  },\n  getSubreddits: async (userId, type) => {\n    return {\n      success: true,\n      doc: [\n        {\n          fixedName: \"subreddit\",\n          users: [\n            {\n              _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            },\n            {\n              _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            },\n          ],\n        },\n      ],\n    };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.subredditsIamIn(\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"moderatorrrr\"\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.INVALID_ENUM);",
                      "err": {},
                      "uuid": "0fdaf2c1-3a29-49f8-b48c-66feb1a2f1cc",
                      "parentUUID": "e37c4d98-c372-441d-8d2a-d4da5ddfda0e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "08a9b56c-41e9-4d87-a5dd-163ca1f02851",
                    "3b6fb4a5-194a-4be0-a4b9-c51f331b46ea",
                    "0fdaf2c1-3a29-49f8-b48c-66feb1a2f1cc"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                },
                {
                  "uuid": "ab77ceb1-6f94-40e3-bf4c-cb07ccff800e",
                  "title": "subredditsModeratedBy function ",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\subredditService.js",
                  "file": "\\test\\services\\subredditService.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "first test",
                      "fullTitle": "Subreddit Test Subreddit services Test subredditsModeratedBy function  first test",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n};\nconst SubredditRepository = {\n  getSubreddits: async (userId, type) => {\n    return {\n      success: true,\n      doc: [\n        {\n          fixedName: \"subreddit\",\n          users: [\n            {\n              _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            },\n            {\n              _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            },\n          ],\n        },\n      ],\n    };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.subredditsModeratedBy(\"khaled\");\nexpect(result.success).to.equal(true);",
                      "err": {},
                      "uuid": "b8e489d3-cc68-49a8-9295-fa7600113964",
                      "parentUUID": "ab77ceb1-6f94-40e3-bf4c-cb07ccff800e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b8e489d3-cc68-49a8-9295-fa7600113964"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                },
                {
                  "uuid": "e2ec3034-e9a1-4cb9-86be-5fcacb05fb59",
                  "title": "getFavourites function ",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\subredditService.js",
                  "file": "\\test\\services\\subredditService.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "first test",
                      "fullTitle": "Subreddit Test Subreddit services Test getFavourites function  first test",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  getFavouriteSubreddits: async (userId) => {\n    return { success: true, doc: { fixedName: \"sub\" } };\n  },\n};\nconst SubredditRepository = {\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.getFavourites(\"19148901\");\nexpect(result.success).to.equal(true);",
                      "err": {},
                      "uuid": "5dd351e6-7c7c-4472-a54d-6298b89d5f33",
                      "parentUUID": "e2ec3034-e9a1-4cb9-86be-5fcacb05fb59",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "first test",
                      "fullTitle": "Subreddit Test Subreddit services Test getFavourites function  first test",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  getFavouriteSubreddits: async (userId) => {\n    return { success: false, doc: { fixedName: \"sub\" } };\n  },\n};\nconst SubredditRepository = {\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: false,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.getFavourites(\"19148901\");\nexpect(result.success).to.equal(false);",
                      "err": {},
                      "uuid": "adac631c-d15a-42de-8eec-b889a1513bcc",
                      "parentUUID": "e2ec3034-e9a1-4cb9-86be-5fcacb05fb59",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [
                    {
                      "uuid": "f9e748aa-003d-4498-9eec-112508d83359",
                      "title": "retrieveSubreddit function ",
                      "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\subredditService.js",
                      "file": "\\test\\services\\subredditService.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "first test",
                          "fullTitle": "Subreddit Test Subreddit services Test getFavourites function  retrieveSubreddit function  first test",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n};\nconst SubredditRepository = {\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.retrieveSubreddit(\n  \"1\",\n  \"subreddit\",\n  true\n);\nexpect(result.success).to.equal(true);",
                          "err": {},
                          "uuid": "410030ae-b7ec-4c94-a552-22116d5c11ba",
                          "parentUUID": "f9e748aa-003d-4498-9eec-112508d83359",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "410030ae-b7ec-4c94-a552-22116d5c11ba"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 1000000
                    }
                  ],
                  "passes": [
                    "5dd351e6-7c7c-4472-a54d-6298b89d5f33",
                    "adac631c-d15a-42de-8eec-b889a1513bcc"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                },
                {
                  "uuid": "f6e3a35f-0cbd-44b8-b9e0-49d9e737c98d",
                  "title": "updateModeratorSettings function ",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\subredditService.js",
                  "file": "\\test\\services\\subredditService.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "first test ",
                      "fullTitle": "Subreddit Test Subreddit services Test updateModeratorSettings function  first test ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return {\n      success: true,\n      doc: {\n        _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n        userName: \"khaled\",\n      },\n    };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return {\n      success: true,\n      doc: {\n        _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n        userName: \"khaled\",\n      },\n    };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: {\n        _id: \"10\",\n        moderators: [\n          {\n            _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            modDate: 10,\n          },\n        ],\n      },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: {\n        _id: \"10\",\n        moderators: [\n          {\n            _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            modDate: 15,\n          },\n        ],\n      },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return {\n      success: true,\n      doc: {\n        moderators: [\n          {\n            user: {\n              _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            },\n          },\n        ],\n      },\n    };\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.updateModeratorSettings(\n  \"subreddit\",\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"khaled\",\n  {}\n);\nexpect(result.success).to.equal(true);",
                      "err": {},
                      "uuid": "9729a3d5-5852-4ad0-9c62-d4a4cccb5c0d",
                      "parentUUID": "f6e3a35f-0cbd-44b8-b9e0-49d9e737c98d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "2nd test ",
                      "fullTitle": "Subreddit Test Subreddit services Test updateModeratorSettings function  2nd test ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: false,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 10 }] },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 15 }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return true;\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.updateModeratorSettings(\n  \"subreddit\",\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"khaled\",\n  {}\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.SUBREDDIT_NOT_FOUND);",
                      "err": {},
                      "uuid": "0432b829-bea4-40e1-8ac8-378b4ae619d8",
                      "parentUUID": "f6e3a35f-0cbd-44b8-b9e0-49d9e737c98d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "3rd test ",
                      "fullTitle": "Subreddit Test Subreddit services Test updateModeratorSettings function  3rd test ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: false,\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 15 }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return true;\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.updateModeratorSettings(\n  \"subreddit\",\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"khaled\",\n  {}\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.NOT_MODERATOR);",
                      "err": {},
                      "uuid": "f3b3582d-5cbf-4c3e-80ee-dc9023c69de3",
                      "parentUUID": "f6e3a35f-0cbd-44b8-b9e0-49d9e737c98d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "4th test ",
                      "fullTitle": "Subreddit Test Subreddit services Test updateModeratorSettings function  4th test ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: false };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 10 }] },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 15 }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return true;\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.updateModeratorSettings(\n  \"subreddit\",\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"khaled\",\n  {}\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(userErrors.USER_NOT_FOUND);",
                      "err": {},
                      "uuid": "ed60ed2e-9902-4f23-8b41-70f58d94ad6b",
                      "parentUUID": "f6e3a35f-0cbd-44b8-b9e0-49d9e737c98d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "5th test ",
                      "fullTitle": "Subreddit Test Subreddit services Test updateModeratorSettings function  5th test ",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 10 }] },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: false,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 15 }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return true;\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.updateModeratorSettings(\n  \"subreddit\",\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"khaled\",\n  {}\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(userErrors.Not_MODERATOR);",
                      "err": {},
                      "uuid": "1639391c-c605-4a09-8975-dc782885ed19",
                      "parentUUID": "f6e3a35f-0cbd-44b8-b9e0-49d9e737c98d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "6th test ",
                      "fullTitle": "Subreddit Test Subreddit services Test updateModeratorSettings function  6th test ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return {\n      success: true,\n      doc: {\n        _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n        userName: \"khaled\",\n      },\n    };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return {\n      success: true,\n      doc: {\n        _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n        userName: \"khaled\",\n      },\n    };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: {\n        _id: \"10\",\n        moderators: [\n          {\n            _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            modDate: 10,\n          },\n        ],\n      },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: {\n        _id: \"10\",\n        moderators: [\n          {\n            _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            modDate: 15,\n          },\n        ],\n      },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return {\n      success: true,\n      doc: {\n        moderators: [\n          {\n            user: {\n              _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            },\n          },\n        ],\n      },\n    };\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: false };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.updateModeratorSettings(\n  \"subreddit\",\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"khaled\",\n  {}\n);\nexpect(result.success).to.equal(false);",
                      "err": {},
                      "uuid": "68111c6f-fb52-4a23-905b-a35f7fda92ed",
                      "parentUUID": "f6e3a35f-0cbd-44b8-b9e0-49d9e737c98d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "7th test ",
                      "fullTitle": "Subreddit Test Subreddit services Test updateModeratorSettings function  7th test ",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 30 }] },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 15 }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return true;\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: false };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.updateModeratorSettings(\n  \"subreddit\",\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"khaled\",\n  {}\n);\nexpect(result.success).to.equal(false);",
                      "err": {},
                      "uuid": "8279fbc5-fe50-485c-9aeb-665657d2a5d1",
                      "parentUUID": "f6e3a35f-0cbd-44b8-b9e0-49d9e737c98d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9729a3d5-5852-4ad0-9c62-d4a4cccb5c0d",
                    "0432b829-bea4-40e1-8ac8-378b4ae619d8",
                    "f3b3582d-5cbf-4c3e-80ee-dc9023c69de3",
                    "ed60ed2e-9902-4f23-8b41-70f58d94ad6b",
                    "1639391c-c605-4a09-8975-dc782885ed19",
                    "68111c6f-fb52-4a23-905b-a35f7fda92ed",
                    "8279fbc5-fe50-485c-9aeb-665657d2a5d1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                },
                {
                  "uuid": "ff77ec68-173d-497c-ae38-5170c2ef6310",
                  "title": "banUnban function ",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\subredditService.js",
                  "file": "\\test\\services\\subredditService.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "first test ",
                      "fullTitle": "Subreddit Test Subreddit services Test banUnban function  first test ",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return {\n      success: true,\n      doc: {\n        _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n        userName: \"khaled\",\n      },\n    };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return {\n      success: true,\n      doc: {\n        _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n        userName: \"khaled\",\n      },\n    };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: {\n        _id: \"10\",\n        moderators: [\n          {\n            _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            modDate: 10,\n          },\n        ],\n      },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: false,\n      doc: {\n        _id: \"10\",\n        moderators: [\n          {\n            _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            modDate: 15,\n          },\n        ],\n      },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return {\n      success: true,\n      doc: {\n        moderators: [\n          {\n            user: {\n              _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            },\n          },\n        ],\n      },\n    };\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: true };\n  },\n  checkPunished: async (userId, subredditName, action) => {\n    return { success: false };\n  },\n  banUser: async (user, subredditName, data) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.banUnban(\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"subreddit\",\n  \"khaled\",\n  \"ban\",\n  {}\n);\nexpect(result.success).to.equal(true);",
                      "err": {},
                      "uuid": "9d4a8448-b218-4398-ad8a-0f567dc030aa",
                      "parentUUID": "ff77ec68-173d-497c-ae38-5170c2ef6310",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "first test ",
                      "fullTitle": "Subreddit Test Subreddit services Test banUnban function  first test ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return {\n      success: true,\n      doc: {\n        _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n        userName: \"khaled\",\n      },\n    };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return {\n      success: true,\n      doc: {\n        _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n        userName: \"khaled\",\n      },\n    };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: {\n        _id: \"10\",\n        moderators: [\n          {\n            _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            modDate: 10,\n          },\n        ],\n      },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: false,\n      doc: {\n        _id: \"10\",\n        moderators: [\n          {\n            _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            modDate: 15,\n          },\n        ],\n      },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return {\n      success: true,\n      doc: {\n        moderators: [\n          {\n            user: {\n              _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            },\n          },\n        ],\n      },\n    };\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: true };\n  },\n  checkPunished: async (userId, subredditName, action) => {\n    return { success: false };\n  },\n  banUser: async (user, subredditName, data) => {\n    return { success: false };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.banUnban(\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"subreddit\",\n  \"khaled\",\n  \"ban\",\n  {}\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.mongoErrors);",
                      "err": {},
                      "uuid": "e589f37d-5891-43ba-a1ed-51c999292ee1",
                      "parentUUID": "ff77ec68-173d-497c-ae38-5170c2ef6310",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "2nd test ",
                      "fullTitle": "Subreddit Test Subreddit services Test banUnban function  2nd test ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: false,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 10 }] },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 15 }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return true;\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.banUnban(\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"subreddit\",\n  \"khaled\",\n  \"ban\",\n  {}\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.SUBREDDIT_NOT_FOUND);",
                      "err": {},
                      "uuid": "9bfa43bd-3c06-49b8-b9ec-feb9d16efa97",
                      "parentUUID": "ff77ec68-173d-497c-ae38-5170c2ef6310",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "3rd test ",
                      "fullTitle": "Subreddit Test Subreddit services Test banUnban function  3rd test ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: false,\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 15 }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return true;\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.banUnban(\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"subreddit\",\n  \"khaled\",\n  \"ban\",\n  {}\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.NOT_MODERATOR);",
                      "err": {},
                      "uuid": "f95f7ddd-befd-4fe2-b106-12386da2d338",
                      "parentUUID": "ff77ec68-173d-497c-ae38-5170c2ef6310",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "4th test ",
                      "fullTitle": "Subreddit Test Subreddit services Test banUnban function  4th test ",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: false };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 10 }] },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 15 }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return true;\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.banUnban(\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"subreddit\",\n  \"khaled\",\n  \"ban\",\n  {}\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(userErrors.USER_NOT_FOUND);",
                      "err": {},
                      "uuid": "3153cccc-a653-403d-b670-6a1165e01ac9",
                      "parentUUID": "ff77ec68-173d-497c-ae38-5170c2ef6310",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "5th test ",
                      "fullTitle": "Subreddit Test Subreddit services Test banUnban function  5th test ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 10 }] },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: false,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 15 }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return true;\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: true };\n  },\n  checkPunished: async (userId, subredditName, action) => {\n    return { success: true };\n  },\n  banUser: async (user, subredditName, data) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.banUnban(\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"subreddit\",\n  \"khaled\",\n  \"ban\",\n  {}\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(userErrors.ALREADY_BANED);",
                      "err": {},
                      "uuid": "8e9875a9-ced6-4664-80fd-a09844d2c9ad",
                      "parentUUID": "ff77ec68-173d-497c-ae38-5170c2ef6310",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "6th test ",
                      "fullTitle": "Subreddit Test Subreddit services Test banUnban function  6th test ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return {\n      success: true,\n      doc: {\n        _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n        userName: \"khaled\",\n      },\n    };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return {\n      success: true,\n      doc: {\n        _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n        userName: \"khaled\",\n      },\n    };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: {\n        _id: \"10\",\n        moderators: [\n          {\n            _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            modDate: 10,\n          },\n        ],\n      },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: {\n        _id: \"10\",\n        moderators: [\n          {\n            _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            modDate: 15,\n          },\n        ],\n      },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return {\n      success: true,\n      doc: {\n        moderators: [\n          {\n            user: {\n              _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            },\n          },\n        ],\n      },\n    };\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: false };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.banUnban(\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"subreddit\",\n  \"khaled\",\n  \"ban\",\n  {}\n);\nexpect(result.success).to.equal(false);",
                      "err": {},
                      "uuid": "f40b9b7f-70a8-4112-9e67-e2dabd49834e",
                      "parentUUID": "ff77ec68-173d-497c-ae38-5170c2ef6310",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "7th test ",
                      "fullTitle": "Subreddit Test Subreddit services Test banUnban function  7th test ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 30 }] },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 15 }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return true;\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: false };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.banUnban(\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"subreddit\",\n  \"khaled\",\n  \"ban\",\n  {}\n);\nexpect(result.success).to.equal(false);",
                      "err": {},
                      "uuid": "c780dbd3-df5c-4b0d-998a-8e3249eb6dff",
                      "parentUUID": "ff77ec68-173d-497c-ae38-5170c2ef6310",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "7th test ",
                      "fullTitle": "Subreddit Test Subreddit services Test banUnban function  7th test ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 30 }] },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 15 }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return true;\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: false };\n  },\n  checkPunished: async (userId, subredditName, action) => {\n    return { success: true };\n  },\n  banUser: async (user, subredditName, data) => {\n    return { success: true };\n  },\n  getPunished: async (subredditName) => {\n    return { doc: { punished: {} } };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.banUnban(\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"subreddit\",\n  \"khaled\",\n  \"unban\",\n  {}\n);\nexpect(result.success).to.equal(false);",
                      "err": {},
                      "uuid": "56c932f1-db59-4c66-b692-4cd165fa383a",
                      "parentUUID": "ff77ec68-173d-497c-ae38-5170c2ef6310",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9d4a8448-b218-4398-ad8a-0f567dc030aa",
                    "e589f37d-5891-43ba-a1ed-51c999292ee1",
                    "9bfa43bd-3c06-49b8-b9ec-feb9d16efa97",
                    "f95f7ddd-befd-4fe2-b106-12386da2d338",
                    "3153cccc-a653-403d-b670-6a1165e01ac9",
                    "8e9875a9-ced6-4664-80fd-a09844d2c9ad",
                    "f40b9b7f-70a8-4112-9e67-e2dabd49834e",
                    "c780dbd3-df5c-4b0d-998a-8e3249eb6dff",
                    "56c932f1-db59-4c66-b692-4cd165fa383a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                },
                {
                  "uuid": "393c5cd6-61c5-4549-8e1c-6bad2753b519",
                  "title": "muteUnmute function ",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\subredditService.js",
                  "file": "\\test\\services\\subredditService.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "first test ",
                      "fullTitle": "Subreddit Test Subreddit services Test muteUnmute function  first test ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return {\n      success: true,\n      doc: {\n        _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n        userName: \"khaled\",\n      },\n    };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return {\n      success: true,\n      doc: {\n        _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n        userName: \"khaled\",\n      },\n    };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: {\n        _id: \"10\",\n        moderators: [\n          {\n            _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            modDate: 10,\n          },\n        ],\n      },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: false,\n      doc: {\n        _id: \"10\",\n        moderators: [\n          {\n            _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            modDate: 15,\n          },\n        ],\n      },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return {\n      success: true,\n      doc: {\n        moderators: [\n          {\n            user: {\n              _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            },\n          },\n        ],\n      },\n    };\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: true };\n  },\n  checkPunished: async (userId, subredditName, action) => {\n    return { success: false };\n  },\n  banUser: async (user, subredditName, data) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.muteUnmute(\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"subreddit\",\n  \"khaled\",\n  \"ban\",\n  {}\n);\nexpect(result.success).to.equal(false);",
                      "err": {},
                      "uuid": "20a27319-a9e0-4376-a3c6-68c497c020e8",
                      "parentUUID": "393c5cd6-61c5-4549-8e1c-6bad2753b519",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "first test ",
                      "fullTitle": "Subreddit Test Subreddit services Test muteUnmute function  first test ",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return {\n      success: true,\n      doc: {\n        _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n        userName: \"khaled\",\n      },\n    };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return {\n      success: true,\n      doc: {\n        _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n        userName: \"khaled\",\n      },\n    };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: {\n        _id: \"10\",\n        moderators: [\n          {\n            _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            modDate: 10,\n          },\n        ],\n      },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: false,\n      doc: {\n        _id: \"10\",\n        moderators: [\n          {\n            _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            modDate: 15,\n          },\n        ],\n      },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return {\n      success: true,\n      doc: {\n        moderators: [\n          {\n            user: {\n              _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            },\n          },\n        ],\n      },\n    };\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: true };\n  },\n  checkPunished: async (userId, subredditName, action) => {\n    return { success: false };\n  },\n  banUser: async (user, subredditName, data) => {\n    return { success: false };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.muteUnmute(\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"subreddit\",\n  \"khaled\",\n  \"ban\",\n  {}\n);\nexpect(result.success).to.equal(false);",
                      "err": {},
                      "uuid": "63b8670e-f96b-4ee4-81f8-eeb293052367",
                      "parentUUID": "393c5cd6-61c5-4549-8e1c-6bad2753b519",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "2nd test ",
                      "fullTitle": "Subreddit Test Subreddit services Test muteUnmute function  2nd test ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: false,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 10 }] },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 15 }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return true;\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.muteUnmute(\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"subreddit\",\n  \"khaled\",\n  \"ban\",\n  {}\n);\nexpect(result.success).to.equal(false);",
                      "err": {},
                      "uuid": "a6967da5-3a91-4226-9781-b6281d64bf7f",
                      "parentUUID": "393c5cd6-61c5-4549-8e1c-6bad2753b519",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "3rd test ",
                      "fullTitle": "Subreddit Test Subreddit services Test muteUnmute function  3rd test ",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: false,\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 15 }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return true;\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.muteUnmute(\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"subreddit\",\n  \"khaled\",\n  \"ban\",\n  {}\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(subredditErrors.NOT_MODERATOR);",
                      "err": {},
                      "uuid": "c3b18607-4da5-4b50-a10e-d14db12d80d5",
                      "parentUUID": "393c5cd6-61c5-4549-8e1c-6bad2753b519",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "4th test ",
                      "fullTitle": "Subreddit Test Subreddit services Test muteUnmute function  4th test ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: false };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 10 }] },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 15 }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return true;\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: true };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.muteUnmute(\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"subreddit\",\n  \"khaled\",\n  \"ban\",\n  {}\n);\nexpect(result.success).to.equal(false);\nexpect(result.error).to.equal(userErrors.USER_NOT_FOUND);",
                      "err": {},
                      "uuid": "fdfe5a55-52eb-4869-9c89-8f4f0871588a",
                      "parentUUID": "393c5cd6-61c5-4549-8e1c-6bad2753b519",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "6th test ",
                      "fullTitle": "Subreddit Test Subreddit services Test muteUnmute function  6th test ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return {\n      success: true,\n      doc: {\n        _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n        userName: \"khaled\",\n      },\n    };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return {\n      success: true,\n      doc: {\n        _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n        userName: \"khaled\",\n      },\n    };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: {\n        _id: \"10\",\n        moderators: [\n          {\n            _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            modDate: 10,\n          },\n        ],\n      },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: {\n        _id: \"10\",\n        moderators: [\n          {\n            _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            modDate: 15,\n          },\n        ],\n      },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return {\n      success: true,\n      doc: {\n        moderators: [\n          {\n            user: {\n              _id: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n            },\n          },\n        ],\n      },\n    };\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: false };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.muteUnmute(\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"subreddit\",\n  \"khaled\",\n  \"ban\",\n  {}\n);\nexpect(result.success).to.equal(false);",
                      "err": {},
                      "uuid": "e5c7ea90-d96c-4faf-aa19-1a5c03edf939",
                      "parentUUID": "393c5cd6-61c5-4549-8e1c-6bad2753b519",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "7th test ",
                      "fullTitle": "Subreddit Test Subreddit services Test muteUnmute function  7th test ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 30 }] },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 15 }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return true;\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: false };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.muteUnmute(\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"subreddit\",\n  \"khaled\",\n  \"ban\",\n  {}\n);\nexpect(result.success).to.equal(false);",
                      "err": {},
                      "uuid": "34bce1ac-2bcf-40ed-862f-84250640aa1b",
                      "parentUUID": "393c5cd6-61c5-4549-8e1c-6bad2753b519",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "7th test ",
                      "fullTitle": "Subreddit Test Subreddit services Test muteUnmute function  7th test ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const UserRepository = {\n  isSubscribed: async (user, subreddit) => {\n    return false;\n  },\n  findByUserName: async (userName, select, pop) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  updateByName: async (userName, subredditId, permissions) => {\n    return { success: true, doc: { _id: \"1\", userName: \"khaled\" } };\n  },\n  checkInvetation: async (userId, subredditId) => {\n    return { suucess: true };\n  },\n};\nconst SubredditRepository = {\n  create: async (data, userName, profilePicture) => {\n    return { success: true, doc: { _id: \"10\" } };\n  },\n  getsubreddit: async (name, select, popOptions) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", fixedName: \"subreddit\", nsfw: true },\n    };\n  },\n  isModerator_1: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 30 }] },\n    };\n  },\n  isModerator_2: async (subredditName, userID) => {\n    return {\n      success: true,\n      doc: { _id: \"10\", moderators: [{ _id: \"1\", modDate: 15 }] },\n    };\n  },\n  invite: async (userId, subredditName) => {\n    return { success: true };\n  },\n  getModerators: async (subredditName) => {\n    return true;\n  },\n  updateModerators: async (subredditName, moderators) => {\n    return { success: false };\n  },\n  checkPunished: async (userId, subredditName, action) => {\n    return { success: true };\n  },\n  banUser: async (user, subredditName, data) => {\n    return { success: true };\n  },\n  getPunished: async (subredditName) => {\n    return { doc: { punished: {} } };\n  },\n};\nconst FlairRepository = {};\nconst subredditServices = new subredditService({\n  SubredditRepository,\n  FlairRepository,\n  UserRepository,\n});\nconst result = await subredditServices.muteUnmute(\n  mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n  \"subreddit\",\n  \"khaled\",\n  \"unban\",\n  {}\n);\nexpect(result.success).to.equal(false);",
                      "err": {},
                      "uuid": "f848f4ec-19c3-427d-a6db-ed917acabbc1",
                      "parentUUID": "393c5cd6-61c5-4549-8e1c-6bad2753b519",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "20a27319-a9e0-4376-a3c6-68c497c020e8",
                    "63b8670e-f96b-4ee4-81f8-eeb293052367",
                    "a6967da5-3a91-4226-9781-b6281d64bf7f",
                    "c3b18607-4da5-4b50-a10e-d14db12d80d5",
                    "fdfe5a55-52eb-4869-9c89-8f4f0871588a",
                    "e5c7ea90-d96c-4faf-aa19-1a5c03edf939",
                    "34bce1ac-2bcf-40ed-862f-84250640aa1b",
                    "f848f4ec-19c3-427d-a6db-ed917acabbc1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "35552116-e1f4-4e24-aa68-08a819c27d90",
              "title": "Subscriable Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\subredditService.js",
              "file": "\\test\\services\\subredditService.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "subscriable",
                  "fullTitle": "Subreddit Test Subscriable Test subscriable",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const subscriable = await subredditServices.subscriable(\n  subredditName,\n  userId\n);\nexpect(subscriable.success).to.equal(true);",
                  "err": {},
                  "uuid": "3387f21f-60f5-4a4a-baed-a2d3fbc20fe0",
                  "parentUUID": "35552116-e1f4-4e24-aa68-08a819c27d90",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "banned",
                  "fullTitle": "Subreddit Test Subscriable Test banned",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userId = ObjectId(\"678a5fccf267fc3a463b35e5\");\nconst subscriable = await subredditServices.subscriable(\n  subredditName,\n  userId\n);\nexpect(subscriable.success).to.equal(false);\nexpect(subscriable.error).to.equal(subredditErrors.BANNED);",
                  "err": {},
                  "uuid": "c475696f-acdc-4c26-b67c-2a1063ca1e79",
                  "parentUUID": "35552116-e1f4-4e24-aa68-08a819c27d90",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "not found",
                  "fullTitle": "Subreddit Test Subscriable Test not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "SubredditRepository.findByName = () => {\n  return { success: false };\n};\nconst subscriable = await subredditServices.subscriable(\n  subredditName,\n  userId\n);\nexpect(subscriable.success).to.equal(false);\nexpect(subscriable.error).to.equal(subredditErrors.SUBREDDIT_NOT_FOUND);",
                  "err": {},
                  "uuid": "d77ab0ba-05f6-466a-85ba-b5b1100e79c4",
                  "parentUUID": "35552116-e1f4-4e24-aa68-08a819c27d90",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3387f21f-60f5-4a4a-baed-a2d3fbc20fe0",
                "c475696f-acdc-4c26-b67c-2a1063ca1e79",
                "d77ab0ba-05f6-466a-85ba-b5b1100e79c4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "32f64104-b8cc-4952-a153-cdd020a76db3",
          "title": "User Post Test",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userPostServices.js",
          "file": "\\test\\services\\userPostServices.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f68874d3-dae9-4325-9c00-4236a223aeb1",
              "title": "User Post services Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userPostServices.js",
              "file": "\\test\\services\\userPostServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "7f898a58-72eb-4349-8f85-48ebccc8f6e8",
                  "title": "setVotePostStatus function ",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userPostServices.js",
                  "file": "\\test\\services\\userPostServices.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "first test,",
                      "fullTitle": "User Post Test User Post services Test setVotePostStatus function  first test,",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let user = {\n  votePost: [\n    {\n      posts: \"1\",\n      postVoteStatus: 1,\n    },\n    {\n      posts: \"2\",\n      postVoteStatus: 1,\n    },\n    {\n      posts: \"3\",\n      postVoteStatus: 0,\n    },\n    {\n      posts: \"4\",\n      postVoteStatus: -1,\n    },\n  ],\n};\nlet posts = [\n  {\n    _id: \"1\",\n  },\n  {\n    _id: \"3\",\n  },\n  {\n    _id: \"4\",\n  },\n  {\n    _id: \"6\",\n  },\n];\nconst result = postservices.setVotePostStatus(user, posts);\nexpect(result[0].postVoteStatus).to.equal(1);\nexpect(result[1].postVoteStatus).to.equal(0);\nexpect(result[2].postVoteStatus).to.equal(-1);\nexpect(result[3].postVoteStatus).to.equal(0);",
                      "err": {},
                      "uuid": "9e09f6ab-2584-46a6-9fea-b441ef658023",
                      "parentUUID": "7f898a58-72eb-4349-8f85-48ebccc8f6e8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "second test",
                      "fullTitle": "User Post Test User Post services Test setVotePostStatus function  second test",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let posts = [];\nlet user = { votePost: [] };\nconst result = postservices.setVotePostStatus(user, posts);\nexpect(result.length).to.equal(0);",
                      "err": {},
                      "uuid": "f7edce7f-47ca-4c7a-a53b-fb3507ab92fa",
                      "parentUUID": "7f898a58-72eb-4349-8f85-48ebccc8f6e8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "third test",
                      "fullTitle": "User Post Test User Post services Test setVotePostStatus function  third test",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let posts = [\n  {\n    _id: \"1\",\n  },\n  {\n    _id: \"3\",\n  },\n];\nlet user = { votePost: [] };\nconst result = postservices.setVotePostStatus(user, posts);\nexpect(result[0].postVoteStatus).to.equal(0);\nexpect(result[1].postVoteStatus).to.equal(0);",
                      "err": {},
                      "uuid": "a40733f2-4237-49c6-b5f4-6ec889747129",
                      "parentUUID": "7f898a58-72eb-4349-8f85-48ebccc8f6e8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9e09f6ab-2584-46a6-9fea-b441ef658023",
                    "f7edce7f-47ca-4c7a-a53b-fb3507ab92fa",
                    "a40733f2-4237-49c6-b5f4-6ec889747129"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                },
                {
                  "uuid": "5250c7bd-6495-4ed2-a869-26cd9e172723",
                  "title": "selectPostsWithVotes function ",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userPostServices.js",
                  "file": "\\test\\services\\userPostServices.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "first test,",
                      "fullTitle": "User Post Test User Post services Test selectPostsWithVotes function  first test,",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let Posts = [\n  {\n    posts: { id: \"1\" },\n    postVoteStatus: 1,\n  },\n  {\n    posts: { id: \"1\" },\n    postVoteStatus: 0,\n  },\n  {\n    posts: { id: \"1\" },\n    postVoteStatus: 0,\n  },\n  {\n    posts: { id: \"1\" },\n    postVoteStatus: 0,\n  },\n];\nconst result = postservices.selectPostsWithVotes(Posts, 1);\nexpect(result.length).to.equal(1);",
                      "err": {},
                      "uuid": "4f35fc5a-3f72-4a99-aa3d-1fdfa5a99844",
                      "parentUUID": "5250c7bd-6495-4ed2-a869-26cd9e172723",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "second test",
                      "fullTitle": "User Post Test User Post services Test selectPostsWithVotes function  second test",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let posts = [];\nlet user = { votePost: [] };\nconst result = postservices.setVotePostStatus(user, posts);\nexpect(result.length).to.equal(0);",
                      "err": {},
                      "uuid": "0aa775a8-5def-4c24-98ad-c7af6554c372",
                      "parentUUID": "5250c7bd-6495-4ed2-a869-26cd9e172723",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "third test",
                      "fullTitle": "User Post Test User Post services Test selectPostsWithVotes function  third test",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let posts = [\n  {\n    _id: \"1\",\n  },\n  {\n    _id: \"3\",\n  },\n];\nlet user = { votePost: [] };\nconst result = postservices.setVotePostStatus(user, posts);\nexpect(result[0].postVoteStatus).to.equal(0);\nexpect(result[1].postVoteStatus).to.equal(0);",
                      "err": {},
                      "uuid": "c403014a-47c7-436c-a444-c5c07f1c4bdf",
                      "parentUUID": "5250c7bd-6495-4ed2-a869-26cd9e172723",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4f35fc5a-3f72-4a99-aa3d-1fdfa5a99844",
                    "0aa775a8-5def-4c24-98ad-c7af6554c372",
                    "c403014a-47c7-436c-a444-c5c07f1c4bdf"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                },
                {
                  "uuid": "e6d85272-aa85-4139-8a6a-255ad31f8096",
                  "title": "getUserPosts function ",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userPostServices.js",
                  "file": "\\test\\services\\userPostServices.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "first test,",
                      "fullTitle": "User Post Test User Post services Test getUserPosts function  first test,",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "posts = await postservices.getUserPosts(\"\", \"\");\n//console.log(posts);\nexpect(posts.length).to.equal(1);\nexpect(posts[0][\"_id\"]).to.equal(\"1\");",
                      "err": {},
                      "uuid": "1b2a3a3e-8a2f-404a-92a6-11335b7b09fa",
                      "parentUUID": "e6d85272-aa85-4139-8a6a-255ad31f8096",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "second test,",
                      "fullTitle": "User Post Test User Post services Test getUserPosts function  second test,",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "posts = await postservices.getUserPosts(\"\", \"Hot\");\n//console.log(posts);\nexpect(posts.length).to.equal(1);\nexpect(posts[0][\"_id\"]).to.equal(\"1\");",
                      "err": {},
                      "uuid": "0a640b07-eb85-4cec-aa4b-e6c23266663b",
                      "parentUUID": "e6d85272-aa85-4139-8a6a-255ad31f8096",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "thrid test,",
                      "fullTitle": "User Post Test User Post services Test getUserPosts function  thrid test,",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "posts = await postservices.getUserPosts(\"\", \"Top\");\n//console.log(posts);\nexpect(posts.length).to.equal(1);\nexpect(posts[0][\"_id\"]).to.equal(\"1\");",
                      "err": {},
                      "uuid": "a32f4524-9434-4626-a220-a32612b50efb",
                      "parentUUID": "e6d85272-aa85-4139-8a6a-255ad31f8096",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1b2a3a3e-8a2f-404a-92a6-11335b7b09fa",
                    "0a640b07-eb85-4cec-aa4b-e6c23266663b",
                    "a32f4524-9434-4626-a220-a32612b50efb"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                },
                {
                  "uuid": "92c8f485-fefb-4b70-9768-084f3460b61d",
                  "title": "removehiddenposts function ",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userPostServices.js",
                  "file": "\\test\\services\\userPostServices.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "first test,",
                      "fullTitle": "User Post Test User Post services Test removehiddenposts function  first test,",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let user = {\n  hidden: [\"1\", \"4\"],\n};\nlet user2 = {\n  hidden: [\"10\"],\n};\nlet posts = [\n  {\n    _id: \"1\",\n  },\n  {\n    _id: \"3\",\n  },\n  {\n    _id: \"4\",\n  },\n  {\n    _id: \"6\",\n  },\n];\nlet posts2 = [\n  {\n    _id: \"1\",\n  },\n  {\n    _id: \"3\",\n  },\n  {\n    _id: \"4\",\n  },\n  {\n    _id: \"6\",\n  },\n];\nconst result = postservices.removeHiddenPosts(user, posts);\nconst result2 = postservices.removeHiddenPosts(user2, posts2);\nexpect(result.length).to.equal(2);\nexpect(result2.length).to.equal(4);",
                      "err": {},
                      "uuid": "ad3695a9-eb07-4188-9e4e-189fb290bec8",
                      "parentUUID": "92c8f485-fefb-4b70-9768-084f3460b61d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ad3695a9-eb07-4188-9e4e-189fb290bec8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                },
                {
                  "uuid": "6cc27511-a0c9-4498-9e22-2f50a96efc7b",
                  "title": "setSavedPostStatus function ",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userPostServices.js",
                  "file": "\\test\\services\\userPostServices.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "first test,",
                      "fullTitle": "User Post Test User Post services Test setSavedPostStatus function  first test,",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let user = {\n  saved: [\n    {\n      savedPost: \"1\",\n    },\n    {\n      savedPost: \"2\",\n    },\n    {\n      savedPost: \"3\",\n    },\n  ],\n};\nlet user2 = {\n  saved: [\n    {\n      savedPost: \"10\",\n    },\n    {\n      savedPost: \"20\",\n    },\n    {\n      savedPost: \"30\",\n    },\n  ],\n};\nlet posts = [\n  {\n    _id: \"1\",\n  },\n  {\n    _id: \"3\",\n  },\n  {\n    _id: \"4\",\n  },\n  {\n    _id: \"6\",\n  },\n];\nlet posts2 = [\n  {\n    _id: \"1\",\n  },\n  {\n    _id: \"3\",\n  },\n  {\n    _id: \"4\",\n  },\n  {\n    _id: \"6\",\n  },\n];\nconst result = postservices.setSavedPostStatus(user, posts);\nconst result2 = postservices.setSavedPostStatus(user2, posts2);\nexpect(result.length).to.equal(4);\nexpect(result[0][\"isSaved\"]).to.equal(true);\nexpect(result[1][\"isSaved\"]).to.equal(true);\nexpect(result[2][\"isSaved\"]).to.equal(false);\nexpect(result[3][\"isSaved\"]).to.equal(false);\nexpect(result2.length).to.equal(4);\nexpect(result2[0][\"isSaved\"]).to.equal(false);\nexpect(result2[1][\"isSaved\"]).to.equal(false);\nexpect(result2[2][\"isSaved\"]).to.equal(false);\nexpect(result2[3][\"isSaved\"]).to.equal(false);",
                      "err": {},
                      "uuid": "f99c573d-7e69-4bf6-a44d-0e7b1c71a613",
                      "parentUUID": "6cc27511-a0c9-4498-9e22-2f50a96efc7b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f99c573d-7e69-4bf6-a44d-0e7b1c71a613"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                },
                {
                  "uuid": "4d4698b5-c88d-4e2f-9bd3-500aee893a9a",
                  "title": "setHiddenPostStatus function ",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userPostServices.js",
                  "file": "\\test\\services\\userPostServices.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "first test,",
                      "fullTitle": "User Post Test User Post services Test setHiddenPostStatus function  first test,",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let user = {\n  hidden: [\"1\", \"4\"],\n};\nlet user2 = {\n  hidden: [{\n    _id:\"10\"\n  }],\n};\nlet posts = [\n  {\n    _id: \"1\",\n  },\n  {\n    _id: \"3\",\n  },\n  {\n    _id: \"4\",\n  },\n  {\n    _id: \"6\",\n  },\n];\nlet posts2 = [\n  {\n    _id: \"1\",\n  },\n  {\n    _id: \"3\",\n  },\n  {\n    _id: \"4\",\n  },\n  {\n    _id: \"6\",\n  },\n];\nconst result = postservices.setHiddenPostStatus(user, posts);\nconst result2 = postservices.setHiddenPostStatus(user2, posts2);\nexpect(result.length).to.equal(4);\nexpect(result[0][\"isHidden\"]).to.equal(true);\nexpect(result[1][\"isHidden\"]).to.equal(false);\nexpect(result[2][\"isHidden\"]).to.equal(true);\nexpect(result[3][\"isHidden\"]).to.equal(false);\nexpect(result2.length).to.equal(4);\nexpect(result2[0][\"isHidden\"]).to.equal(false);\nexpect(result2[1][\"isHidden\"]).to.equal(false);\nexpect(result2[2][\"isHidden\"]).to.equal(false);\nexpect(result2[3][\"isHidden\"]).to.equal(false);",
                      "err": {},
                      "uuid": "182b625e-ed1c-400b-96e5-1a929936b467",
                      "parentUUID": "4d4698b5-c88d-4e2f-9bd3-500aee893a9a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "182b625e-ed1c-400b-96e5-1a929936b467"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                },
                {
                  "uuid": "2ca7c84a-a3df-4860-9a38-0ffe2cbcecd6",
                  "title": "setPostOwnerData function ",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userPostServices.js",
                  "file": "\\test\\services\\userPostServices.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "first test,",
                      "fullTitle": "User Post Test User Post services Test setPostOwnerData function  first test,",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let posts = [\n  {\n    _id: \"1\",\n    ownerType: \"User\",\n    owner: { _id: \"1\", userName: \"ahmed\" },\n    author: {\n      _id: \"1\",\n      userName: \"ahmed\",\n    },\n    sharedFrom:{\n      _id: \"10\",\n      ownerType: \"User\",\n      owner: { _id: \"1\", userName: \"ahmed\" ,profilePicture:\"\"},\n      author: {\n        _id: \"1\",\n        userName: \"ahmed\",\n      },\n    }\n  },\n  {\n    _id: \"3\",\n    ownerType: \"User\",\n    owner: {\n      _id: \"3\",\n      userName: \"ahmed2\",\n    },\n    author: {\n      _id: \"3\",\n      userName: \"ahmed2\",\n    },\n    sharedFrom:{\n      _id: \"11\",\n      ownerType: \"Subreddit\",\n      owner: { _id: \"1\", fixedName: \"ahmed\" ,icon:\"\"},\n      author: {\n        _id: \"1\",\n        userName: \"ahmed\",\n      },\n    }\n  },\n  {\n    _id: \"4\",\n    ownerType: \"Subreddit\",\n    owner: {\n      _id: \"1\",\n      fixedName: \"ahmed3\",\n    },\n    author: {\n      _id: \"1\",\n      userName: \"ahmed\",\n    },\n  },\n  {\n    _id: \"6\",\n    ownerType: \"Subreddit\",\n    owner: {\n      _id: \"2\",\n      fixedName: \"ahmed4\",\n    },\n    author: {\n      _id: \"1\",\n      userName: \"ahmed\",\n    },\n  },\n];\nconst result = postservices.setPostOwnerData(posts);\nexpect(result.length).to.equal(4);\nexpect(result[0][\"name\"]).to.equal(\"ahmed\");\nexpect(result[1][\"name\"]).to.equal(\"ahmed2\");\nexpect(result[2][\"name\"]).to.equal(\"ahmed3\");\nexpect(result[3][\"name\"]).to.equal(\"ahmed4\");",
                      "err": {},
                      "uuid": "dd3ec893-eedf-4faa-b418-bc8222dbf51a",
                      "parentUUID": "2ca7c84a-a3df-4860-9a38-0ffe2cbcecd6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "dd3ec893-eedf-4faa-b418-bc8222dbf51a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                },
                {
                  "uuid": "99ffa590-c34d-4049-88af-2f1c9f0cf4eb",
                  "title": "setVoteStatus function ",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userPostServices.js",
                  "file": "\\test\\services\\userPostServices.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "first test,",
                      "fullTitle": "User Post Test User Post services Test setVoteStatus function  first test,",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let saved = [\n  {\n    savedPost: {\n      _id: \"1\",\n      postVoteStatus: 1,\n      owner: {\n        _id: \"1\",\n        userName: \"ahmed\",\n        profilePicture: \"users/default.png\",\n      },\n      ownerType: \"User\",\n      author: {\n        _id: \"1\",\n        userName: \"ahmed\",\n      },\n    },\n  },\n  {\n    savedPost: {\n      _id: \"2\",\n      postVoteStatus: 1,\n      owner: {\n        _id: \"1\",\n        fixedName: \"ahmed\",\n        icon: \"subreddits/default.png\",\n      },\n      ownerType: \"Subreddit\",\n      author: {\n        _id: \"1\",\n        userName: \"ahmed\",\n      },\n    },\n  },\n  {\n    savedPost: {\n      _id: \"3\",\n      postVoteStatus: 1,\n      owner: {\n        _id: \"1\",\n        fixedName: \"ahmed\",\n        icon: \"subreddits/default.png\",\n      },\n      ownerType: \"Subreddit\",\n      author: {\n        _id: \"1\",\n        userName: \"ahmed\",\n      },\n    },\n  },\n];\nlet user = {\n  votePost: [\n    {\n      posts: \"1\",\n      postVoteStatus: 1,\n    },\n    {\n      posts: \"2\",\n      postVoteStatus: -1,\n    },\n    {\n      posts: \"4\",\n      postVoteStatus: -1,\n    },\n  ],\n};\nconst result = postservices.setVoteStatus(user, saved);\nexpect(result.length).to.equal(3);\nexpect(result[2].savedPost.author.name).to.equal(\"ahmed\");\nexpect(result[2].savedPost.author._id).to.equal(\"1\");\nexpect(result[2].savedPost.owner.name).to.equal(\"ahmed\");\nexpect(result[2].savedPost.owner._id).to.equal(\"1\");\nexpect(result[2].savedPost.owner.icon).to.equal(\n  `${process.env.BACKDOMAIN}/users/default.png`\n);\nexpect(result[2].savedPost.ownerType).to.equal(\"User\");\nexpect(result[2].savedPost.postVoteStatus).to.equal(1);\nexpect(result[1].savedPost.owner.name).to.equal(\"ahmed\");\nexpect(result[1].savedPost.owner._id).to.equal(\"1\");\nexpect(result[1].savedPost.owner.icon).to.equal(\n  \"subreddits/default.png\"\n);\nexpect(result[1].savedPost.ownerType).to.equal(\"Subreddit\");\nexpect(result[1].savedPost.postVoteStatus).to.equal(-1);\nexpect(result[0].savedPost.owner.name).to.equal(\"ahmed\");\nexpect(result[0].savedPost.owner._id).to.equal(\"1\");\nexpect(result[0].savedPost.owner.icon).to.equal(\n  \"subreddits/default.png\"\n);\nexpect(result[0].savedPost.ownerType).to.equal(\"Subreddit\");\nexpect(result[0].savedPost.postVoteStatus).to.equal(0);",
                      "err": {},
                      "uuid": "e569205d-b654-46e6-bcee-ae07ef8370c6",
                      "parentUUID": "99ffa590-c34d-4049-88af-2f1c9f0cf4eb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e569205d-b654-46e6-bcee-ae07ef8370c6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                },
                {
                  "uuid": "a9225407-04ca-40d3-a70c-806b80ee000d",
                  "title": "setHiddenPostStatus function ",
                  "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userPostServices.js",
                  "file": "\\test\\services\\userPostServices.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "first test,",
                      "fullTitle": "User Post Test User Post services Test setHiddenPostStatus function  first test,",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let user = {\n  spam: [\"1\", \"4\"],\n};\nlet user2 = {\n  spam: [{\n    _id:\"10\"\n  }],\n};\nlet posts = [\n  {\n    _id: \"1\",\n  },\n  {\n    _id: \"3\",\n  },\n  {\n    _id: \"4\",\n  },\n  {\n    _id: \"6\",\n  },\n];\nlet posts2 = [\n  {\n    _id: \"1\",\n  },\n  {\n    _id: \"3\",\n  },\n  {\n    _id: \"4\",\n  },\n  {\n    _id: \"6\",\n  },\n];\nconst result = postservices.setSpamPostStatus(user, posts);\nconst result2 = postservices.setSpamPostStatus(user2, posts2);\nexpect(result.length).to.equal(4);\nexpect(result[0][\"isSpam\"]).to.equal(true);\nexpect(result[1][\"isSpam\"]).to.equal(false);\nexpect(result[2][\"isSpam\"]).to.equal(true);\nexpect(result[3][\"isSpam\"]).to.equal(false);\nexpect(result2.length).to.equal(4);\nexpect(result2[0][\"isSpam\"]).to.equal(false);\nexpect(result2[1][\"isSpam\"]).to.equal(false);\nexpect(result2[2][\"isSpam\"]).to.equal(false);\nexpect(result2[3][\"isSpam\"]).to.equal(false);",
                      "err": {},
                      "uuid": "489129fa-d795-41f2-872e-30b827078f51",
                      "parentUUID": "a9225407-04ca-40d3-a70c-806b80ee000d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "489129fa-d795-41f2-872e-30b827078f51"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 1000000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "fc9d1f14-ea2c-4632-8b0d-a77be4718961",
          "title": "Authentication Test",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
          "file": "\\test\\services\\userServices.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bde1043f-324e-473f-98fc-f2d0d9904b87",
              "title": "Sign-up services Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test (success operation of database)",
                  "fullTitle": "Authentication Test Sign-up services Test first test (success operation of database)",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  createOne: function (userData) {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"1\",\n      },\n    };\n    return response;\n  },\n};\nconsole.log(\"hi\");\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.signUp(\n  \"ahmed@gmail\",\n  \"ahmed\",\n  \"Aa1234*\"\n);\nassert.equal(output.success, true);\nassert.notEqual(output.token, false);",
                  "err": {},
                  "uuid": "96938b28-69cd-4602-87cc-b89140878ab5",
                  "parentUUID": "bde1043f-324e-473f-98fc-f2d0d9904b87",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test(fail operation of database)",
                  "fullTitle": "Authentication Test Sign-up services Test second test(fail operation of database)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  createOne: (userData) => {\n    const response = {\n      success: false,\n      error: mongoErrors.NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.signUp(\n  \"ahmed@gmail\",\n  \"ahmed\",\n  \"Aa1234*\"\n);\nassert.equal(output.success, false);\nassert.equal(output.error, userErrors.USER_ALREADY_EXISTS);",
                  "err": {},
                  "uuid": "176c4896-5a72-4fd4-bed2-e0d7ff76afcd",
                  "parentUUID": "bde1043f-324e-473f-98fc-f2d0d9904b87",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "96938b28-69cd-4602-87cc-b89140878ab5",
                "176c4896-5a72-4fd4-bed2-e0d7ff76afcd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "7d82a053-ba52-4ff7-8d79-391b2df616fc",
              "title": "Log-in services Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test (success operation of database)",
                  "fullTitle": "Authentication Test Log-in services Test first test (success operation of database)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findByUserName: (userData) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"1\",\n        password: \"Aa1234*\",\n        checkPassword: async (data1, data2) => {\n          return true;\n        },\n      },\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.logIn(\"ahmed\", \"Aa1234*\");\nassert.equal(output.success, true);\nassert.notEqual(output.token, false);",
                  "err": {},
                  "uuid": "46f00ccb-82eb-45f4-a26c-2519c8d51772",
                  "parentUUID": "7d82a053-ba52-4ff7-8d79-391b2df616fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test(success operation of database but wrong password)",
                  "fullTitle": "Authentication Test Log-in services Test second test(success operation of database but wrong password)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findByUserName: (userData) => {\n    const response = {\n      success: false,\n      error: mongoErrors.NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.logIn(\"\", \"\");\nassert.equal(output.success, false);\nassert.equal(output.error, userErrors.USER_NOT_FOUND);",
                  "err": {},
                  "uuid": "f0b29475-5e95-4686-8b87-fe88222b8985",
                  "parentUUID": "7d82a053-ba52-4ff7-8d79-391b2df616fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test(incorrect password)",
                  "fullTitle": "Authentication Test Log-in services Test thrid test(incorrect password)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findByUserName: (userData) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"1\",\n        password: \"123456\",\n        checkPassword: async (data1, data2) => {\n          return false;\n        },\n      },\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.logIn(\"ahmed\", \"1234\");\nassert.equal(output.success, false);\nassert.equal(output.error, userErrors.INCORRECT_PASSWORD);",
                  "err": {},
                  "uuid": "a776597a-361a-483f-9ab8-4edc64039be7",
                  "parentUUID": "7d82a053-ba52-4ff7-8d79-391b2df616fc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "46f00ccb-82eb-45f4-a26c-2519c8d51772",
                "f0b29475-5e95-4686-8b87-fe88222b8985",
                "a776597a-361a-483f-9ab8-4edc64039be7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "8c06d15f-b197-4644-a4a3-32ff9f5e4dac",
              "title": "Forgot-username services Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test (success operation of database)",
                  "fullTitle": "Authentication Test Forgot-username services Test first test (success operation of database)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findByEmail: (userData) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"1\",\n        password: \"Aa1234*\",\n        checkPassword: async (data1, data2) => {\n          return true;\n        },\n      },\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.forgotUserName(\"\");\nassert.equal(output.success, true);",
                  "err": {},
                  "uuid": "a16bb10a-2704-4f27-a606-8acd07e56b9a",
                  "parentUUID": "8c06d15f-b197-4644-a4a3-32ff9f5e4dac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test(fail operation of database)",
                  "fullTitle": "Authentication Test Forgot-username services Test second test(fail operation of database)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findByEmail: (userData) => {\n    const response = {\n      success: false,\n      error: mongoErrors.NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.forgotUserName(\"\");\nassert.equal(output.success, false);\nassert.equal(output.error, userErrors.USER_NOT_FOUND);",
                  "err": {},
                  "uuid": "62a6ee41-0bd3-42e8-a672-2b92fb83ee99",
                  "parentUUID": "8c06d15f-b197-4644-a4a3-32ff9f5e4dac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "third test(exception in mail service)",
                  "fullTitle": "Authentication Test Forgot-username services Test third test(exception in mail service)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findByEmail: (userData) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"1\",\n        password: \"Aa1234*\",\n        checkPassword: async (data1, data2) => {\n          return true;\n        },\n      },\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n});\nconst output = await userServiceObj.forgotUserName(\"\");\nassert.equal(output.success, false);\nassert.equal(output.error, userErrors.EMAIL_ERROR);",
                  "err": {},
                  "uuid": "cd2353f2-c1da-4999-8334-274c598d9c97",
                  "parentUUID": "8c06d15f-b197-4644-a4a3-32ff9f5e4dac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a16bb10a-2704-4f27-a606-8acd07e56b9a",
                "62a6ee41-0bd3-42e8-a672-2b92fb83ee99",
                "cd2353f2-c1da-4999-8334-274c598d9c97"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "07327dae-ebf2-4112-9c87-b7013ece9ab0",
              "title": "Forgot-password services Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test (success operation of database)",
                  "fullTitle": "Authentication Test Forgot-password services Test first test (success operation of database)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findByEmailAndUserName: (userData) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"1\",\n        profileBackground: {\n          replace: () => {\n            return \"string\";\n          },\n        },\n        profilePicture: {\n          replace: () => {\n            return \"string\";\n          },\n        },\n        save: (password, passwordDB) => {\n          return true;\n        },\n        createPasswordResetToken: () => {\n          return true;\n        },\n      },\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.forgotPassword(\"\", \"\");\nassert.equal(output.success, true);",
                  "err": {},
                  "uuid": "4dae04e6-4427-4b50-a378-994d38aced9c",
                  "parentUUID": "07327dae-ebf2-4112-9c87-b7013ece9ab0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test(success operation of database but  exception occured)",
                  "fullTitle": "Authentication Test Forgot-password services Test second test(success operation of database but  exception occured)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findByEmailAndUserName: (userData) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"1\",\n        save: (password, passwordDB) => {\n          return true;\n        },\n      },\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n});\nconst output = await userServiceObj.forgotPassword(\"\", \"\");\nassert.equal(output.success, false);\nassert.equal(output.error, userErrors.EMAIL_ERROR);",
                  "err": {},
                  "uuid": "723c0e4f-15d7-45fa-b163-62564903ce9e",
                  "parentUUID": "07327dae-ebf2-4112-9c87-b7013ece9ab0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test(fail operation of database)",
                  "fullTitle": "Authentication Test Forgot-password services Test thrid test(fail operation of database)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findByEmailAndUserName: (userData) => {\n    const response = {\n      success: false,\n      error: mongoErrors.NOT_FOUND,\n      msg: \"\",\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.forgotPassword(\"\", \"\");\nassert.equal(output.success, false);\nassert.equal(output.error, userErrors.USER_NOT_FOUND);",
                  "err": {},
                  "uuid": "66afcd46-dd72-46d6-a7ac-98429adc34ac",
                  "parentUUID": "07327dae-ebf2-4112-9c87-b7013ece9ab0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4dae04e6-4427-4b50-a378-994d38aced9c",
                "723c0e4f-15d7-45fa-b163-62564903ce9e",
                "66afcd46-dd72-46d6-a7ac-98429adc34ac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "1afe34fc-c14f-44f1-b407-f5972f3132d0",
              "title": "reset-password services Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test (success operation of database)",
                  "fullTitle": "Authentication Test reset-password services Test first test (success operation of database)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findByResetPassword: (userData) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"1\",\n        profileBackground: {\n          replace: () => {\n            return \"string\";\n          },\n        },\n        profilePicture: {\n          replace: () => {\n            return \"string\";\n          },\n        },\n        save: (password, passwordDB) => {\n          return true;\n        },\n      },\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.resetPassword(\"\", \"\");\nassert.equal(output.success, true);\nassert.notEqual(output.token, false);",
                  "err": {},
                  "uuid": "ca9b430d-313a-4177-aef0-43ea21ceb142",
                  "parentUUID": "1afe34fc-c14f-44f1-b407-f5972f3132d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test(fao; operation of database)",
                  "fullTitle": "Authentication Test reset-password services Test second test(fao; operation of database)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findByResetPassword: (userData) => {\n    const response = {\n      success: false,\n      error: mongoErrors.NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.resetPassword(\"\", \"\");\nassert.equal(output.success, false);\nassert.equal(output.error, userErrors.INVALID_RESET_TOKEN);",
                  "err": {},
                  "uuid": "e1978689-8696-45a0-bc4a-fd6c9cc270b3",
                  "parentUUID": "1afe34fc-c14f-44f1-b407-f5972f3132d0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ca9b430d-313a-4177-aef0-43ea21ceb142",
                "e1978689-8696-45a0-bc4a-fd6c9cc270b3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        },
        {
          "uuid": "2ec5dfdf-2e2d-493f-baa2-a7080e44e434",
          "title": "User Services Test",
          "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
          "file": "\\test\\services\\userServices.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3b676e49-50dd-4470-97bc-3cbebbcd418a",
              "title": "Get user preferences ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test Get user preferences  test should be success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceObj = new UserService({});\nlet user = {\n  canbeFollowed: true,\n  nsfw: true,\n  displayName: \"ahmed\",\n  profilePicture: \"img.png\",\n};\nlet result = userServiceObj.getPrefs(user);\nassert.equal(result.displayName, user.displayName);\nassert.equal(result.nsfw, user.nsfw);",
                  "err": {},
                  "uuid": "4228dbc8-2167-4a9c-8bd3-35d01d87c43d",
                  "parentUUID": "3b676e49-50dd-4470-97bc-3cbebbcd418a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4228dbc8-2167-4a9c-8bd3-35d01d87c43d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "ed062e48-4b93-4de7-8ea0-3ab21b859242",
              "title": "Update user preferences ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test Update user preferences  test should be success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  updateOne: (userData, body) => {\n    const response = {\n      doc: {\n        canbeFollowed: false,\n        nsfw: true,\n        displayName: \"ahmed\",\n        profilePicture: \"img.png\",\n      },\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n});\nconst query = {\n  canbeFollowed: false,\n};\nlet result = await userServiceObj.updatePrefs(query, \"\");\nassert.equal(result.displayName, \"ahmed\");\nassert.equal(result.canbeFollowed, false);\nassert.equal(result.nsfw, true);",
                  "err": {},
                  "uuid": "1fd06220-518c-45e8-b8c6-4bb56044823f",
                  "parentUUID": "ed062e48-4b93-4de7-8ea0-3ab21b859242",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1fd06220-518c-45e8-b8c6-4bb56044823f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "33a0522c-7396-47b6-bbbf-6212d9587055",
              "title": "Username available",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "available",
                  "fullTitle": "User Services Test Username available available",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findByName: async (userName) => {\n    return { success: false };\n  },\n};\nconst userServices = new UserService({\n  UserRepository,\n});\nconst available = await userServices.isAvailable(\"kiro\");\nexpect(available).to.equal(true);",
                  "err": {},
                  "uuid": "a9d299f2-5339-4ca6-a506-2643613ffbe8",
                  "parentUUID": "33a0522c-7396-47b6-bbbf-6212d9587055",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "unavailable",
                  "fullTitle": "User Services Test Username available unavailable",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findByName: async (userName) => {\n    return { success: true };\n  },\n};\nconst userServices = new UserService({\n  UserRepository,\n});\nconst available = await userServices.isAvailable(\"kiro\");\nexpect(available).to.equal(false);",
                  "err": {},
                  "uuid": "23ab2298-f9d0-4dfd-abf6-b7bfd6a0b91a",
                  "parentUUID": "33a0522c-7396-47b6-bbbf-6212d9587055",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a9d299f2-5339-4ca6-a506-2643613ffbe8",
                "23ab2298-f9d0-4dfd-abf6-b7bfd6a0b91a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "975a6d3d-cf70-468d-a1be-e5e88a5f620c",
              "title": "Subscribe",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "subscribe(fail)",
                  "fullTitle": "User Services Test Subscribe subscribe(fail)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "action = \"sub\";\nUserRepository.isSubscribed = async (userName) => true;\nconst subscribed = await userServices.subscribe(\n  userId,\n  subredditId,\n  action\n);\nexpect(subscribed).to.equal(false);",
                  "err": {},
                  "uuid": "2e5da297-6590-4c44-b666-19ad0623c671",
                  "parentUUID": "975a6d3d-cf70-468d-a1be-e5e88a5f620c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "unsubscribe(fail)",
                  "fullTitle": "User Services Test Subscribe unsubscribe(fail)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "action = \"unsub\";\nUserRepository.isSubscribed = async (userName) => false;\nconst subscribed = await userServices.subscribe(\n  userId,\n  subredditId,\n  action\n);\nexpect(subscribed).to.equal(false);",
                  "err": {},
                  "uuid": "9fd11eaa-a43f-4aa7-9c86-52fee8498049",
                  "parentUUID": "975a6d3d-cf70-468d-a1be-e5e88a5f620c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "invalid action",
                  "fullTitle": "User Services Test Subscribe invalid action",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "action = \"not a valid action\";\nconst subscribed = await userServices.subscribe(\n  userId,\n  subredditId,\n  action\n);\nexpect(subscribed).to.equal(false);",
                  "err": {},
                  "uuid": "1be571ed-aea4-4f59-981f-6122b678dffe",
                  "parentUUID": "975a6d3d-cf70-468d-a1be-e5e88a5f620c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2e5da297-6590-4c44-b666-19ad0623c671",
                "9fd11eaa-a43f-4aa7-9c86-52fee8498049",
                "1be571ed-aea4-4f59-981f-6122b678dffe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "b55db82d-05b9-4d61-a4c4-9ebefe076c43",
              "title": "Subscribe",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "subscribe(fail)",
                  "fullTitle": "User Services Test Subscribe subscribe(fail)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  push: async (id, obj) => {},\n  pull: async (id, obj) => {},\n  isSubscribed:async  () => {\n    return true;\n  },\n  subscribe:async  () => {\n    return true;\n  },\n};\nconst SubredditRepository = {\n  push: async (id, obj) => {},\n  pull: async (id, obj) => {},\n  unSubscribe :async  () => {\n    return true;\n  },\n  isSubscribed:async  () => {\n    return true;\n  },\n};\nconst userServices = new UserService({\n  UserRepository,SubredditRepository\n});\nconst userId = \"123d493c3ff67d626ec994f7\";\nconst subredditId = \"456d493c3ff67d626ec994f7\";\nlet action = \"sub\";\naction = \"sub\";\nUserRepository.isSubscribed = async (userName) => true;\nconst subscribed = await userServices.subscribe(\n  userId,\n  subredditId,\n  action\n);\nexpect(subscribed).to.equal(false);",
                  "err": {},
                  "uuid": "da0563d9-831a-4834-870d-9f3dc7b532f4",
                  "parentUUID": "b55db82d-05b9-4d61-a4c4-9ebefe076c43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "unsubscribe(fail)",
                  "fullTitle": "User Services Test Subscribe unsubscribe(fail)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  push: async (id, obj) => {},\n  pull: async (id, obj) => {},\n  unSubscribe :async  () => {\n    return true;\n  },\n  isSubscribed:async  () => {\n    return true;\n  },\n};\nconst SubredditRepository = {\n  push: async (id, obj) => {},\n  pull: async (id, obj) => {},\n  unSubscribe :async  () => {\n    return true;\n  },\n  isSubscribed:async  () => {\n    return true;\n  },\n};\nconst userServices = new UserService({\n  UserRepository,SubredditRepository\n});\nconst userId = \"123d493c3ff67d626ec994f7\";\nconst subredditId = \"456d493c3ff67d626ec994f7\";\nlet action = \"unsub\";\naction = \"unsub\";\nUserRepository.isSubscribed = async (userName) => true;\nconst subscribed = await userServices.subscribe(\n  userId,\n  subredditId,\n  action\n);\nexpect(subscribed).to.equal(true);",
                  "err": {},
                  "uuid": "8f32aa33-5dd2-49c9-8429-d6602441b556",
                  "parentUUID": "b55db82d-05b9-4d61-a4c4-9ebefe076c43",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da0563d9-831a-4834-870d-9f3dc7b532f4",
                "8f32aa33-5dd2-49c9-8429-d6602441b556"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "2567a969-e618-4116-9674-2f7d138c250b",
              "title": "addUserImageURL  ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test addUserImageURL   test should be success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  updateOne: (userData, body) => {\n    const response = {\n      doc: {\n        canbeFollowed: false,\n        nsfw: true,\n        displayName: \"ahmed\",\n        profilePicture: \"img.png\",\n      },\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({ UserRepository });\nlet user = {\n  canbeFollowed: true,\n  nsfw: true,\n  displayName: \"ahmed\",\n  profilePicture: \"img.png\",\n  profileBackground: \"img.png\",\n};\nlet result = await userServiceObj.addUserImageURL(\n  \"!\",\n  \"profilePicture\",\n  \"1\"\n);\nassert.equal(result.displayName, user.displayName);\nassert.equal(result.nsfw, user.nsfw);\nresult = await userServiceObj.addUserImageURL(\n  \"!\",\n  \"profileBackground\",\n  \"1\"\n);\nassert.equal(result.displayName, user.displayName);\nassert.equal(result.nsfw, user.nsfw);",
                  "err": {},
                  "uuid": "3e247841-2878-4e78-ae73-6183d5221b57",
                  "parentUUID": "2567a969-e618-4116-9674-2f7d138c250b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3e247841-2878-4e78-ae73-6183d5221b57"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "cd95c651-cc2b-4765-8231-212b7f57399e",
              "title": "getSocialLinks  ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test getSocialLinks   test should be success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const SocialRepository = {\n  getAll: (userData, body) => {\n    const response = {\n      canbeFollowed: false,\n      nsfw: true,\n      displayName: \"ahmed\",\n      profilePicture: \"img.png\",\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({ SocialRepository });\nlet user = {\n  canbeFollowed: true,\n  nsfw: true,\n  displayName: \"ahmed\",\n  profilePicture: \"img.png\",\n  profileBackground: \"img.png\",\n};\nlet result = await userServiceObj.getSocialLinks(\n  \"!\",\n  \"profilePicture\",\n  \"1\"\n);\nassert.equal(result.displayName, user.displayName);\nassert.equal(result.nsfw, user.nsfw);",
                  "err": {},
                  "uuid": "d7a3ee21-2899-4fd3-ac1b-30c1e180d045",
                  "parentUUID": "cd95c651-cc2b-4765-8231-212b7f57399e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d7a3ee21-2899-4fd3-ac1b-30c1e180d045"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "3d0fa2e4-1cf7-4eb8-80fc-ac53a57b75d7",
              "title": "createSocialLinks  ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test createSocialLinks   test should be success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const SocialRepository = {\n  findOne: (userData) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst UserRepository = {\n  updateSocialLinks: (userData, body) => {\n    const response = {\n      doc: {\n        canbeFollowed: false,\n        nsfw: true,\n        displayName: \"ahmed\",\n        profilePicture: \"img.png\",\n      },\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  SocialRepository,\n});\nlet me = {\n  socialLinks: [],\n  _id: \"1\",\n};\nlet result = await userServiceObj.createSocialLinks(\n  me,\n  \"profilePicture\",\n  \"1\",\n  \"1\"\n);\nassert.equal(result.success, true);",
                  "err": {},
                  "uuid": "8b82d651-59e8-4b8b-8cfa-f34c4df7efa5",
                  "parentUUID": "3d0fa2e4-1cf7-4eb8-80fc-ac53a57b75d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test createSocialLinks   test should be success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const SocialRepository = {\n  findOne: (userData) => {\n    const response = {\n      success: true,\n    };\n    return response;\n  },\n};\nconst UserRepository = {\n  updateSocialLinks: (userData, body) => {\n    const response = {\n      doc: {\n        canbeFollowed: false,\n        nsfw: true,\n        displayName: \"ahmed\",\n        profilePicture: \"img.png\",\n      },\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  SocialRepository,\n});\nlet me = {\n  socialLinks: [\"1\", \"2\", \"3\", \"4\", \"5\"],\n  _id: \"1\",\n};\nlet result = await userServiceObj.createSocialLinks(\n  me,\n  \"profilePicture\",\n  \"1\",\n  \"1\"\n);\nassert.equal(result.success, false);\nassert.equal(result.msg, \"Max Links 5\");",
                  "err": {},
                  "uuid": "ab83dcd2-4e55-47fe-83e9-e9feefcd3e6e",
                  "parentUUID": "3d0fa2e4-1cf7-4eb8-80fc-ac53a57b75d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test createSocialLinks   test should be success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const SocialRepository = {\n  findOne: (userData) => {\n    const response = {\n      success: false,\n    };\n    return response;\n  },\n};\nconst UserRepository = {\n  updateSocialLinks: (userData, body) => {\n    const response = {\n      doc: {\n        canbeFollowed: false,\n        nsfw: true,\n        displayName: \"ahmed\",\n        profilePicture: \"img.png\",\n      },\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  SocialRepository,\n});\nlet me = {\n  socialLinks: [\"1\", \"2\", \"3\", \"4\"],\n  _id: \"1\",\n};\nlet result = await userServiceObj.createSocialLinks(\n  me,\n  \"profilePicture\",\n  \"1\",\n  \"1\"\n);\nassert.equal(result.success, false);\nassert.equal(result.msg, \"Invalid social Id\");",
                  "err": {},
                  "uuid": "a6a7807f-a249-460c-9601-e19d7c9cc304",
                  "parentUUID": "3d0fa2e4-1cf7-4eb8-80fc-ac53a57b75d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b82d651-59e8-4b8b-8cfa-f34c4df7efa5",
                "ab83dcd2-4e55-47fe-83e9-e9feefcd3e6e",
                "a6a7807f-a249-460c-9601-e19d7c9cc304"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "a0237729-cc28-422f-a657-fdd763550624",
              "title": "updateSocialLinks  ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test updateSocialLinks   test should be success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceObj = new UserService({});\nlet me = {\n  socialLinks: [\n    {\n      _id: \"1\",\n      userLink: \"\",\n      displayText: \"\",\n    },\n    {\n      _id: \"2\",\n      userLink: \"\",\n      displayText: \"\",\n    },\n  ],\n  _id: \"3\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet result = await userServiceObj.updateSocialLinks(me, \"2\", true, true);\nassert.equal(result.success, true);",
                  "err": {},
                  "uuid": "9cae9c83-0f98-4a97-ba77-2dd4df0be5b1",
                  "parentUUID": "a0237729-cc28-422f-a657-fdd763550624",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test updateSocialLinks   test should be success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceObj = new UserService({});\nlet me = {\n  socialLinks: [\n    {\n      _id: \"1\",\n      userLink: \"\",\n      displayText: \"\",\n    },\n    {\n      _id: \"2\",\n      userLink: \"\",\n      displayText: \"\",\n    },\n  ],\n  _id: \"3\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet result = await userServiceObj.updateSocialLinks(me, \"5\", true, true);\nassert.equal(result.success, false);",
                  "err": {},
                  "uuid": "86ba3043-e31d-4907-a5d4-8b77f89046d8",
                  "parentUUID": "a0237729-cc28-422f-a657-fdd763550624",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9cae9c83-0f98-4a97-ba77-2dd4df0be5b1",
                "86ba3043-e31d-4907-a5d4-8b77f89046d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "52de5d4b-eb33-4028-8a95-3d5b8a98d887",
              "title": "deleteSocialLinks  ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test deleteSocialLinks   test should be success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceObj = new UserService({});\nlet me = {\n  socialLinks: [\n    {\n      _id: \"1\",\n      userLink: \"\",\n      displayText: \"\",\n    },\n    {\n      _id: \"2\",\n      userLink: \"\",\n      displayText: \"\",\n    },\n  ],\n  _id: \"3\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet result = await userServiceObj.deleteSocialLinks(me, \"2\");\nassert.equal(result.success, true);",
                  "err": {},
                  "uuid": "7cb65c3d-1d59-4aaa-95b7-576fe5d984d5",
                  "parentUUID": "52de5d4b-eb33-4028-8a95-3d5b8a98d887",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test deleteSocialLinks   test should be success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceObj = new UserService({});\nlet me = {\n  socialLinks: [\n    {\n      _id: \"1\",\n      userLink: \"\",\n      displayText: \"\",\n    },\n    {\n      _id: \"2\",\n      userLink: \"\",\n      displayText: \"\",\n    },\n  ],\n  _id: \"3\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet result = await userServiceObj.deleteSocialLinks(me, \"5\");\nassert.equal(result.success, false);",
                  "err": {},
                  "uuid": "8a6a5681-1c3e-4287-a7bb-13a92d7970d9",
                  "parentUUID": "52de5d4b-eb33-4028-8a95-3d5b8a98d887",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7cb65c3d-1d59-4aaa-95b7-576fe5d984d5",
                "8a6a5681-1c3e-4287-a7bb-13a92d7970d9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "7955f5d8-56bf-41e8-a819-60b9d96b437d",
              "title": "replaceProfile  ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test replaceProfile   test should be success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceObj = new UserService({});\nlet me = {\n  _id: \"3\",\n  profileBackground: \"\",\n  profilePicture: `${process.env.BACKDOMAIN}/icon.png`,\n  save: async () => {\n    return true;\n  },\n};\nlet result = userServiceObj.replaceProfile(me);\nassert.equal(result.profilePicture, \"icon.png\");\nassert.equal(result.profileBackground, me.profileBackground);",
                  "err": {},
                  "uuid": "4a38e4c5-fcd2-4a9c-b98f-9679a007b72e",
                  "parentUUID": "7955f5d8-56bf-41e8-a819-60b9d96b437d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a38e4c5-fcd2-4a9c-b98f-9679a007b72e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "84d697ee-42c5-4beb-9f01-32cd8e8ee8be",
              "title": "checkBlockStatus ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test checkBlockStatus  test should be success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceObj = new UserService({});\nlet me = {\n  meUserRelationship: [\n    {\n      userId: \"2\",\n      status: \"followed\",\n    },\n    {\n      userId: \"3\",\n      status: \"blocked\",\n    },\n  ],\n  _id: \"1\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet other = {\n  meUserRelationship: [\n    {\n      userId: \"1\",\n      status: \"followed\",\n    },\n    {\n      userId: \"4\",\n      status: \"blocked\",\n    },\n    {\n      userId: \"5\",\n      status: \"blocked\",\n    },\n  ],\n  _id: \"2\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet result = await userServiceObj.checkBlockStatus(me, other);\nassert.equal(result, false);",
                  "err": {},
                  "uuid": "9fc04a3b-dac7-4914-b92b-06e1ec56f781",
                  "parentUUID": "84d697ee-42c5-4beb-9f01-32cd8e8ee8be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test checkBlockStatus  test should be success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceObj = new UserService({});\nlet me = {\n  meUserRelationship: [\n    {\n      userId: \"3\",\n      status: \"blocked\",\n    },\n  ],\n  _id: \"1\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet other = {\n  meUserRelationship: [\n    {\n      userId: \"1\",\n      status: \"blocked\",\n    },\n    {\n      userId: \"5\",\n      status: \"blocked\",\n    },\n  ],\n  _id: \"2\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet result = await userServiceObj.checkBlockStatus(me, other);\nassert.equal(result, true);",
                  "err": {},
                  "uuid": "d7233d43-9dbd-4b72-9d93-d2a58562ff55",
                  "parentUUID": "84d697ee-42c5-4beb-9f01-32cd8e8ee8be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9fc04a3b-dac7-4914-b92b-06e1ec56f781",
                "d7233d43-9dbd-4b72-9d93-d2a58562ff55"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "20fedb24-fdb4-458d-95c6-37d24e28f3e2",
              "title": "blockUser  ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test blockUser   test should be success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceObj = new UserService({});\nlet me = {\n  meUserRelationship: [\n    {\n      userId: \"2\",\n      status: \"followed\",\n    },\n    {\n      userId: \"3\",\n      status: \"blocked\",\n    },\n  ],\n  userMeRelationship: [\n    {\n      userId: \"2\",\n      status: \"followed\",\n    },\n    {\n      userId: \"3\",\n      status: \"blocked\",\n    },\n  ],\n  _id: \"1\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet other = {\n  userMeRelationship: [\n    {\n      userId: \"1\",\n      status: \"followed\",\n    },\n    {\n      userId: \"4\",\n      status: \"blocked\",\n    },\n    {\n      userId: \"5\",\n      status: \"blocked\",\n    },\n  ],\n  meUserRelationship: [\n    {\n      userId: \"1\",\n      status: \"followed\",\n    },\n    {\n      userId: \"4\",\n      status: \"blocked\",\n    },\n    {\n      userId: \"5\",\n      status: \"blocked\",\n    },\n  ],\n  _id: \"2\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet result = await userServiceObj.blockUser(me, other);\nassert.equal(result, true);\nassert.equal(me.meUserRelationship[0].status, \"blocked\");\nassert.equal(other.userMeRelationship[0].status, \"blocked\");",
                  "err": {},
                  "uuid": "bc61a9f3-48c3-4c20-a265-782f13cde7c8",
                  "parentUUID": "20fedb24-fdb4-458d-95c6-37d24e28f3e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test blockUser   test should be success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceObj = new UserService({});\nlet me = {\n  meUserRelationship: [\n    {\n      userId: \"3\",\n      status: \"blocked\",\n    },\n  ],\n  userMeRelationship: [\n    {\n      userId: \"3\",\n      status: \"none\",\n    },\n  ],\n  _id: \"1\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet other = {\n  userMeRelationship: [\n    {\n      userId: \"4\",\n      status: \"blocked\",\n    },\n    {\n      userId: \"5\",\n      status: \"blocked\",\n    },\n  ],\n  meUserRelationship: [\n    {\n      userId: \"3\",\n      status: \"none\",\n    },\n  ],\n  _id: \"2\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet result = await userServiceObj.blockUser(me, other);\nassert.equal(result, true);\nassert.equal(me.meUserRelationship[1].status, \"blocked\");\nassert.equal(other.userMeRelationship[2].status, \"blocked\");",
                  "err": {},
                  "uuid": "5e6a4a27-87db-40f8-b168-fdd971dc476f",
                  "parentUUID": "20fedb24-fdb4-458d-95c6-37d24e28f3e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bc61a9f3-48c3-4c20-a265-782f13cde7c8",
                "5e6a4a27-87db-40f8-b168-fdd971dc476f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "a90877cd-2b26-4513-aa5f-31151becfe94",
              "title": "unBlockUser  ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test unBlockUser   test should be success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceObj = new UserService({});\nlet me = {\n  meUserRelationship: [\n    {\n      userId: \"2\",\n      status: \"blocked\",\n    },\n    {\n      userId: \"3\",\n      status: \"blocked\",\n    },\n  ],\n  _id: \"1\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet other = {\n  userMeRelationship: [\n    {\n      userId: \"1\",\n      status: \"blocked\",\n    },\n    {\n      userId: \"4\",\n      status: \"blocked\",\n    },\n    {\n      userId: \"5\",\n      status: \"blocked\",\n    },\n  ],\n  _id: \"2\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet result = await userServiceObj.unBlockUser(me, other);\nassert.equal(result, true);\nassert.equal(me.meUserRelationship[0].status, \"none\");\nassert.equal(other.userMeRelationship[0].status, \"none\");",
                  "err": {},
                  "uuid": "c35a9dad-a105-404a-88be-f730fc3dfdb6",
                  "parentUUID": "a90877cd-2b26-4513-aa5f-31151becfe94",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c35a9dad-a105-404a-88be-f730fc3dfdb6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "bd2cf81f-0c77-46e1-8111-0344fc8274b1",
              "title": "followUser  ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test followUser   test should be success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceObj = new UserService({});\nlet me = {\n  meUserRelationship: [\n    {\n      userId: \"4\",\n      status: \"followed\",\n    },\n    {\n      userId: \"3\",\n      status: \"blocked\",\n    },\n  ],\n  userMeRelationship: [\n    {\n      userId: \"2\",\n      status: \"followed\",\n    },\n    {\n      userId: \"3\",\n      status: \"blocked\",\n    },\n  ],\n  _id: \"1\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet other = {\n  userMeRelationship: [\n    {\n      userId: \"4\",\n      status: \"blocked\",\n    },\n    {\n      userId: \"5\",\n      status: \"blocked\",\n    },\n  ],\n  meUserRelationship: [\n    {\n      userId: \"1\",\n      status: \"followed\",\n    },\n    {\n      userId: \"4\",\n      status: \"blocked\",\n    },\n    {\n      userId: \"5\",\n      status: \"blocked\",\n    },\n  ],\n  _id: \"2\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet result = await userServiceObj.followUser(me, other);\nassert.equal(result, false);\nassert.equal(me.meUserRelationship[0].status, \"followed\");\nassert.equal(other.userMeRelationship[2].status, \"followed\");",
                  "err": {},
                  "uuid": "75bbaa97-ff7d-47c3-8711-bacffaa02278",
                  "parentUUID": "bd2cf81f-0c77-46e1-8111-0344fc8274b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "test2 should be success",
                  "fullTitle": "User Services Test followUser   test2 should be success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceObj = new UserService({});\nlet me = {\n  meUserRelationship: [\n    {\n      userId: \"2\",\n      status: \"followed\",\n    },\n  ],\n  userMeRelationship: [\n    {\n      userId: \"3\",\n      status: \"none\",\n    },\n  ],\n  _id: \"1\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet other = {\n  userMeRelationship: [\n    {\n      userId: \"1\",\n      status: \"followed\",\n    },\n    {\n      userId: \"5\",\n      status: \"blocked\",\n    },\n  ],\n  meUserRelationship: [\n    {\n      userId: \"3\",\n      status: \"none\",\n    },\n  ],\n  _id: \"2\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet result = await userServiceObj.followUser(me, other);\nassert.equal(result, true);",
                  "err": {},
                  "uuid": "df600d46-955a-46ce-a019-c20b6042708b",
                  "parentUUID": "bd2cf81f-0c77-46e1-8111-0344fc8274b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "75bbaa97-ff7d-47c3-8711-bacffaa02278",
                "df600d46-955a-46ce-a019-c20b6042708b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "126ee295-fa59-4bcb-a150-5d73c08e56fb",
              "title": "unFollowUser  ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test unFollowUser   test should be success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceObj = new UserService({});\nlet me = {\n  meUserRelationship: [\n    {\n      userId: \"2\",\n      status: \"followed\",\n    },\n    {\n      userId: \"3\",\n      status: \"blocked\",\n    },\n  ],\n  _id: \"1\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet other = {\n  userMeRelationship: [\n    {\n      userId: \"1\",\n      status: \"followed\",\n    },\n    {\n      userId: \"4\",\n      status: \"blocked\",\n    },\n    {\n      userId: \"5\",\n      status: \"blocked\",\n    },\n  ],\n  _id: \"2\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet result = await userServiceObj.unfollowUser(me, other);\nassert.equal(result, false);\nassert.equal(me.meUserRelationship[0].status, \"none\");\nassert.equal(other.userMeRelationship[0].status, \"none\");",
                  "err": {},
                  "uuid": "85b69009-313c-42f8-91fe-2b03c51f2a95",
                  "parentUUID": "126ee295-fa59-4bcb-a150-5d73c08e56fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test unFollowUser   test should be success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceObj = new UserService({});\nlet me = {\n  meUserRelationship: [\n    {\n      userId: \"5\",\n      status: \"blocked\",\n    },\n    {\n      userId: \"3\",\n      status: \"blocked\",\n    },\n  ],\n  _id: \"1\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet other = {\n  userMeRelationship: [\n    {\n      userId: \"4\",\n      status: \"blocked\",\n    },\n    {\n      userId: \"5\",\n      status: \"blocked\",\n    },\n  ],\n  _id: \"2\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet result = await userServiceObj.unfollowUser(me, other);\nassert.equal(result, true);",
                  "err": {},
                  "uuid": "15c70fcc-917c-47b1-9f0c-c89c02fef54b",
                  "parentUUID": "126ee295-fa59-4bcb-a150-5d73c08e56fb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "85b69009-313c-42f8-91fe-2b03c51f2a95",
                "15c70fcc-917c-47b1-9f0c-c89c02fef54b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "0096b959-8c4c-41e5-b38a-e4d67cdc2cd6",
              "title": "generateRandomPassword  ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test generateRandomPassword   test should be success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceObj = new UserService({});\nlet result = userServiceObj.generateRandomPassword();\nassert.notEqual(result, false);",
                  "err": {},
                  "uuid": "2ffe929e-2eda-4579-ac88-73a648d91ae6",
                  "parentUUID": "0096b959-8c4c-41e5-b38a-e4d67cdc2cd6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ffe929e-2eda-4579-ac88-73a648d91ae6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "123503f3-bc97-49a3-97d0-4380abf73bda",
              "title": "checkPasswordStrength  ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test checkPasswordStrength   test should be success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceObj = new UserService({});\nlet result = userServiceObj.checkPasswordStrength(\"Aa123456*\");\nassert.equal(result, \"Medium\");",
                  "err": {},
                  "uuid": "ad7c8612-d9b2-46c5-8167-738058d57efe",
                  "parentUUID": "123503f3-bc97-49a3-97d0-4380abf73bda",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ad7c8612-d9b2-46c5-8167-738058d57efe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "aa7c1d88-8c69-4152-8a53-c52ed8cd48bf",
              "title": "sendVerificationToken  ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test sendVerificationToken   test should be success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceObj = new UserService({ Email });\nlet user = {\n  profileBackground: \"\",\n  profilePicture: \"\",\n  createVerificationToken: () => {\n    return \"token\";\n  },\n  save: async () => {\n    return true;\n  },\n};\nlet result = await userServiceObj.sendVerificationToken(user);\nassert.equal(result.success, true);",
                  "err": {},
                  "uuid": "3504b0f0-5f22-4a31-becd-c2b8599d765e",
                  "parentUUID": "aa7c1d88-8c69-4152-8a53-c52ed8cd48bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test sendVerificationToken   test should be success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceObj = new UserService({});\nlet user = {\n  profileBackground: \"\",\n  profilePicture: \"\",\n  createVerificationToken: () => {\n    return \"token\";\n  },\n  save: async () => {\n    return true;\n  },\n};\nlet result = await userServiceObj.sendVerificationToken(user);\nassert.equal(result.success, false);",
                  "err": {},
                  "uuid": "6f4917ae-22ea-483a-a64e-73d52ac50c6e",
                  "parentUUID": "aa7c1d88-8c69-4152-8a53-c52ed8cd48bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3504b0f0-5f22-4a31-becd-c2b8599d765e",
                "6f4917ae-22ea-483a-a64e-73d52ac50c6e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "ad8ca289-f230-4510-84e3-468b94e117d5",
              "title": "changePassword  ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test changePassword   test should be success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceObj = new UserService({});\nlet user = {\n  _id: \"1\",\n  save: async () => {\n    return true;\n  },\n};\nlet result = await userServiceObj.changePassword(user);\nassert.notEqual(result, false);",
                  "err": {},
                  "uuid": "0034bf9d-6d37-4694-af16-2374f81d1159",
                  "parentUUID": "ad8ca289-f230-4510-84e3-468b94e117d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0034bf9d-6d37-4694-af16-2374f81d1159"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "f3271792-c445-4a54-8106-d45a2eff19b7",
              "title": "deleteAccount  ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test deleteAccount   test should be success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceObj = new UserService({});\nlet user = {\n  _id: \"1\",\n  save: async () => {\n    return true;\n  },\n};\nlet result = await userServiceObj.deleteAccount(user);\nassert.equal(result, true);",
                  "err": {},
                  "uuid": "5e6faa07-ae47-461d-9fa4-8de25a06f1ed",
                  "parentUUID": "f3271792-c445-4a54-8106-d45a2eff19b7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5e6faa07-ae47-461d-9fa4-8de25a06f1ed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "0d995b9c-a100-40c0-a3cb-43895a91bf2a",
              "title": "decodeToken  ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test decodeToken   test should be success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userServiceObj = new UserService({});\ntoken = userServiceObj.createToken(\"1\");\nlet result = await userServiceObj.decodeToken(token);\nassert.notEqual(result, false);",
                  "err": {},
                  "uuid": "e621e949-a435-43fd-aa20-c96551452cf1",
                  "parentUUID": "0d995b9c-a100-40c0-a3cb-43895a91bf2a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e621e949-a435-43fd-aa20-c96551452cf1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "5803edfa-8a9b-4a4d-8b29-67429cfe520f",
              "title": "verifyEmailToken services Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test (success operation of database)",
                  "fullTitle": "User Services Test verifyEmailToken services Test first test (success operation of database)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findByVerificationToken: (userData) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"1\",\n        password: \"Aa1234*\",\n        profileBackground: \"\",\n        profilePicture: \"\",\n        save: async (data1, data2) => {\n          return true;\n        },\n      },\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.verifyEmailToken(\"ahmed\");\nassert.equal(output.success, true);\nassert.notEqual(output.token, false);",
                  "err": {},
                  "uuid": "68bc1f43-1402-4905-b98c-a3d360c384d6",
                  "parentUUID": "5803edfa-8a9b-4a4d-8b29-67429cfe520f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test success",
                  "fullTitle": "User Services Test verifyEmailToken services Test second test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findByVerificationToken: (userData) => {\n    const response = {\n      success: false,\n      error: mongoErrors.NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.verifyEmailToken(\"token\");\nassert.equal(output.success, false);\nassert.equal(output.error, userErrors.INVALID_RESET_TOKEN);",
                  "err": {},
                  "uuid": "56740477-8fad-4a80-af36-703b2109e82b",
                  "parentUUID": "5803edfa-8a9b-4a4d-8b29-67429cfe520f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "68bc1f43-1402-4905-b98c-a3d360c384d6",
                "56740477-8fad-4a80-af36-703b2109e82b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "8b04644a-ce5a-4324-8eaa-5d91f1a0d960",
              "title": "getUser services Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test (success operation of database)",
                  "fullTitle": "User Services Test getUser services Test first test (success operation of database)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findById: (userData) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"1\",\n        password: \"Aa1234*\",\n        profileBackground: \"\",\n        profilePicture: \"\",\n        save: async (data1, data2) => {\n          return true;\n        },\n      },\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.getUser(\"ahmed\");\nassert.equal(output.success, true);",
                  "err": {},
                  "uuid": "9c63c9f3-aa09-4432-a4cd-fa0f5f72f1f1",
                  "parentUUID": "8b04644a-ce5a-4324-8eaa-5d91f1a0d960",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test success",
                  "fullTitle": "User Services Test getUser services Test second test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findById: (userData) => {\n    const response = {\n      success: false,\n      error: mongoErrors.NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.getUser(\"token\");\nassert.equal(output.success, false);",
                  "err": {},
                  "uuid": "5ed36950-07ff-48e9-97e6-ea4639b94275",
                  "parentUUID": "8b04644a-ce5a-4324-8eaa-5d91f1a0d960",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9c63c9f3-aa09-4432-a4cd-fa0f5f72f1f1",
                "5ed36950-07ff-48e9-97e6-ea4639b94275"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "e6eb2c54-f21c-4895-9956-6ba06d00c78c",
              "title": "getUserWithFollowers services Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test (success operation of database)",
                  "fullTitle": "User Services Test getUserWithFollowers services Test first test (success operation of database)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findById: (userData) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"1\",\n        password: \"Aa1234*\",\n        profileBackground: \"\",\n        profilePicture: \"\",\n        save: async (data1, data2) => {\n          return true;\n        },\n      },\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.getUserWithFollowers(\"ahmed\");\nassert.equal(output.success, true);",
                  "err": {},
                  "uuid": "9900b176-774c-4565-81d3-d6f3b15baaa8",
                  "parentUUID": "e6eb2c54-f21c-4895-9956-6ba06d00c78c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test success",
                  "fullTitle": "User Services Test getUserWithFollowers services Test second test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findById: (userData) => {\n    const response = {\n      success: false,\n      error: mongoErrors.NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.getUserWithFollowers(\"token\");\nassert.equal(output.success, false);",
                  "err": {},
                  "uuid": "f8fec09c-cc5c-4f96-835d-89664893a2f9",
                  "parentUUID": "e6eb2c54-f21c-4895-9956-6ba06d00c78c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9900b176-774c-4565-81d3-d6f3b15baaa8",
                "f8fec09c-cc5c-4f96-835d-89664893a2f9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "acd5e626-f9b2-404b-9b4b-840fc2b01639",
              "title": "getUserByEmail services Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test (success operation of database)",
                  "fullTitle": "User Services Test getUserByEmail services Test first test (success operation of database)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findByEmail: (userData) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"1\",\n        password: \"Aa1234*\",\n        profileBackground: \"\",\n        profilePicture: \"\",\n        save: async (data1, data2) => {\n          return true;\n        },\n      },\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.getUserByEmail(\"ahmed\");\nassert.equal(output.success, true);",
                  "err": {},
                  "uuid": "cdf1f3f9-53ed-43bd-95dc-aa8f682635a1",
                  "parentUUID": "acd5e626-f9b2-404b-9b4b-840fc2b01639",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test success",
                  "fullTitle": "User Services Test getUserByEmail services Test second test success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findByEmail: (userData) => {\n    const response = {\n      success: false,\n      error: mongoErrors.NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.getUserByEmail(\"token\");\nassert.equal(output.success, false);",
                  "err": {},
                  "uuid": "20fdfbda-9abe-4512-b1bd-052253293671",
                  "parentUUID": "acd5e626-f9b2-404b-9b4b-840fc2b01639",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cdf1f3f9-53ed-43bd-95dc-aa8f682635a1",
                "20fdfbda-9abe-4512-b1bd-052253293671"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "a37ce061-165a-47bd-a8ed-ec346975e1af",
              "title": "getUserByName services Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test (success operation of database)",
                  "fullTitle": "User Services Test getUserByName services Test first test (success operation of database)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findByUserName: (userData) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"1\",\n        password: \"Aa1234*\",\n        profileBackground: \"\",\n        profilePicture: \"\",\n        save: async (data1, data2) => {\n          return true;\n        },\n      },\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.getUserByName(\"ahmed\");\nassert.equal(output.success, true);",
                  "err": {},
                  "uuid": "794e42d8-468d-4da4-868a-22c32adc2e14",
                  "parentUUID": "a37ce061-165a-47bd-a8ed-ec346975e1af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test success",
                  "fullTitle": "User Services Test getUserByName services Test second test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findByUserName: (userData) => {\n    const response = {\n      success: false,\n      error: mongoErrors.NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.getUserByName(\"token\");\nassert.equal(output.success, false);",
                  "err": {},
                  "uuid": "0a759c14-6ffb-4a97-befa-08d8bc859a8a",
                  "parentUUID": "a37ce061-165a-47bd-a8ed-ec346975e1af",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "794e42d8-468d-4da4-868a-22c32adc2e14",
                "0a759c14-6ffb-4a97-befa-08d8bc859a8a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "707d53ac-6f26-421f-a014-5836225da6b0",
              "title": "checkPassword  ",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "test should be success",
                  "fullTitle": "User Services Test checkPassword   test should be success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findByUserName: (userData) => {\n    const response = {\n      success: true,\n      doc: {\n        checkPassword: async () => {\n          return true;\n        },\n      },\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({ UserRepository });\nlet result = await userServiceObj.checkPassword(token);\nassert.equal(result, true);",
                  "err": {},
                  "uuid": "b3d9dda0-15d6-42f8-b5d3-976f1cdac0a6",
                  "parentUUID": "707d53ac-6f26-421f-a014-5836225da6b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b3d9dda0-15d6-42f8-b5d3-976f1cdac0a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "72d0098c-83c8-4e5f-bba1-6a0e89ba5f29",
              "title": "updateUserEmail services Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test (success operation of database)",
                  "fullTitle": "User Services Test updateUserEmail services Test first test (success operation of database)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  updateEmailById: (userData) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"1\",\n        password: \"Aa1234*\",\n        profileBackground: \"\",\n        profilePicture: \"\",\n        save: async (data1, data2) => {\n          return true;\n        },\n      },\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.updateUserEmail(\"ahmed\");\nassert.equal(output.success, true);",
                  "err": {},
                  "uuid": "5c5cf1f0-5a30-4095-b5cc-8047a6431a5b",
                  "parentUUID": "72d0098c-83c8-4e5f-bba1-6a0e89ba5f29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test success",
                  "fullTitle": "User Services Test updateUserEmail services Test second test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  updateEmailById: (userData) => {\n    const response = {\n      success: false,\n      error: mongoErrors.NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.updateUserEmail(\"token\");\nassert.equal(output.success, false);",
                  "err": {},
                  "uuid": "5038fd39-dcb3-4fbf-b31a-f4885638367f",
                  "parentUUID": "72d0098c-83c8-4e5f-bba1-6a0e89ba5f29",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5c5cf1f0-5a30-4095-b5cc-8047a6431a5b",
                "5038fd39-dcb3-4fbf-b31a-f4885638367f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "6c0e8137-14c3-43c7-8e34-338115d31e8e",
              "title": "checkResetTokenTime services Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test (success operation of database)",
                  "fullTitle": "User Services Test checkResetTokenTime services Test first test (success operation of database)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findByResetPassword: (userData) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"1\",\n        password: \"Aa1234*\",\n        profileBackground: \"\",\n        profilePicture: \"\",\n        save: async (data1, data2) => {\n          return true;\n        },\n      },\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.checkResetTokenTime(\"ahmed\");\nassert.equal(output.success, true);",
                  "err": {},
                  "uuid": "eec57fb8-ff2c-4e81-b920-b67ae22b1d86",
                  "parentUUID": "6c0e8137-14c3-43c7-8e34-338115d31e8e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test success",
                  "fullTitle": "User Services Test checkResetTokenTime services Test second test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  findByResetPassword: (userData) => {\n    const response = {\n      success: false,\n      error: mongoErrors.NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.checkResetTokenTime(\"token\");\nassert.equal(output.success, false);",
                  "err": {},
                  "uuid": "b85ca5d0-cfec-4061-b0b1-f2cd10658d92",
                  "parentUUID": "6c0e8137-14c3-43c7-8e34-338115d31e8e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eec57fb8-ff2c-4e81-b920-b67ae22b1d86",
                "b85ca5d0-cfec-4061-b0b1-f2cd10658d92"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "6016e241-9c06-45d0-af2a-85034c4223ea",
              "title": "about services Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test (success operation of database)",
                  "fullTitle": "User Services Test about services Test first test (success operation of database)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let me = {\n  meUserRelationship: [\n    {\n      userId: \"2\",\n      status: \"followed\",\n    },\n    {\n      userId: \"3\",\n      status: \"blocked\",\n    },\n  ],\n  userMeRelationship: [\n    {\n      userId: \"2\",\n      status: \"followed\",\n    },\n  ],\n  _id: \"1\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet other = {\n  _id: \"2\",\n  userName: \"\",\n  profilePicture: \"\",\n  profileBackground: \"\",\n  canbeFollowed: 0,\n  followersCount: 0,\n  friendsCount: 0,\n  gender: \"\",\n  displayName: \"\",\n  postKarma: 0,\n  commentKarma: 0,\n  description: \"\",\n  createdAt: \"\",\n  nsfw: true,\n  autoplayMedia: true,\n  adultContent: true,\n  isFollowed: true,\n  country: \"\",\n  socialLinks: [],\n  isBlocked: false,\n};\nconst userServiceObj = new UserService({});\nconst output = await userServiceObj.about(me, other);\nassert.equal(output.profileBackground, \"\");\nassert.equal(output.isBlocked, false);\nassert.equal(output.isFollowed, true);",
                  "err": {},
                  "uuid": "b37f4dc1-59a8-4ce2-a9e5-70ed9fed854f",
                  "parentUUID": "6016e241-9c06-45d0-af2a-85034c4223ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test success",
                  "fullTitle": "User Services Test about services Test second test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let me = {\n  meUserRelationship: [\n    {\n      userId: \"2\",\n      status: \"followed\",\n    },\n    {\n      userId: \"3\",\n      status: \"blocked\",\n    },\n  ],\n  userMeRelationship: [\n    {\n      userId: \"2\",\n      status: \"blocked\",\n    },\n  ],\n  _id: \"1\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet other = {\n  _id: \"2\",\n  userName: \"\",\n  profilePicture: `${process.env.BACKDOMAIN}/users/default.png`,\n  profileBackground: `${process.env.BACKDOMAIN}/users/defaultcover.png`,\n  canbeFollowed: 0,\n  followersCount: 0,\n  friendsCount: 0,\n  gender: \"\",\n  displayName: \"\",\n  postKarma: 0,\n  commentKarma: 0,\n  description: \"\",\n  createdAt: \"\",\n  nsfw: true,\n  autoplayMedia: true,\n  adultContent: true,\n  isFollowed: false,\n  country: \"\",\n  socialLinks: [],\n  isBlocked: true,\n};\nconst userServiceObj = new UserService({});\nconst output = await userServiceObj.about(me, other);\nassert.equal(\n  output.profileBackground,\n  `${process.env.BACKDOMAIN}/users/defaultcover.png`\n);\nassert.equal(output.isBlocked, false);\nassert.equal(output.isFollowed, false);",
                  "err": {},
                  "uuid": "a106b449-407d-46d1-8986-85d2f3fa103c",
                  "parentUUID": "6016e241-9c06-45d0-af2a-85034c4223ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "thrid test (success operation of database)",
                  "fullTitle": "User Services Test about services Test thrid test (success operation of database)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let me = {\n  meUserRelationship: [\n    {\n      userId: \"2\",\n      status: \"blocked\",\n    },\n    {\n      userId: \"3\",\n      status: \"blocked\",\n    },\n  ],\n  userMeRelationship: [\n    {\n      userId: \"2\",\n      status: \"followed\",\n    },\n  ],\n  _id: \"1\",\n  profileBackground: \"\",\n  profilePicture: \"\",\n  save: async () => {\n    return true;\n  },\n};\nlet other = {\n  _id: \"2\",\n  userName: \"\",\n  profilePicture: \"\",\n  profileBackground: \"\",\n  canbeFollowed: 0,\n  followersCount: 0,\n  friendsCount: 0,\n  gender: \"\",\n  displayName: \"\",\n  postKarma: 0,\n  commentKarma: 0,\n  description: \"\",\n  createdAt: \"\",\n  nsfw: true,\n  autoplayMedia: true,\n  adultContent: true,\n  isFollowed: false,\n  country: \"\",\n  socialLinks: [],\n  isBlocked: true,\n};\nconst userServiceObj = new UserService({});\nconst output = await userServiceObj.about(me, other);\nassert.equal(output.profileBackground, \"\");\nassert.equal(output.isBlocked, true);\nassert.equal(output.isFollowed, false);",
                  "err": {},
                  "uuid": "3aff1173-e506-4bf7-bdb8-75861afaa94b",
                  "parentUUID": "6016e241-9c06-45d0-af2a-85034c4223ea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b37f4dc1-59a8-4ce2-a9e5-70ed9fed854f",
                "a106b449-407d-46d1-8986-85d2f3fa103c",
                "3aff1173-e506-4bf7-bdb8-75861afaa94b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "ebe9909e-901b-4ebe-8f79-137167efadaa",
              "title": "saveFirebaseToken services Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test (success operation of database)",
                  "fullTitle": "User Services Test saveFirebaseToken services Test first test (success operation of database)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  addTokenToUser: (userData) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"1\",\n        password: \"Aa1234*\",\n        profileBackground: \"\",\n        profilePicture: \"\",\n        save: async (data1, data2) => {\n          return true;\n        },\n      },\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.saveFirebaseToken(\"ahmed\");\nassert.equal(output.success, true);",
                  "err": {},
                  "uuid": "87fbfa23-02b0-4447-b4dd-68afc06f817c",
                  "parentUUID": "ebe9909e-901b-4ebe-8f79-137167efadaa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test success",
                  "fullTitle": "User Services Test saveFirebaseToken services Test second test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  addTokenToUser: (userData) => {\n    const response = {\n      success: false,\n      error: mongoErrors.NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.saveFirebaseToken(\"token\");\nassert.equal(output.success, false);",
                  "err": {},
                  "uuid": "e689d55f-ca5b-4c64-964b-f17536608179",
                  "parentUUID": "ebe9909e-901b-4ebe-8f79-137167efadaa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "87fbfa23-02b0-4447-b4dd-68afc06f817c",
                "e689d55f-ca5b-4c64-964b-f17536608179"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "27088175-bdbb-46c6-8c5c-a32ba87993a9",
              "title": "getFirebaseToken services Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test (success operation of database)",
                  "fullTitle": "User Services Test getFirebaseToken services Test first test (success operation of database)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  getFirebaseToken: (userData) => {\n    const response = {\n      success: true,\n      doc: {\n        _id: \"1\",\n        password: \"Aa1234*\",\n        profileBackground: \"\",\n        profilePicture: \"\",\n        save: async (data1, data2) => {\n          return true;\n        },\n      },\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.getFirebaseToken(\"ahmed\");\nassert.equal(output.success, true);",
                  "err": {},
                  "uuid": "4e68356b-21db-40b8-887e-7a257355e6f8",
                  "parentUUID": "27088175-bdbb-46c6-8c5c-a32ba87993a9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "second test success",
                  "fullTitle": "User Services Test getFirebaseToken services Test second test success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  getFirebaseToken: (userData) => {\n    const response = {\n      success: false,\n      error: mongoErrors.NOT_FOUND,\n    };\n    return response;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.getFirebaseToken(\"token\");\nassert.equal(output.success, false);",
                  "err": {},
                  "uuid": "ab3b3bfb-c16c-4aa1-ad74-bab931dc72e8",
                  "parentUUID": "27088175-bdbb-46c6-8c5c-a32ba87993a9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4e68356b-21db-40b8-887e-7a257355e6f8",
                "ab3b3bfb-c16c-4aa1-ad74-bab931dc72e8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "831fa35b-9d47-44ff-b664-f3dc2f0dfc16",
              "title": "getBlockedUsers services Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test (success operation of database)",
                  "fullTitle": "User Services Test getBlockedUsers services Test first test (success operation of database)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const UserRepository = {\n  getBlocked: (userData) => {\n    const users = [\n      {\n        status: \"blocked\",\n        userId: {\n          _id: \"1\",\n          profileBackground: \"\",\n          profilePicture: \"\",\n          userName: \"ahmed\",\n          postKarma: 0,\n          commentKarma: 0,\n        },\n      },\n      {\n        status: \"followed\",\n        userId: {\n          _id: \"2\",\n          profileBackground: \"\",\n          profilePicture: \"\",\n          userName: \"mohamed\",\n          postKarma: 0,\n          commentKarma: 0,\n        },\n      },\n    ];\n    return users;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.getBlockedUsers(\"ahmed\");\nassert.equal(output.length, 1);\nassert.equal(output[0].userName, \"ahmed\");",
                  "err": {},
                  "uuid": "f6df0bff-c3f8-49ee-a7d1-b90d4c70d5d1",
                  "parentUUID": "831fa35b-9d47-44ff-b664-f3dc2f0dfc16",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f6df0bff-c3f8-49ee-a7d1-b90d4c70d5d1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "54e75d6a-5bff-4858-8f53-aef141472a3b",
              "title": "getFollowers services Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test (success operation of database)",
                  "fullTitle": "User Services Test getFollowers services Test first test (success operation of database)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let me = {\n  meUserRelationship: [\n    {\n      userId: \"2\",\n      status: \"followed\",\n    },\n  ],\n};\nconst UserRepository = {\n  getFollowers: (userData) => {\n    const users = [\n      {\n        status: \"blocked\",\n        userId: {\n          _id: \"1\",\n          profileBackground: \"\",\n          profilePicture: \"\",\n          userName: \"ahmed\",\n          postKarma: 0,\n          commentKarma: 0,\n        },\n      },\n      {\n        status: \"followed\",\n        userId: {\n          _id: \"2\",\n          profileBackground: \"\",\n          profilePicture: \"\",\n          userName: \"mohamed\",\n          postKarma: 0,\n          commentKarma: 0,\n        },\n      },\n    ];\n    return users;\n  },\n};\nconst userServiceObj = new UserService({\n  UserRepository,\n  Email,\n});\nconst output = await userServiceObj.getFollowers(me);\nassert.equal(output.length, 1);\nassert.equal(output[0].userName, \"mohamed\");",
                  "err": {},
                  "uuid": "12482221-35cb-4575-ab51-bcb812eb3a83",
                  "parentUUID": "54e75d6a-5bff-4858-8f53-aef141472a3b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "12482221-35cb-4575-ab51-bcb812eb3a83"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            },
            {
              "uuid": "29cefdef-6fd0-4137-9928-b554e2487d3a",
              "title": "getPeopleUserKnows services Test",
              "fullFile": "D:\\Engineering\\Third_Year\\CMP_2023\\First_Term\\Software Engineering\\Project\\Backend-Reddit\\API\\test\\services\\userServices.js",
              "file": "\\test\\services\\userServices.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "first test (success operation of database)",
                  "fullTitle": "User Services Test getPeopleUserKnows services Test first test (success operation of database)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let me = {\n  meUserRelationship: [\n    {\n      userId: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n      status: \"followed\",\n    },\n    {\n      userId: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3881\"),\n      status: \"blocked\",\n    },\n    {\n      userId: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3882\"),\n      status: \"followed\",\n    },\n  ],\n  userMeRelationship: [\n    {\n      userId: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3880\"),\n      status: \"followed\",\n    },\n    {\n      userId: mongoose.Types.ObjectId(\"636e901bbc485bd111dd3882\"),\n      status: \"blocked\",\n    },\n  ],\n};\nconst userServiceObj = new UserService({\n  Email,\n});\nconst output = await userServiceObj.getPeopleUserKnows(me);\n// assert.equal(output.length, 1);\n// assert.equal(output[0].userName, \"mohamed\");",
                  "err": {},
                  "uuid": "b23607af-d48b-4c64-988d-ba1a8055c0ad",
                  "parentUUID": "29cefdef-6fd0-4137-9928-b554e2487d3a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b23607af-d48b-4c64-988d-ba1a8055c0ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 1000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 1000000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 1000000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}